
velostat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e5c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005fe4  08005fe4  00015fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff4  08005ff4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ffc  08005ffc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000580  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000058c  2000058c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce3b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f8  00000000  00000000  0002ce77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0002f170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e0  00000000  00000000  0002fc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e4e  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d233  00000000  00000000  00052486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0273  00000000  00000000  0005f6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f92c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d3c  00000000  00000000  0012f97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005fcc 	.word	0x08005fcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005fcc 	.word	0x08005fcc

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b974 	b.w	8000b34 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468e      	mov	lr, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d14d      	bne.n	800090e <__udivmoddi4+0xaa>
 8000872:	428a      	cmp	r2, r1
 8000874:	4694      	mov	ip, r2
 8000876:	d969      	bls.n	800094c <__udivmoddi4+0xe8>
 8000878:	fab2 f282 	clz	r2, r2
 800087c:	b152      	cbz	r2, 8000894 <__udivmoddi4+0x30>
 800087e:	fa01 f302 	lsl.w	r3, r1, r2
 8000882:	f1c2 0120 	rsb	r1, r2, #32
 8000886:	fa20 f101 	lsr.w	r1, r0, r1
 800088a:	fa0c fc02 	lsl.w	ip, ip, r2
 800088e:	ea41 0e03 	orr.w	lr, r1, r3
 8000892:	4094      	lsls	r4, r2
 8000894:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000898:	0c21      	lsrs	r1, r4, #16
 800089a:	fbbe f6f8 	udiv	r6, lr, r8
 800089e:	fa1f f78c 	uxth.w	r7, ip
 80008a2:	fb08 e316 	mls	r3, r8, r6, lr
 80008a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008aa:	fb06 f107 	mul.w	r1, r6, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ba:	f080 811f 	bcs.w	8000afc <__udivmoddi4+0x298>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 811c 	bls.w	8000afc <__udivmoddi4+0x298>
 80008c4:	3e02      	subs	r6, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	b2a4      	uxth	r4, r4
 80008cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d0:	fb08 3310 	mls	r3, r8, r0, r3
 80008d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d8:	fb00 f707 	mul.w	r7, r0, r7
 80008dc:	42a7      	cmp	r7, r4
 80008de:	d90a      	bls.n	80008f6 <__udivmoddi4+0x92>
 80008e0:	eb1c 0404 	adds.w	r4, ip, r4
 80008e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e8:	f080 810a 	bcs.w	8000b00 <__udivmoddi4+0x29c>
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	f240 8107 	bls.w	8000b00 <__udivmoddi4+0x29c>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008fa:	1be4      	subs	r4, r4, r7
 80008fc:	2600      	movs	r6, #0
 80008fe:	b11d      	cbz	r5, 8000908 <__udivmoddi4+0xa4>
 8000900:	40d4      	lsrs	r4, r2
 8000902:	2300      	movs	r3, #0
 8000904:	e9c5 4300 	strd	r4, r3, [r5]
 8000908:	4631      	mov	r1, r6
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d909      	bls.n	8000926 <__udivmoddi4+0xc2>
 8000912:	2d00      	cmp	r5, #0
 8000914:	f000 80ef 	beq.w	8000af6 <__udivmoddi4+0x292>
 8000918:	2600      	movs	r6, #0
 800091a:	e9c5 0100 	strd	r0, r1, [r5]
 800091e:	4630      	mov	r0, r6
 8000920:	4631      	mov	r1, r6
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	fab3 f683 	clz	r6, r3
 800092a:	2e00      	cmp	r6, #0
 800092c:	d14a      	bne.n	80009c4 <__udivmoddi4+0x160>
 800092e:	428b      	cmp	r3, r1
 8000930:	d302      	bcc.n	8000938 <__udivmoddi4+0xd4>
 8000932:	4282      	cmp	r2, r0
 8000934:	f200 80f9 	bhi.w	8000b2a <__udivmoddi4+0x2c6>
 8000938:	1a84      	subs	r4, r0, r2
 800093a:	eb61 0303 	sbc.w	r3, r1, r3
 800093e:	2001      	movs	r0, #1
 8000940:	469e      	mov	lr, r3
 8000942:	2d00      	cmp	r5, #0
 8000944:	d0e0      	beq.n	8000908 <__udivmoddi4+0xa4>
 8000946:	e9c5 4e00 	strd	r4, lr, [r5]
 800094a:	e7dd      	b.n	8000908 <__udivmoddi4+0xa4>
 800094c:	b902      	cbnz	r2, 8000950 <__udivmoddi4+0xec>
 800094e:	deff      	udf	#255	; 0xff
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	2a00      	cmp	r2, #0
 8000956:	f040 8092 	bne.w	8000a7e <__udivmoddi4+0x21a>
 800095a:	eba1 010c 	sub.w	r1, r1, ip
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2601      	movs	r6, #1
 8000968:	0c20      	lsrs	r0, r4, #16
 800096a:	fbb1 f3f7 	udiv	r3, r1, r7
 800096e:	fb07 1113 	mls	r1, r7, r3, r1
 8000972:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000976:	fb0e f003 	mul.w	r0, lr, r3
 800097a:	4288      	cmp	r0, r1
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x12c>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f103 38ff 	add.w	r8, r3, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x12a>
 8000988:	4288      	cmp	r0, r1
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2c0>
 800098e:	4643      	mov	r3, r8
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f7 	udiv	r0, r1, r7
 8000998:	fb07 1110 	mls	r1, r7, r0, r1
 800099c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x156>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x154>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2ca>
 80009b8:	4608      	mov	r0, r1
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009c2:	e79c      	b.n	80008fe <__udivmoddi4+0x9a>
 80009c4:	f1c6 0720 	rsb	r7, r6, #32
 80009c8:	40b3      	lsls	r3, r6
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa20 f407 	lsr.w	r4, r0, r7
 80009d6:	fa01 f306 	lsl.w	r3, r1, r6
 80009da:	431c      	orrs	r4, r3
 80009dc:	40f9      	lsrs	r1, r7
 80009de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e2:	fa00 f306 	lsl.w	r3, r0, r6
 80009e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009ea:	0c20      	lsrs	r0, r4, #16
 80009ec:	fa1f fe8c 	uxth.w	lr, ip
 80009f0:	fb09 1118 	mls	r1, r9, r8, r1
 80009f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f8:	fb08 f00e 	mul.w	r0, r8, lr
 80009fc:	4288      	cmp	r0, r1
 80009fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b8>
 8000a04:	eb1c 0101 	adds.w	r1, ip, r1
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2bc>
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2bc>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4461      	add	r1, ip
 8000a1c:	1a09      	subs	r1, r1, r0
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a24:	fb09 1110 	mls	r1, r9, r0, r1
 8000a28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a30:	458e      	cmp	lr, r1
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1e2>
 8000a34:	eb1c 0101 	adds.w	r1, ip, r1
 8000a38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2b4>
 8000a3e:	458e      	cmp	lr, r1
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2b4>
 8000a42:	3802      	subs	r0, #2
 8000a44:	4461      	add	r1, ip
 8000a46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a4e:	eba1 010e 	sub.w	r1, r1, lr
 8000a52:	42a1      	cmp	r1, r4
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46a6      	mov	lr, r4
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x2a4>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x2a0>
 8000a5c:	b15d      	cbz	r5, 8000a76 <__udivmoddi4+0x212>
 8000a5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a62:	eb61 010e 	sbc.w	r1, r1, lr
 8000a66:	fa01 f707 	lsl.w	r7, r1, r7
 8000a6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a6e:	40f1      	lsrs	r1, r6
 8000a70:	431f      	orrs	r7, r3
 8000a72:	e9c5 7100 	strd	r7, r1, [r5]
 8000a76:	2600      	movs	r6, #0
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	f1c2 0320 	rsb	r3, r2, #32
 8000a82:	40d8      	lsrs	r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa21 f303 	lsr.w	r3, r1, r3
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	4301      	orrs	r1, r0
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000aa0:	0c0b      	lsrs	r3, r1, #16
 8000aa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x260>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b8>
 8000abc:	429e      	cmp	r6, r3
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b8>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	b289      	uxth	r1, r1
 8000ac8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000acc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ad0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x28a>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000aea:	3e02      	subs	r6, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	1ac9      	subs	r1, r1, r3
 8000af0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0x104>
 8000af6:	462e      	mov	r6, r5
 8000af8:	4628      	mov	r0, r5
 8000afa:	e705      	b.n	8000908 <__udivmoddi4+0xa4>
 8000afc:	4606      	mov	r6, r0
 8000afe:	e6e3      	b.n	80008c8 <__udivmoddi4+0x64>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6f8      	b.n	80008f6 <__udivmoddi4+0x92>
 8000b04:	454b      	cmp	r3, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f8>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f8>
 8000b14:	4646      	mov	r6, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x28a>
 8000b18:	4620      	mov	r0, r4
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1e2>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b8>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	4461      	add	r1, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x12c>
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	e709      	b.n	8000942 <__udivmoddi4+0xde>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x156>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <Read_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t Read_ADC()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000b3c:	4816      	ldr	r0, [pc, #88]	; (8000b98 <Read_ADC+0x60>)
 8000b3e:	f000 fabd 	bl	80010bc <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1,100000)==HAL_OK)
 8000b42:	4916      	ldr	r1, [pc, #88]	; (8000b9c <Read_ADC+0x64>)
 8000b44:	4814      	ldr	r0, [pc, #80]	; (8000b98 <Read_ADC+0x60>)
 8000b46:	f000 fbbe 	bl	80012c6 <HAL_ADC_PollForConversion>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d119      	bne.n	8000b84 <Read_ADC+0x4c>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000b50:	4811      	ldr	r0, [pc, #68]	; (8000b98 <Read_ADC+0x60>)
 8000b52:	f000 fc43 	bl	80013dc <HAL_ADC_GetValue>
 8000b56:	4603      	mov	r3, r0
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <Read_ADC+0x68>)
 8000b5c:	801a      	strh	r2, [r3, #0]
		Gram=8.3 * adc_value;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <Read_ADC+0x68>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fdac 	bl	80006c0 <__aeabi_i2d>
 8000b68:	a309      	add	r3, pc, #36	; (adr r3, 8000b90 <Read_ADC+0x58>)
 8000b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6e:	f7ff fb2b 	bl	80001c8 <__aeabi_dmul>
 8000b72:	4602      	mov	r2, r0
 8000b74:	460b      	mov	r3, r1
 8000b76:	4610      	mov	r0, r2
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f7ff fe0b 	bl	8000794 <__aeabi_d2f>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <Read_ADC+0x6c>)
 8000b82:	6013      	str	r3, [r2, #0]
	}
	HAL_ADC_Stop(&hadc1);
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <Read_ADC+0x60>)
 8000b86:	f000 fb6b 	bl	8001260 <HAL_ADC_Stop>

}
 8000b8a:	bf00      	nop
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	9999999a 	.word	0x9999999a
 8000b94:	40209999 	.word	0x40209999
 8000b98:	20000030 	.word	0x20000030
 8000b9c:	000186a0 	.word	0x000186a0
 8000ba0:	20000028 	.word	0x20000028
 8000ba4:	2000002c 	.word	0x2000002c

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 f9d0 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f808 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 f8c2 	bl	8000d3c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bb8:	f000 f86e 	bl	8000c98 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Read_ADC();
 8000bbc:	f7ff ffbc 	bl	8000b38 <Read_ADC>
 8000bc0:	e7fc      	b.n	8000bbc <main+0x14>
	...

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	; 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	2230      	movs	r2, #48	; 0x30
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f005 f9f2 	bl	8005fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <SystemClock_Config+0xcc>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <SystemClock_Config+0xcc>)
 8000bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <SystemClock_Config+0xcc>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <SystemClock_Config+0xd0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <SystemClock_Config+0xd0>)
 8000c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <SystemClock_Config+0xd0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c20:	2301      	movs	r3, #1
 8000c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c34:	2304      	movs	r3, #4
 8000c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c38:	23a8      	movs	r3, #168	; 0xa8
 8000c3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c40:	2307      	movs	r3, #7
 8000c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	f107 0320 	add.w	r3, r7, #32
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 f8e9 	bl	8002e20 <HAL_RCC_OscConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c54:	f000 f89a 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c58:	230f      	movs	r3, #15
 8000c5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2105      	movs	r1, #5
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fb4a 	bl	8003310 <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c82:	f000 f883 	bl	8000d8c <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3750      	adds	r7, #80	; 0x50
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40007000 	.word	0x40007000

08000c98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000cac:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <MX_ADC1_Init+0x9c>)
 8000cae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000cb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000cda:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <MX_ADC1_Init+0xa0>)
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000cfa:	f000 f99b 	bl	8001034 <HAL_ADC_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d04:	f000 f842 	bl	8000d8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000d1a:	f000 fb6d 	bl	80013f8 <HAL_ADC_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d24:	f000 f832 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000030 	.word	0x20000030
 8000d34:	40012000 	.word	0x40012000
 8000d38:	0f000001 	.word	0x0f000001

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <MX_GPIO_Init+0x4c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <MX_GPIO_Init+0x4c>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <MX_GPIO_Init+0x4c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_GPIO_Init+0x4c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <MX_GPIO_Init+0x4c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_GPIO_Init+0x4c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <HAL_ADC_MspInit+0x7c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d127      	bne.n	8000e5a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_ADC_MspInit+0x80>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <HAL_ADC_MspInit+0x80>)
 8000e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_ADC_MspInit+0x80>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_ADC_MspInit+0x80>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_ADC_MspInit+0x80>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_ADC_MspInit+0x80>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e42:	2301      	movs	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e46:	2303      	movs	r3, #3
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_ADC_MspInit+0x84>)
 8000e56:	f000 fdd3 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40012000 	.word	0x40012000
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f89a 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <OTG_FS_IRQHandler+0x10>)
 8000eca:	f000 ff35 	bl	8001d38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000080 	.word	0x20000080

08000ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ffd7 	bl	8000ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f005 f823 	bl	8005f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fe3b 	bl	8000ba8 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f40:	08006004 	.word	0x08006004
  ldr r2, =_sbss
 8000f44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f48:	2000058c 	.word	0x2000058c

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 fd0d 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff ff08 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fd17 	bl	80019e6 <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 fced 	bl	80019ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	20000078 	.word	0x20000078

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000078 	.word	0x20000078

08001034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e033      	b.n	80010b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fec8 	bl	8000de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	2b00      	cmp	r3, #0
 8001070:	d118      	bne.n	80010a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800107a:	f023 0302 	bic.w	r3, r3, #2
 800107e:	f043 0202 	orr.w	r2, r3, #2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fad8 	bl	800163c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f023 0303 	bic.w	r3, r3, #3
 800109a:	f043 0201 	orr.w	r2, r3, #1
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
 80010a2:	e001      	b.n	80010a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Start+0x1a>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e0b2      	b.n	800123c <HAL_ADC_Start+0x180>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d018      	beq.n	800111e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010fc:	4b52      	ldr	r3, [pc, #328]	; (8001248 <HAL_ADC_Start+0x18c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_ADC_Start+0x190>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0c9a      	lsrs	r2, r3, #18
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001110:	e002      	b.n	8001118 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3b01      	subs	r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f9      	bne.n	8001112 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b01      	cmp	r3, #1
 800112a:	d17a      	bne.n	8001222 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114a:	2b00      	cmp	r3, #0
 800114c:	d007      	beq.n	800115e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001156:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800116a:	d106      	bne.n	800117a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f023 0206 	bic.w	r2, r3, #6
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	645a      	str	r2, [r3, #68]	; 0x44
 8001178:	e002      	b.n	8001180 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001188:	4b31      	ldr	r3, [pc, #196]	; (8001250 <HAL_ADC_Start+0x194>)
 800118a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001194:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d12a      	bne.n	80011f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a2b      	ldr	r2, [pc, #172]	; (8001254 <HAL_ADC_Start+0x198>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d015      	beq.n	80011d8 <HAL_ADC_Start+0x11c>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a29      	ldr	r2, [pc, #164]	; (8001258 <HAL_ADC_Start+0x19c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d105      	bne.n	80011c2 <HAL_ADC_Start+0x106>
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_ADC_Start+0x194>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a25      	ldr	r2, [pc, #148]	; (800125c <HAL_ADC_Start+0x1a0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d136      	bne.n	800123a <HAL_ADC_Start+0x17e>
 80011cc:	4b20      	ldr	r3, [pc, #128]	; (8001250 <HAL_ADC_Start+0x194>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d130      	bne.n	800123a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d129      	bne.n	800123a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	e020      	b.n	800123a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a15      	ldr	r2, [pc, #84]	; (8001254 <HAL_ADC_Start+0x198>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d11b      	bne.n	800123a <HAL_ADC_Start+0x17e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d114      	bne.n	800123a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	e00b      	b.n	800123a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f043 0210 	orr.w	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000000 	.word	0x20000000
 800124c:	431bde83 	.word	0x431bde83
 8001250:	40012300 	.word	0x40012300
 8001254:	40012000 	.word	0x40012000
 8001258:	40012100 	.word	0x40012100
 800125c:	40012200 	.word	0x40012200

08001260 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <HAL_ADC_Stop+0x16>
 8001272:	2302      	movs	r3, #2
 8001274:	e021      	b.n	80012ba <HAL_ADC_Stop+0x5a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d109      	bne.n	80012b0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e2:	d113      	bne.n	800130c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012f2:	d10b      	bne.n	800130c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f043 0220 	orr.w	r2, r3, #32
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e063      	b.n	80013d4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800130c:	f7ff fe86 	bl	800101c <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001312:	e021      	b.n	8001358 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131a:	d01d      	beq.n	8001358 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <HAL_ADC_PollForConversion+0x6c>
 8001322:	f7ff fe7b 	bl	800101c <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d212      	bcs.n	8001358 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b02      	cmp	r3, #2
 800133e:	d00b      	beq.n	8001358 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f043 0204 	orr.w	r2, r3, #4
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e03d      	b.n	80013d4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b02      	cmp	r3, #2
 8001364:	d1d6      	bne.n	8001314 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f06f 0212 	mvn.w	r2, #18
 800136e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d123      	bne.n	80013d2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800138e:	2b00      	cmp	r3, #0
 8001390:	d11f      	bne.n	80013d2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d111      	bne.n	80013d2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d105      	bne.n	80013d2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x1c>
 8001410:	2302      	movs	r3, #2
 8001412:	e105      	b.n	8001620 <HAL_ADC_ConfigChannel+0x228>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b09      	cmp	r3, #9
 8001422:	d925      	bls.n	8001470 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68d9      	ldr	r1, [r3, #12]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	3b1e      	subs	r3, #30
 800143a:	2207      	movs	r2, #7
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43da      	mvns	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	400a      	ands	r2, r1
 8001448:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68d9      	ldr	r1, [r3, #12]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	4603      	mov	r3, r0
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4403      	add	r3, r0
 8001462:	3b1e      	subs	r3, #30
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	e022      	b.n	80014b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6919      	ldr	r1, [r3, #16]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	2207      	movs	r2, #7
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	400a      	ands	r2, r1
 8001492:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6919      	ldr	r1, [r3, #16]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4403      	add	r3, r0
 80014ac:	409a      	lsls	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d824      	bhi.n	8001508 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3b05      	subs	r3, #5
 80014d0:	221f      	movs	r2, #31
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	400a      	ands	r2, r1
 80014de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	3b05      	subs	r3, #5
 80014fa:	fa00 f203 	lsl.w	r2, r0, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
 8001506:	e04c      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d824      	bhi.n	800155a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b23      	subs	r3, #35	; 0x23
 8001522:	221f      	movs	r2, #31
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43da      	mvns	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	400a      	ands	r2, r1
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	3b23      	subs	r3, #35	; 0x23
 800154c:	fa00 f203 	lsl.w	r2, r0, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	631a      	str	r2, [r3, #48]	; 0x30
 8001558:	e023      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b41      	subs	r3, #65	; 0x41
 800156c:	221f      	movs	r2, #31
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b41      	subs	r3, #65	; 0x41
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <HAL_ADC_ConfigChannel+0x234>)
 80015a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a21      	ldr	r2, [pc, #132]	; (8001630 <HAL_ADC_ConfigChannel+0x238>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d109      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1cc>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b12      	cmp	r3, #18
 80015b6:	d105      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a19      	ldr	r2, [pc, #100]	; (8001630 <HAL_ADC_ConfigChannel+0x238>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d123      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x21e>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d003      	beq.n	80015de <HAL_ADC_ConfigChannel+0x1e6>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b11      	cmp	r3, #17
 80015dc:	d11b      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b10      	cmp	r3, #16
 80015f0:	d111      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_ADC_ConfigChannel+0x23c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <HAL_ADC_ConfigChannel+0x240>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	0c9a      	lsrs	r2, r3, #18
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001608:	e002      	b.n	8001610 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3b01      	subs	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f9      	bne.n	800160a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40012300 	.word	0x40012300
 8001630:	40012000 	.word	0x40012000
 8001634:	20000000 	.word	0x20000000
 8001638:	431bde83 	.word	0x431bde83

0800163c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001644:	4b79      	ldr	r3, [pc, #484]	; (800182c <ADC_Init+0x1f0>)
 8001646:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	431a      	orrs	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	021a      	lsls	r2, r3, #8
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6899      	ldr	r1, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	4a58      	ldr	r2, [pc, #352]	; (8001830 <ADC_Init+0x1f4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d022      	beq.n	800171a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6899      	ldr	r1, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6899      	ldr	r1, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	e00f      	b.n	800173a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001738:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0202 	bic.w	r2, r2, #2
 8001748:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6899      	ldr	r1, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7e1b      	ldrb	r3, [r3, #24]
 8001754:	005a      	lsls	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01b      	beq.n	80017a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001776:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001786:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6859      	ldr	r1, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	3b01      	subs	r3, #1
 8001794:	035a      	lsls	r2, r3, #13
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	e007      	b.n	80017b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	051a      	lsls	r2, r3, #20
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017f2:	025a      	lsls	r2, r3, #9
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800180a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6899      	ldr	r1, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	029a      	lsls	r2, r3, #10
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	609a      	str	r2, [r3, #8]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40012300 	.word	0x40012300
 8001830:	0f000001 	.word	0x0f000001

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	; (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	; 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f7ff ff8e 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff47 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff5c 	bl	800187c <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff8e 	bl	80018ec <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5d 	bl	8001898 <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffb0 	bl	8001954 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e16b      	b.n	8001cf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f040 815a 	bne.w	8001cee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d005      	beq.n	8001a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d130      	bne.n	8001ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0201 	and.w	r2, r3, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d017      	beq.n	8001af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d123      	bne.n	8001b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80b4 	beq.w	8001cee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b60      	ldr	r3, [pc, #384]	; (8001d0c <HAL_GPIO_Init+0x30c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a5f      	ldr	r2, [pc, #380]	; (8001d0c <HAL_GPIO_Init+0x30c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b5d      	ldr	r3, [pc, #372]	; (8001d0c <HAL_GPIO_Init+0x30c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba2:	4a5b      	ldr	r2, [pc, #364]	; (8001d10 <HAL_GPIO_Init+0x310>)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_GPIO_Init+0x314>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d02b      	beq.n	8001c26 <HAL_GPIO_Init+0x226>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_GPIO_Init+0x318>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d025      	beq.n	8001c22 <HAL_GPIO_Init+0x222>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <HAL_GPIO_Init+0x31c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01f      	beq.n	8001c1e <HAL_GPIO_Init+0x21e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_GPIO_Init+0x320>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d019      	beq.n	8001c1a <HAL_GPIO_Init+0x21a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4e      	ldr	r2, [pc, #312]	; (8001d24 <HAL_GPIO_Init+0x324>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_Init+0x216>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4d      	ldr	r2, [pc, #308]	; (8001d28 <HAL_GPIO_Init+0x328>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00d      	beq.n	8001c12 <HAL_GPIO_Init+0x212>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4c      	ldr	r2, [pc, #304]	; (8001d2c <HAL_GPIO_Init+0x32c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <HAL_GPIO_Init+0x20e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4b      	ldr	r2, [pc, #300]	; (8001d30 <HAL_GPIO_Init+0x330>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_GPIO_Init+0x20a>
 8001c06:	2307      	movs	r3, #7
 8001c08:	e00e      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	e00c      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00a      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c12:	2305      	movs	r3, #5
 8001c14:	e008      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x228>
 8001c26:	2300      	movs	r3, #0
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	f002 0203 	and.w	r2, r2, #3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4093      	lsls	r3, r2
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c38:	4935      	ldr	r1, [pc, #212]	; (8001d10 <HAL_GPIO_Init+0x310>)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c46:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6a:	4a32      	ldr	r2, [pc, #200]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c70:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c94:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9a:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cbe:	4a1d      	ldr	r2, [pc, #116]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	f67f ae90 	bls.w	8001a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40021800 	.word	0x40021800
 8001d30:	40021c00 	.word	0x40021c00
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b08d      	sub	sp, #52	; 0x34
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 fcc5 	bl	80046de <USB_GetMode>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 848a 	bne.w	8002670 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f002 fc29 	bl	80045b8 <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8480 	beq.w	800266e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 fc16 	bl	80045b8 <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d107      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f002 0202 	and.w	r2, r2, #2
 8001da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 fc04 	bl	80045b8 <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d161      	bne.n	8001e7e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0210 	bic.w	r2, r2, #16
 8001dc8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f003 020f 	and.w	r2, r3, #15
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	3304      	adds	r3, #4
 8001de8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	0c5b      	lsrs	r3, r3, #17
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d124      	bne.n	8001e40 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d035      	beq.n	8001e6e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	6a38      	ldr	r0, [r7, #32]
 8001e16:	f002 fa7d 	bl	8004314 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e26:	441a      	add	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	6a1a      	ldr	r2, [r3, #32]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e38:	441a      	add	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	621a      	str	r2, [r3, #32]
 8001e3e:	e016      	b.n	8001e6e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	0c5b      	lsrs	r3, r3, #17
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	d110      	bne.n	8001e6e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e52:	2208      	movs	r2, #8
 8001e54:	4619      	mov	r1, r3
 8001e56:	6a38      	ldr	r0, [r7, #32]
 8001e58:	f002 fa5c 	bl	8004314 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	6a1a      	ldr	r2, [r3, #32]
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e68:	441a      	add	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0210 	orr.w	r2, r2, #16
 8001e7c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fb98 	bl	80045b8 <USB_ReadInterrupts>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e92:	f040 80a7 	bne.w	8001fe4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 fb9d 	bl	80045de <USB_ReadDevAllOutEpInterrupt>
 8001ea4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ea6:	e099      	b.n	8001fdc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 808e 	beq.w	8001fd0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 fbc1 	bl	8004646 <USB_ReadDevOutEPInterrupt>
 8001ec4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00c      	beq.n	8001eea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001edc:	461a      	mov	r2, r3
 8001ede:	2301      	movs	r3, #1
 8001ee0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fe61 	bl	8002bac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00c      	beq.n	8001f0e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f00:	461a      	mov	r2, r3
 8001f02:	2308      	movs	r3, #8
 8001f04:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 ff37 	bl	8002d7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f24:	461a      	mov	r2, r3
 8001f26:	2310      	movs	r3, #16
 8001f28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d030      	beq.n	8001f96 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d109      	bne.n	8001f54 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f52:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	3304      	adds	r3, #4
 8001f68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	78db      	ldrb	r3, [r3, #3]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f003 fe9a 	bl	8005cb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f90:	461a      	mov	r2, r3
 8001f92:	2302      	movs	r3, #2
 8001f94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fac:	461a      	mov	r2, r3
 8001fae:	2320      	movs	r3, #32
 8001fb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f47f af62 	bne.w	8001ea8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f002 fae5 	bl	80045b8 <USB_ReadInterrupts>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ff8:	f040 80db 	bne.w	80021b2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f002 fb06 	bl	8004612 <USB_ReadDevAllInEpInterrupt>
 8002006:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800200c:	e0cd      	b.n	80021aa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80c2 	beq.w	800219e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f002 fb2c 	bl	8004682 <USB_ReadDevInEPInterrupt>
 800202a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d057      	beq.n	80020e6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	2201      	movs	r2, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800204a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43db      	mvns	r3, r3
 8002050:	69f9      	ldr	r1, [r7, #28]
 8002052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002056:	4013      	ands	r3, r2
 8002058:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002066:	461a      	mov	r2, r3
 8002068:	2301      	movs	r3, #1
 800206a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d132      	bne.n	80020da <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	334c      	adds	r3, #76	; 0x4c
 8002084:	6819      	ldr	r1, [r3, #0]
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4403      	add	r3, r0
 8002094:	3348      	adds	r3, #72	; 0x48
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4419      	add	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4403      	add	r3, r0
 80020a8:	334c      	adds	r3, #76	; 0x4c
 80020aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d113      	bne.n	80020da <HAL_PCD_IRQHandler+0x3a2>
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3354      	adds	r3, #84	; 0x54
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d108      	bne.n	80020da <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020d2:	461a      	mov	r2, r3
 80020d4:	2101      	movs	r1, #1
 80020d6:	f002 fb33 	bl	8004740 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f003 fd65 	bl	8005bb0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020fc:	461a      	mov	r2, r3
 80020fe:	2308      	movs	r3, #8
 8002100:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002118:	461a      	mov	r2, r3
 800211a:	2310      	movs	r3, #16
 800211c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002134:	461a      	mov	r2, r3
 8002136:	2340      	movs	r3, #64	; 0x40
 8002138:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d023      	beq.n	800218c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002146:	6a38      	ldr	r0, [r7, #32]
 8002148:	f001 fb7c 	bl	8003844 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800214c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	3338      	adds	r3, #56	; 0x38
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	78db      	ldrb	r3, [r3, #3]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2200      	movs	r2, #0
 800216c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f003 fdb1 	bl	8005cdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002186:	461a      	mov	r2, r3
 8002188:	2302      	movs	r3, #2
 800218a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fc79 	bl	8002a90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	3301      	adds	r3, #1
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f af2e 	bne.w	800200e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 f9fe 	bl	80045b8 <USB_ReadInterrupts>
 80021bc:	4603      	mov	r3, r0
 80021be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021c6:	d122      	bne.n	800220e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d108      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021ee:	2100      	movs	r1, #0
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fe09 	bl	8002e08 <HAL_PCDEx_LPM_Callback>
 80021f6:	e002      	b.n	80021fe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f003 fd4f 	bl	8005c9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800220c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f002 f9d0 	bl	80045b8 <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002222:	d112      	bne.n	800224a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d102      	bne.n	800223a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f003 fd0b 	bl	8005c50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002248:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f002 f9b2 	bl	80045b8 <USB_ReadInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225e:	f040 80b7 	bne.w	80023d0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2110      	movs	r1, #16
 800227c:	4618      	mov	r0, r3
 800227e:	f001 fae1 	bl	8003844 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002286:	e046      	b.n	8002316 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002294:	461a      	mov	r2, r3
 8002296:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800229a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ac:	0151      	lsls	r1, r2, #5
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	440a      	add	r2, r1
 80022b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c8:	461a      	mov	r2, r3
 80022ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e0:	0151      	lsls	r1, r2, #5
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	440a      	add	r2, r1
 80022e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002300:	0151      	lsls	r1, r2, #5
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	440a      	add	r2, r1
 8002306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800230a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800230e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	3301      	adds	r3, #1
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800231c:	429a      	cmp	r2, r3
 800231e:	d3b3      	bcc.n	8002288 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800232e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002332:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	2b00      	cmp	r3, #0
 800233a:	d016      	beq.n	800236a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800234c:	f043 030b 	orr.w	r3, r3, #11
 8002350:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002362:	f043 030b 	orr.w	r3, r3, #11
 8002366:	6453      	str	r3, [r2, #68]	; 0x44
 8002368:	e015      	b.n	8002396 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002378:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800237c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002380:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	69fa      	ldr	r2, [r7, #28]
 800238c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002390:	f043 030b 	orr.w	r3, r3, #11
 8002394:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023a8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023ba:	461a      	mov	r2, r3
 80023bc:	f002 f9c0 	bl	8004740 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 f8ef 	bl	80045b8 <USB_ReadInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e4:	d124      	bne.n	8002430 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 f985 	bl	80046fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 fa59 	bl	80038ac <USB_GetDevSpeed>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681c      	ldr	r4, [r3, #0]
 8002406:	f001 f96f 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 800240a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	4620      	mov	r0, r4
 8002416:	f001 f973 	bl	8003700 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f003 fbf0 	bl	8005c00 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800242e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f002 f8bf 	bl	80045b8 <USB_ReadInterrupts>
 800243a:	4603      	mov	r3, r0
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b08      	cmp	r3, #8
 8002442:	d10a      	bne.n	800245a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f003 fbcd 	bl	8005be4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f002 0208 	and.w	r2, r2, #8
 8002458:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f002 f8aa 	bl	80045b8 <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b80      	cmp	r3, #128	; 0x80
 800246c:	d122      	bne.n	80024b4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800247a:	2301      	movs	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	e014      	b.n	80024aa <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fac5 	bl	8002a2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	3301      	adds	r3, #1
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d3e5      	bcc.n	8002480 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 f87d 	bl	80045b8 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c8:	d13b      	bne.n	8002542 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024ca:	2301      	movs	r3, #1
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
 80024ce:	e02b      	b.n	8002528 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3340      	adds	r3, #64	; 0x40
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d115      	bne.n	8002522 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80024f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	da12      	bge.n	8002522 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	333f      	adds	r3, #63	; 0x3f
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fa86 	bl	8002a2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	3301      	adds	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	429a      	cmp	r2, r3
 8002530:	d3ce      	bcc.n	80024d0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f002 f836 	bl	80045b8 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002556:	d155      	bne.n	8002604 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002558:	2301      	movs	r3, #1
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
 800255c:	e045      	b.n	80025ea <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d12e      	bne.n	80025e4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002586:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002588:	2b00      	cmp	r3, #0
 800258a:	da2b      	bge.n	80025e4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002598:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800259c:	429a      	cmp	r2, r3
 800259e:	d121      	bne.n	80025e4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e0:	6053      	str	r3, [r2, #4]
            break;
 80025e2:	e007      	b.n	80025f4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	3301      	adds	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d3b4      	bcc.n	800255e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f001 ffd5 	bl	80045b8 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002618:	d10a      	bne.n	8002630 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f003 fb70 	bl	8005d00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800262e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f001 ffbf 	bl	80045b8 <USB_ReadInterrupts>
 800263a:	4603      	mov	r3, r0
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b04      	cmp	r3, #4
 8002642:	d115      	bne.n	8002670 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f003 fb60 	bl	8005d1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	430a      	orrs	r2, r1
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	e000      	b.n	8002670 <HAL_PCD_IRQHandler+0x938>
      return;
 800266e:	bf00      	nop
    }
  }
}
 8002670:	3734      	adds	r7, #52	; 0x34
 8002672:	46bd      	mov	sp, r7
 8002674:	bd90      	pop	{r4, r7, pc}

08002676 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_PCD_SetAddress+0x1a>
 800268c:	2302      	movs	r3, #2
 800268e:	e013      	b.n	80026b8 <HAL_PCD_SetAddress+0x42>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 ff5f 	bl	800456c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	70fb      	strb	r3, [r7, #3]
 80026d2:	460b      	mov	r3, r1
 80026d4:	803b      	strh	r3, [r7, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	da0f      	bge.n	8002706 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 020f 	and.w	r2, r3, #15
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	3338      	adds	r3, #56	; 0x38
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	705a      	strb	r2, [r3, #1]
 8002704:	e00f      	b.n	8002726 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	f003 020f 	and.w	r2, r3, #15
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002732:	883a      	ldrh	r2, [r7, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	78ba      	ldrb	r2, [r7, #2]
 800273c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	785b      	ldrb	r3, [r3, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d004      	beq.n	8002750 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002750:	78bb      	ldrb	r3, [r7, #2]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d102      	bne.n	800275c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_PCD_EP_Open+0xaa>
 8002766:	2302      	movs	r3, #2
 8002768:	e00e      	b.n	8002788 <HAL_PCD_EP_Open+0xc8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68f9      	ldr	r1, [r7, #12]
 8002778:	4618      	mov	r0, r3
 800277a:	f001 f8bc 	bl	80038f6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002786:	7afb      	ldrb	r3, [r7, #11]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	460b      	mov	r3, r1
 800279e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a0:	7afb      	ldrb	r3, [r7, #11]
 80027a2:	f003 020f 	and.w	r2, r3, #15
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4413      	add	r3, r2
 80027b6:	3304      	adds	r3, #4
 80027b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2200      	movs	r2, #0
 80027d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027d2:	7afb      	ldrb	r3, [r7, #11]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027ec:	7afb      	ldrb	r3, [r7, #11]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	6979      	ldr	r1, [r7, #20]
 8002804:	f001 fb46 	bl	8003e94 <USB_EP0StartXfer>
 8002808:	e008      	b.n	800281c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	6979      	ldr	r1, [r7, #20]
 8002818:	f001 f8f4 	bl	8003a04 <USB_EPStartXfer>
  }

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	460b      	mov	r3, r1
 8002834:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002836:	7afb      	ldrb	r3, [r7, #11]
 8002838:	f003 020f 	and.w	r2, r3, #15
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	3338      	adds	r3, #56	; 0x38
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4413      	add	r3, r2
 800284a:	3304      	adds	r3, #4
 800284c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2201      	movs	r2, #1
 8002864:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002866:	7afb      	ldrb	r3, [r7, #11]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	b2da      	uxtb	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d102      	bne.n	8002880 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002880:	7afb      	ldrb	r3, [r7, #11]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	6979      	ldr	r1, [r7, #20]
 8002898:	f001 fafc 	bl	8003e94 <USB_EP0StartXfer>
 800289c:	e008      	b.n	80028b0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	6979      	ldr	r1, [r7, #20]
 80028ac:	f001 f8aa 	bl	8003a04 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	f003 020f 	and.w	r2, r3, #15
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d901      	bls.n	80028d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e050      	b.n	800297a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	da0f      	bge.n	8002900 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 020f 	and.w	r2, r3, #15
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	3338      	adds	r3, #56	; 0x38
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	3304      	adds	r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	705a      	strb	r2, [r3, #1]
 80028fe:	e00d      	b.n	800291c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	3304      	adds	r3, #4
 8002914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_PCD_EP_SetStall+0x82>
 8002938:	2302      	movs	r3, #2
 800293a:	e01e      	b.n	800297a <HAL_PCD_EP_SetStall+0xc0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68f9      	ldr	r1, [r7, #12]
 800294a:	4618      	mov	r0, r3
 800294c:	f001 fd3a 	bl	80043c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	b2d9      	uxtb	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800296a:	461a      	mov	r2, r3
 800296c:	f001 fee8 	bl	8004740 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 020f 	and.w	r2, r3, #15
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d901      	bls.n	80029a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e042      	b.n	8002a26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	da0f      	bge.n	80029c8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	f003 020f 	and.w	r2, r3, #15
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3338      	adds	r3, #56	; 0x38
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	3304      	adds	r3, #4
 80029be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	705a      	strb	r2, [r3, #1]
 80029c6:	e00f      	b.n	80029e8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f003 020f 	and.w	r2, r3, #15
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_PCD_EP_ClrStall+0x86>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e00e      	b.n	8002a26 <HAL_PCD_EP_ClrStall+0xa4>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68f9      	ldr	r1, [r7, #12]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 fd42 	bl	80044a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	da0c      	bge.n	8002a5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	f003 020f 	and.w	r2, r3, #15
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	3338      	adds	r3, #56	; 0x38
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	3304      	adds	r3, #4
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e00c      	b.n	8002a76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	3304      	adds	r3, #4
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68f9      	ldr	r1, [r7, #12]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 fb61 	bl	8004144 <USB_EPStopXfer>
 8002a82:	4603      	mov	r3, r0
 8002a84:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a86:	7afb      	ldrb	r3, [r7, #11]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	3338      	adds	r3, #56	; 0x38
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d901      	bls.n	8002ac8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e06c      	b.n	8002ba2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d902      	bls.n	8002ae4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	3303      	adds	r3, #3
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aec:	e02b      	b.n	8002b46 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d902      	bls.n	8002b0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3303      	adds	r3, #3
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6919      	ldr	r1, [r3, #16]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4603      	mov	r3, r0
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f001 fbb5 	bl	8004298 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	441a      	add	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a1a      	ldr	r2, [r3, #32]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	441a      	add	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d809      	bhi.n	8002b70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1a      	ldr	r2, [r3, #32]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d203      	bcs.n	8002b70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1be      	bne.n	8002aee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d811      	bhi.n	8002ba0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	2201      	movs	r2, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	6939      	ldr	r1, [r7, #16]
 8002b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	333c      	adds	r3, #60	; 0x3c
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d17b      	bne.n	8002cda <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d015      	beq.n	8002c18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	4a61      	ldr	r2, [pc, #388]	; (8002d74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	f240 80b9 	bls.w	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80b3 	beq.w	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c14:	6093      	str	r3, [r2, #8]
 8002c16:	e0a7      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2320      	movs	r3, #32
 8002c32:	6093      	str	r3, [r2, #8]
 8002c34:	e098      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f040 8093 	bne.w	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	4a4b      	ldr	r2, [pc, #300]	; (8002d74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d90f      	bls.n	8002c6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c60:	461a      	mov	r2, r3
 8002c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c66:	6093      	str	r3, [r2, #8]
 8002c68:	e07e      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	0159      	lsls	r1, r3, #5
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c96:	1ad2      	subs	r2, r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d114      	bne.n	8002ccc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	f001 fd42 	bl	8004740 <USB_EP0_OutStart>
 8002cbc:	e006      	b.n	8002ccc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	441a      	add	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f002 ff51 	bl	8005b7a <HAL_PCD_DataOutStageCallback>
 8002cd8:	e046      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d124      	bne.n	8002d2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfe:	6093      	str	r3, [r2, #8]
 8002d00:	e032      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	4619      	mov	r1, r3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f002 ff28 	bl	8005b7a <HAL_PCD_DataOutStageCallback>
 8002d2a:	e01d      	b.n	8002d68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d114      	bne.n	8002d5c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d108      	bne.n	8002d5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d54:	461a      	mov	r2, r3
 8002d56:	2100      	movs	r1, #0
 8002d58:	f001 fcf2 	bl	8004740 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f002 ff09 	bl	8005b7a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	4f54300a 	.word	0x4f54300a
 8002d78:	4f54310a 	.word	0x4f54310a

08002d7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	333c      	adds	r3, #60	; 0x3c
 8002d94:	3304      	adds	r3, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4a15      	ldr	r2, [pc, #84]	; (8002e04 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d90e      	bls.n	8002dd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f002 fec0 	bl	8005b56 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d90c      	bls.n	8002df8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d108      	bne.n	8002df8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002df0:	461a      	mov	r2, r3
 8002df2:	2101      	movs	r1, #1
 8002df4:	f001 fca4 	bl	8004740 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	4f54300a 	.word	0x4f54300a

08002e08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e267      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d075      	beq.n	8002f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e3e:	4b88      	ldr	r3, [pc, #544]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d00c      	beq.n	8002e64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4a:	4b85      	ldr	r3, [pc, #532]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d112      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e56:	4b82      	ldr	r3, [pc, #520]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e62:	d10b      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	4b7e      	ldr	r3, [pc, #504]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05b      	beq.n	8002f28 <HAL_RCC_OscConfig+0x108>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d157      	bne.n	8002f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e242      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e84:	d106      	bne.n	8002e94 <HAL_RCC_OscConfig+0x74>
 8002e86:	4b76      	ldr	r3, [pc, #472]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a75      	ldr	r2, [pc, #468]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e01d      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x98>
 8002e9e:	4b70      	ldr	r3, [pc, #448]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6f      	ldr	r2, [pc, #444]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a6c      	ldr	r2, [pc, #432]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002eb8:	4b69      	ldr	r3, [pc, #420]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a68      	ldr	r2, [pc, #416]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b66      	ldr	r3, [pc, #408]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a65      	ldr	r2, [pc, #404]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe f8a0 	bl	800101c <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fe f89c 	bl	800101c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e207      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xc0>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe f88c 	bl	800101c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fe f888 	bl	800101c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1f3      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	4b51      	ldr	r3, [pc, #324]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0xe8>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d063      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f36:	4b4a      	ldr	r3, [pc, #296]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f42:	4b47      	ldr	r3, [pc, #284]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d11c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4e:	4b44      	ldr	r3, [pc, #272]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d116      	bne.n	8002f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	4b41      	ldr	r3, [pc, #260]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_RCC_OscConfig+0x152>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e1c7      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4937      	ldr	r1, [pc, #220]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	e03a      	b.n	8002ffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f90:	4b34      	ldr	r3, [pc, #208]	; (8003064 <HAL_RCC_OscConfig+0x244>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fe f841 	bl	800101c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9e:	f7fe f83d 	bl	800101c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e1a8      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbc:	4b28      	ldr	r3, [pc, #160]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4925      	ldr	r1, [pc, #148]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]
 8002fd0:	e015      	b.n	8002ffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RCC_OscConfig+0x244>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f820 	bl	800101c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe0:	f7fe f81c 	bl	800101c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e187      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d036      	beq.n	8003078 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d016      	beq.n	8003040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_RCC_OscConfig+0x248>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fe f800 	bl	800101c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003020:	f7fd fffc 	bl	800101c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e167      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_OscConfig+0x240>)
 8003034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x200>
 800303e:	e01b      	b.n	8003078 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_OscConfig+0x248>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7fd ffe9 	bl	800101c <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304c:	e00e      	b.n	800306c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304e:	f7fd ffe5 	bl	800101c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d907      	bls.n	800306c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e150      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
 8003060:	40023800 	.word	0x40023800
 8003064:	42470000 	.word	0x42470000
 8003068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ea      	bne.n	800304e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8097 	beq.w	80031b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308a:	4b81      	ldr	r3, [pc, #516]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	4b7d      	ldr	r3, [pc, #500]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a7c      	ldr	r2, [pc, #496]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b7a      	ldr	r3, [pc, #488]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b77      	ldr	r3, [pc, #476]	; (8003294 <HAL_RCC_OscConfig+0x474>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d118      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c2:	4b74      	ldr	r3, [pc, #464]	; (8003294 <HAL_RCC_OscConfig+0x474>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a73      	ldr	r2, [pc, #460]	; (8003294 <HAL_RCC_OscConfig+0x474>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7fd ffa5 	bl	800101c <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7fd ffa1 	bl	800101c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e10c      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_OscConfig+0x474>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x2ea>
 80030fc:	4b64      	ldr	r3, [pc, #400]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4a63      	ldr	r2, [pc, #396]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
 8003108:	e01c      	b.n	8003144 <HAL_RCC_OscConfig+0x324>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b05      	cmp	r3, #5
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x30c>
 8003112:	4b5f      	ldr	r3, [pc, #380]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	4a5e      	ldr	r2, [pc, #376]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003118:	f043 0304 	orr.w	r3, r3, #4
 800311c:	6713      	str	r3, [r2, #112]	; 0x70
 800311e:	4b5c      	ldr	r3, [pc, #368]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a5b      	ldr	r2, [pc, #364]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0x324>
 800312c:	4b58      	ldr	r3, [pc, #352]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	4a57      	ldr	r2, [pc, #348]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	6713      	str	r3, [r2, #112]	; 0x70
 8003138:	4b55      	ldr	r3, [pc, #340]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	4a54      	ldr	r2, [pc, #336]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800313e:	f023 0304 	bic.w	r3, r3, #4
 8003142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d015      	beq.n	8003178 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fd ff66 	bl	800101c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fd ff62 	bl	800101c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0cb      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316a:	4b49      	ldr	r3, [pc, #292]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0ee      	beq.n	8003154 <HAL_RCC_OscConfig+0x334>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003178:	f7fd ff50 	bl	800101c <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317e:	e00a      	b.n	8003196 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7fd ff4c 	bl	800101c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0b5      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003196:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1ee      	bne.n	8003180 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a8:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	4a38      	ldr	r2, [pc, #224]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80a1 	beq.w	8003300 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031be:	4b34      	ldr	r3, [pc, #208]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d05c      	beq.n	8003284 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d141      	bne.n	8003256 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d2:	4b31      	ldr	r3, [pc, #196]	; (8003298 <HAL_RCC_OscConfig+0x478>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fd ff20 	bl	800101c <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e0:	f7fd ff1c 	bl	800101c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e087      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	4b27      	ldr	r3, [pc, #156]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	019b      	lsls	r3, r3, #6
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	3b01      	subs	r3, #1
 8003218:	041b      	lsls	r3, r3, #16
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	491b      	ldr	r1, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x478>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7fd fef5 	bl	800101c <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003236:	f7fd fef1 	bl	800101c <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e05c      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x416>
 8003254:	e054      	b.n	8003300 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_RCC_OscConfig+0x478>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fd fede 	bl	800101c <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fd feda 	bl	800101c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e045      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCC_OscConfig+0x470>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x444>
 8003282:	e03d      	b.n	8003300 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e038      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
 8003290:	40023800 	.word	0x40023800
 8003294:	40007000 	.word	0x40007000
 8003298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x4ec>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d028      	beq.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d121      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d11a      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032cc:	4013      	ands	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d111      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	3b01      	subs	r3, #1
 80032e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0cc      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003324:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d90c      	bls.n	800334c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b65      	ldr	r3, [pc, #404]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b63      	ldr	r3, [pc, #396]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0b8      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003364:	4b59      	ldr	r3, [pc, #356]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a58      	ldr	r2, [pc, #352]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800336e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800337c:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a52      	ldr	r2, [pc, #328]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b50      	ldr	r3, [pc, #320]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	494d      	ldr	r1, [pc, #308]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d044      	beq.n	8003430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b47      	ldr	r3, [pc, #284]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d119      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e06f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033de:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e067      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ee:	4b37      	ldr	r3, [pc, #220]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f023 0203 	bic.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4934      	ldr	r1, [pc, #208]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003400:	f7fd fe0c 	bl	800101c <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	e00a      	b.n	800341e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7fd fe08 	bl	800101c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 020c 	and.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	429a      	cmp	r2, r3
 800342e:	d1eb      	bne.n	8003408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d20c      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e032      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4916      	ldr	r1, [pc, #88]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003482:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	490e      	ldr	r1, [pc, #56]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003496:	f000 f821 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800349a:	4602      	mov	r2, r0
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	490a      	ldr	r1, [pc, #40]	; (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	5ccb      	ldrb	r3, [r1, r3]
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd fd6c 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023c00 	.word	0x40023c00
 80034cc:	40023800 	.word	0x40023800
 80034d0:	08005fe4 	.word	0x08005fe4
 80034d4:	20000000 	.word	0x20000000
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b094      	sub	sp, #80	; 0x50
 80034e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	647b      	str	r3, [r7, #68]	; 0x44
 80034e8:	2300      	movs	r3, #0
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ec:	2300      	movs	r3, #0
 80034ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f4:	4b79      	ldr	r3, [pc, #484]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d00d      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x40>
 8003500:	2b08      	cmp	r3, #8
 8003502:	f200 80e1 	bhi.w	80036c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x34>
 800350a:	2b04      	cmp	r3, #4
 800350c:	d003      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x3a>
 800350e:	e0db      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b73      	ldr	r3, [pc, #460]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003512:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003514:	e0db      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003516:	4b73      	ldr	r3, [pc, #460]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003518:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800351a:	e0d8      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800351c:	4b6f      	ldr	r3, [pc, #444]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003524:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003526:	4b6d      	ldr	r3, [pc, #436]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d063      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b6a      	ldr	r3, [pc, #424]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	2200      	movs	r2, #0
 800353a:	63bb      	str	r3, [r7, #56]	; 0x38
 800353c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
 8003546:	2300      	movs	r3, #0
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
 800354a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800354e:	4622      	mov	r2, r4
 8003550:	462b      	mov	r3, r5
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	0159      	lsls	r1, r3, #5
 800355c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003560:	0150      	lsls	r0, r2, #5
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4621      	mov	r1, r4
 8003568:	1a51      	subs	r1, r2, r1
 800356a:	6139      	str	r1, [r7, #16]
 800356c:	4629      	mov	r1, r5
 800356e:	eb63 0301 	sbc.w	r3, r3, r1
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003580:	4659      	mov	r1, fp
 8003582:	018b      	lsls	r3, r1, #6
 8003584:	4651      	mov	r1, sl
 8003586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800358a:	4651      	mov	r1, sl
 800358c:	018a      	lsls	r2, r1, #6
 800358e:	4651      	mov	r1, sl
 8003590:	ebb2 0801 	subs.w	r8, r2, r1
 8003594:	4659      	mov	r1, fp
 8003596:	eb63 0901 	sbc.w	r9, r3, r1
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ae:	4690      	mov	r8, r2
 80035b0:	4699      	mov	r9, r3
 80035b2:	4623      	mov	r3, r4
 80035b4:	eb18 0303 	adds.w	r3, r8, r3
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	462b      	mov	r3, r5
 80035bc:	eb49 0303 	adc.w	r3, r9, r3
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035ce:	4629      	mov	r1, r5
 80035d0:	024b      	lsls	r3, r1, #9
 80035d2:	4621      	mov	r1, r4
 80035d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035d8:	4621      	mov	r1, r4
 80035da:	024a      	lsls	r2, r1, #9
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e2:	2200      	movs	r2, #0
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ec:	f7fd f922 	bl	8000834 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f8:	e058      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fa:	4b38      	ldr	r3, [pc, #224]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	2200      	movs	r2, #0
 8003602:	4618      	mov	r0, r3
 8003604:	4611      	mov	r1, r2
 8003606:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	2300      	movs	r3, #0
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
 8003610:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003614:	4642      	mov	r2, r8
 8003616:	464b      	mov	r3, r9
 8003618:	f04f 0000 	mov.w	r0, #0
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	0159      	lsls	r1, r3, #5
 8003622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003626:	0150      	lsls	r0, r2, #5
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4641      	mov	r1, r8
 800362e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003632:	4649      	mov	r1, r9
 8003634:	eb63 0b01 	sbc.w	fp, r3, r1
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003644:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003648:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800364c:	ebb2 040a 	subs.w	r4, r2, sl
 8003650:	eb63 050b 	sbc.w	r5, r3, fp
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	00eb      	lsls	r3, r5, #3
 800365e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003662:	00e2      	lsls	r2, r4, #3
 8003664:	4614      	mov	r4, r2
 8003666:	461d      	mov	r5, r3
 8003668:	4643      	mov	r3, r8
 800366a:	18e3      	adds	r3, r4, r3
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	464b      	mov	r3, r9
 8003670:	eb45 0303 	adc.w	r3, r5, r3
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003682:	4629      	mov	r1, r5
 8003684:	028b      	lsls	r3, r1, #10
 8003686:	4621      	mov	r1, r4
 8003688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800368c:	4621      	mov	r1, r4
 800368e:	028a      	lsls	r2, r1, #10
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003696:	2200      	movs	r2, #0
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	61fa      	str	r2, [r7, #28]
 800369c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a0:	f7fd f8c8 	bl	8000834 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4613      	mov	r3, r2
 80036aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	3301      	adds	r3, #1
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036c6:	e002      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3750      	adds	r7, #80	; 0x50
 80036d4:	46bd      	mov	sp, r7
 80036d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	007a1200 	.word	0x007a1200

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000

08003700 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d165      	bne.n	80037e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4a41      	ldr	r2, [pc, #260]	; (800381c <USB_SetTurnaroundTime+0x11c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d906      	bls.n	800372a <USB_SetTurnaroundTime+0x2a>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4a40      	ldr	r2, [pc, #256]	; (8003820 <USB_SetTurnaroundTime+0x120>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d202      	bcs.n	800372a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003724:	230f      	movs	r3, #15
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e062      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <USB_SetTurnaroundTime+0x120>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d306      	bcc.n	8003740 <USB_SetTurnaroundTime+0x40>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4a3b      	ldr	r2, [pc, #236]	; (8003824 <USB_SetTurnaroundTime+0x124>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d202      	bcs.n	8003740 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800373a:	230e      	movs	r3, #14
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	e057      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4a38      	ldr	r2, [pc, #224]	; (8003824 <USB_SetTurnaroundTime+0x124>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d306      	bcc.n	8003756 <USB_SetTurnaroundTime+0x56>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4a37      	ldr	r2, [pc, #220]	; (8003828 <USB_SetTurnaroundTime+0x128>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d202      	bcs.n	8003756 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003750:	230d      	movs	r3, #13
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e04c      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4a33      	ldr	r2, [pc, #204]	; (8003828 <USB_SetTurnaroundTime+0x128>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d306      	bcc.n	800376c <USB_SetTurnaroundTime+0x6c>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4a32      	ldr	r2, [pc, #200]	; (800382c <USB_SetTurnaroundTime+0x12c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d802      	bhi.n	800376c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003766:	230c      	movs	r3, #12
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e041      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4a2f      	ldr	r2, [pc, #188]	; (800382c <USB_SetTurnaroundTime+0x12c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d906      	bls.n	8003782 <USB_SetTurnaroundTime+0x82>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4a2e      	ldr	r2, [pc, #184]	; (8003830 <USB_SetTurnaroundTime+0x130>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d802      	bhi.n	8003782 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800377c:	230b      	movs	r3, #11
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e036      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <USB_SetTurnaroundTime+0x130>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d906      	bls.n	8003798 <USB_SetTurnaroundTime+0x98>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4a29      	ldr	r2, [pc, #164]	; (8003834 <USB_SetTurnaroundTime+0x134>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d802      	bhi.n	8003798 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003792:	230a      	movs	r3, #10
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e02b      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4a26      	ldr	r2, [pc, #152]	; (8003834 <USB_SetTurnaroundTime+0x134>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d906      	bls.n	80037ae <USB_SetTurnaroundTime+0xae>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4a25      	ldr	r2, [pc, #148]	; (8003838 <USB_SetTurnaroundTime+0x138>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d202      	bcs.n	80037ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037a8:	2309      	movs	r3, #9
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	e020      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4a21      	ldr	r2, [pc, #132]	; (8003838 <USB_SetTurnaroundTime+0x138>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d306      	bcc.n	80037c4 <USB_SetTurnaroundTime+0xc4>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4a20      	ldr	r2, [pc, #128]	; (800383c <USB_SetTurnaroundTime+0x13c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d802      	bhi.n	80037c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037be:	2308      	movs	r3, #8
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	e015      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4a1d      	ldr	r2, [pc, #116]	; (800383c <USB_SetTurnaroundTime+0x13c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d906      	bls.n	80037da <USB_SetTurnaroundTime+0xda>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <USB_SetTurnaroundTime+0x140>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d202      	bcs.n	80037da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037d4:	2307      	movs	r3, #7
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e00a      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037da:	2306      	movs	r3, #6
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e007      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037e6:	2309      	movs	r3, #9
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	e001      	b.n	80037f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037ec:	2309      	movs	r3, #9
 80037ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	029b      	lsls	r3, r3, #10
 8003804:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003808:	431a      	orrs	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	00d8acbf 	.word	0x00d8acbf
 8003820:	00e4e1c0 	.word	0x00e4e1c0
 8003824:	00f42400 	.word	0x00f42400
 8003828:	01067380 	.word	0x01067380
 800382c:	011a499f 	.word	0x011a499f
 8003830:	01312cff 	.word	0x01312cff
 8003834:	014ca43f 	.word	0x014ca43f
 8003838:	016e3600 	.word	0x016e3600
 800383c:	01a6ab1f 	.word	0x01a6ab1f
 8003840:	01e84800 	.word	0x01e84800

08003844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3301      	adds	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <USB_FlushTxFifo+0x64>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e01b      	b.n	800389c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	daf2      	bge.n	8003852 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	019b      	lsls	r3, r3, #6
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3301      	adds	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <USB_FlushTxFifo+0x64>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e006      	b.n	800389c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b20      	cmp	r3, #32
 8003898:	d0f0      	beq.n	800387c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	00030d40 	.word	0x00030d40

080038ac <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0306 	and.w	r3, r3, #6
 80038c4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80038cc:	2300      	movs	r3, #0
 80038ce:	75fb      	strb	r3, [r7, #23]
 80038d0:	e00a      	b.n	80038e8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d002      	beq.n	80038de <USB_GetDevSpeed+0x32>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d102      	bne.n	80038e4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80038de:	2302      	movs	r3, #2
 80038e0:	75fb      	strb	r3, [r7, #23]
 80038e2:	e001      	b.n	80038e8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80038e4:	230f      	movs	r3, #15
 80038e6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	785b      	ldrb	r3, [r3, #1]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d13a      	bne.n	8003988 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	b29b      	uxth	r3, r3
 800392a:	68f9      	ldr	r1, [r7, #12]
 800392c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003930:	4313      	orrs	r3, r2
 8003932:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d155      	bne.n	80039f6 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	791b      	ldrb	r3, [r3, #4]
 8003964:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003966:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	059b      	lsls	r3, r3, #22
 800396c:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800396e:	4313      	orrs	r3, r2
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	0151      	lsls	r1, r2, #5
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	440a      	add	r2, r1
 8003978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e036      	b.n	80039f6 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	2101      	movs	r1, #1
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	68f9      	ldr	r1, [r7, #12]
 80039a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d11a      	bne.n	80039f6 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	791b      	ldrb	r3, [r3, #4]
 80039da:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039dc:	430b      	orrs	r3, r1
 80039de:	4313      	orrs	r3, r2
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	0151      	lsls	r1, r2, #5
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	440a      	add	r2, r1
 80039e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f4:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08a      	sub	sp, #40	; 0x28
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	f040 815c 	bne.w	8003cde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d132      	bne.n	8003a94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	0151      	lsls	r1, r2, #5
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	440a      	add	r2, r1
 8003a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	0151      	lsls	r1, r2, #5
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	440a      	add	r2, r1
 8003a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	0151      	lsls	r1, r2, #5
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	440a      	add	r2, r1
 8003a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8c:	0cdb      	lsrs	r3, r3, #19
 8003a8e:	04db      	lsls	r3, r3, #19
 8003a90:	6113      	str	r3, [r2, #16]
 8003a92:	e074      	b.n	8003b7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	0151      	lsls	r1, r2, #5
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aae:	0cdb      	lsrs	r3, r3, #19
 8003ab0:	04db      	lsls	r3, r3, #19
 8003ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	0151      	lsls	r1, r2, #5
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	440a      	add	r2, r1
 8003aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ace:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ad2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ad6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6999      	ldr	r1, [r3, #24]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	440b      	add	r3, r1
 8003af0:	1e59      	subs	r1, r3, #1
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003afa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003afc:	4b9d      	ldr	r3, [pc, #628]	; (8003d74 <USB_EPStartXfer+0x370>)
 8003afe:	400b      	ands	r3, r1
 8003b00:	69b9      	ldr	r1, [r7, #24]
 8003b02:	0148      	lsls	r0, r1, #5
 8003b04:	69f9      	ldr	r1, [r7, #28]
 8003b06:	4401      	add	r1, r0
 8003b08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	0148      	lsls	r0, r1, #5
 8003b2a:	69f9      	ldr	r1, [r7, #28]
 8003b2c:	4401      	add	r1, r0
 8003b2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b32:	4313      	orrs	r3, r2
 8003b34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	791b      	ldrb	r3, [r3, #4]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d11f      	bne.n	8003b7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	0151      	lsls	r1, r2, #5
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	440a      	add	r2, r1
 8003b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003b5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	0151      	lsls	r1, r2, #5
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	440a      	add	r2, r1
 8003b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d14b      	bne.n	8003c1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	791b      	ldrb	r3, [r3, #4]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d128      	bne.n	8003bfa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d110      	bne.n	8003bda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	e00f      	b.n	8003bfa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	0151      	lsls	r1, r2, #5
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	440a      	add	r2, r1
 8003bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	0151      	lsls	r1, r2, #5
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	440a      	add	r2, r1
 8003c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e133      	b.n	8003e84 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	791b      	ldrb	r3, [r3, #4]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d015      	beq.n	8003c70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 811b 	beq.w	8003e84 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	2101      	movs	r1, #1
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	69f9      	ldr	r1, [r7, #28]
 8003c66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	634b      	str	r3, [r1, #52]	; 0x34
 8003c6e:	e109      	b.n	8003e84 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d110      	bne.n	8003ca2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	0151      	lsls	r1, r2, #5
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	440a      	add	r2, r1
 8003c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	e00f      	b.n	8003cc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6919      	ldr	r1, [r3, #16]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	b298      	uxth	r0, r3
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fade 	bl	8004298 <USB_WritePacket>
 8003cdc:	e0d2      	b.n	8003e84 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf8:	0cdb      	lsrs	r3, r3, #19
 8003cfa:	04db      	lsls	r3, r3, #19
 8003cfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d126      	bne.n	8003d78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d40:	69b9      	ldr	r1, [r7, #24]
 8003d42:	0148      	lsls	r0, r1, #5
 8003d44:	69f9      	ldr	r1, [r7, #28]
 8003d46:	4401      	add	r1, r0
 8003d48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	0151      	lsls	r1, r2, #5
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	440a      	add	r2, r1
 8003d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d6e:	6113      	str	r3, [r2, #16]
 8003d70:	e03a      	b.n	8003de8 <USB_EPStartXfer+0x3e4>
 8003d72:	bf00      	nop
 8003d74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	699a      	ldr	r2, [r3, #24]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	1e5a      	subs	r2, r3, #1
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	8afa      	ldrh	r2, [r7, #22]
 8003d94:	fb03 f202 	mul.w	r2, r3, r2
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	8afb      	ldrh	r3, [r7, #22]
 8003dac:	04d9      	lsls	r1, r3, #19
 8003dae:	4b38      	ldr	r3, [pc, #224]	; (8003e90 <USB_EPStartXfer+0x48c>)
 8003db0:	400b      	ands	r3, r1
 8003db2:	69b9      	ldr	r1, [r7, #24]
 8003db4:	0148      	lsls	r0, r1, #5
 8003db6:	69f9      	ldr	r1, [r7, #28]
 8003db8:	4401      	add	r1, r0
 8003dba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd8:	69b9      	ldr	r1, [r7, #24]
 8003dda:	0148      	lsls	r0, r1, #5
 8003ddc:	69f9      	ldr	r1, [r7, #28]
 8003dde:	4401      	add	r1, r0
 8003de0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003de4:	4313      	orrs	r3, r2
 8003de6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10d      	bne.n	8003e0a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6919      	ldr	r1, [r3, #16]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e06:	460a      	mov	r2, r1
 8003e08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	791b      	ldrb	r3, [r3, #4]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d128      	bne.n	8003e64 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d110      	bne.n	8003e44 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	0151      	lsls	r1, r2, #5
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	440a      	add	r2, r1
 8003e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e00f      	b.n	8003e64 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	0151      	lsls	r1, r2, #5
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	440a      	add	r2, r1
 8003e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	1ff80000 	.word	0x1ff80000

08003e94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	f040 80ce 	bne.w	8004052 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d132      	bne.n	8003f24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	0151      	lsls	r1, r2, #5
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	440a      	add	r2, r1
 8003ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003edc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003efc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	0151      	lsls	r1, r2, #5
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	440a      	add	r2, r1
 8003f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f1c:	0cdb      	lsrs	r3, r3, #19
 8003f1e:	04db      	lsls	r3, r3, #19
 8003f20:	6113      	str	r3, [r2, #16]
 8003f22:	e04e      	b.n	8003fc2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3e:	0cdb      	lsrs	r3, r3, #19
 8003f40:	04db      	lsls	r3, r3, #19
 8003f42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	699a      	ldr	r2, [r3, #24]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d903      	bls.n	8003f7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	0151      	lsls	r1, r2, #5
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	440a      	add	r2, r1
 8003f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb2:	6939      	ldr	r1, [r7, #16]
 8003fb4:	0148      	lsls	r0, r1, #5
 8003fb6:	6979      	ldr	r1, [r7, #20]
 8003fb8:	4401      	add	r1, r0
 8003fba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d11e      	bne.n	8004006 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d009      	beq.n	8003fe4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	0151      	lsls	r1, r2, #5
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	440a      	add	r2, r1
 8003ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	e097      	b.n	8004136 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	440a      	add	r2, r1
 800401c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004020:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004024:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8083 	beq.w	8004136 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	2101      	movs	r1, #1
 8004042:	fa01 f303 	lsl.w	r3, r1, r3
 8004046:	6979      	ldr	r1, [r7, #20]
 8004048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800404c:	4313      	orrs	r3, r2
 800404e:	634b      	str	r3, [r1, #52]	; 0x34
 8004050:	e071      	b.n	8004136 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	0151      	lsls	r1, r2, #5
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	440a      	add	r2, r1
 8004068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800406c:	0cdb      	lsrs	r3, r3, #19
 800406e:	04db      	lsls	r3, r3, #19
 8004070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	0151      	lsls	r1, r2, #5
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	440a      	add	r2, r1
 8004088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800408c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004090:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004094:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	0151      	lsls	r1, r2, #5
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	440a      	add	r2, r1
 80040c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e4:	6939      	ldr	r1, [r7, #16]
 80040e6:	0148      	lsls	r0, r1, #5
 80040e8:	6979      	ldr	r1, [r7, #20]
 80040ea:	4401      	add	r1, r0
 80040ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040f0:	4313      	orrs	r3, r2
 80040f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10d      	bne.n	8004116 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	6919      	ldr	r1, [r3, #16]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004112:	460a      	mov	r2, r1
 8004114:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004130:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004134:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d14a      	bne.n	80041f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800417a:	f040 8086 	bne.w	800428a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	7812      	ldrb	r2, [r2, #0]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800419c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	7812      	ldrb	r2, [r2, #0]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3301      	adds	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d902      	bls.n	80041dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
          break;
 80041da:	e056      	b.n	800428a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041f4:	d0e7      	beq.n	80041c6 <USB_EPStopXfer+0x82>
 80041f6:	e048      	b.n	800428a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800420c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004210:	d13b      	bne.n	800428a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	7812      	ldrb	r2, [r2, #0]
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	440a      	add	r2, r1
 800422c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004230:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004234:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004258:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3301      	adds	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f242 7210 	movw	r2, #10000	; 0x2710
 8004266:	4293      	cmp	r3, r2
 8004268:	d902      	bls.n	8004270 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
          break;
 800426e:	e00c      	b.n	800428a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004288:	d0e7      	beq.n	800425a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800428a:	7dfb      	ldrb	r3, [r7, #23]
}
 800428c:	4618      	mov	r0, r3
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	4611      	mov	r1, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	460b      	mov	r3, r1
 80042a8:	71fb      	strb	r3, [r7, #7]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80042b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d123      	bne.n	8004306 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80042be:	88bb      	ldrh	r3, [r7, #4]
 80042c0:	3303      	adds	r3, #3
 80042c2:	089b      	lsrs	r3, r3, #2
 80042c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80042c6:	2300      	movs	r3, #0
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	e018      	b.n	80042fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	031a      	lsls	r2, r3, #12
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	461a      	mov	r2, r3
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	3301      	adds	r3, #1
 80042e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3301      	adds	r3, #1
 80042ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	3301      	adds	r3, #1
 80042f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3301      	adds	r3, #1
 80042f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	3301      	adds	r3, #1
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	429a      	cmp	r2, r3
 8004304:	d3e2      	bcc.n	80042cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3724      	adds	r7, #36	; 0x24
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004314:	b480      	push	{r7}
 8004316:	b08b      	sub	sp, #44	; 0x2c
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	089b      	lsrs	r3, r3, #2
 800432e:	b29b      	uxth	r3, r3
 8004330:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800433a:	2300      	movs	r3, #0
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	e014      	b.n	800436a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	601a      	str	r2, [r3, #0]
    pDest++;
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	3301      	adds	r3, #1
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	3301      	adds	r3, #1
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	3301      	adds	r3, #1
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	3301      	adds	r3, #1
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	3301      	adds	r3, #1
 8004368:	623b      	str	r3, [r7, #32]
 800436a:	6a3a      	ldr	r2, [r7, #32]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	429a      	cmp	r2, r3
 8004370:	d3e6      	bcc.n	8004340 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004372:	8bfb      	ldrh	r3, [r7, #30]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01e      	beq.n	80043b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004382:	461a      	mov	r2, r3
 8004384:	f107 0310 	add.w	r3, r7, #16
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
 8004398:	b2da      	uxtb	r2, r3
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	701a      	strb	r2, [r3, #0]
      i++;
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	3301      	adds	r3, #1
 80043a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	3301      	adds	r3, #1
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80043aa:	8bfb      	ldrh	r3, [r7, #30]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80043b0:	8bfb      	ldrh	r3, [r7, #30]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ea      	bne.n	800438c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	372c      	adds	r7, #44	; 0x2c
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	785b      	ldrb	r3, [r3, #1]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d12c      	bne.n	800443a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	db12      	blt.n	8004418 <USB_EPSetStall+0x54>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00f      	beq.n	8004418 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004412:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004416:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	0151      	lsls	r1, r2, #5
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	440a      	add	r2, r1
 800442e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	e02b      	b.n	8004492 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	db12      	blt.n	8004472 <USB_EPSetStall+0xae>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00f      	beq.n	8004472 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	440a      	add	r2, r1
 8004468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004470:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	440a      	add	r2, r1
 8004488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800448c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004490:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d128      	bne.n	800450e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	791b      	ldrb	r3, [r3, #4]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d003      	beq.n	80044ec <USB_EPClearStall+0x4c>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	791b      	ldrb	r3, [r3, #4]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d138      	bne.n	800455e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	0151      	lsls	r1, r2, #5
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	440a      	add	r2, r1
 8004502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	e027      	b.n	800455e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800452c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	791b      	ldrb	r3, [r3, #4]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d003      	beq.n	800453e <USB_EPClearStall+0x9e>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	791b      	ldrb	r3, [r3, #4]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d10f      	bne.n	800455e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	0151      	lsls	r1, r2, #5
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	440a      	add	r2, r1
 8004554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800458a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800458e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80045a0:	68f9      	ldr	r1, [r7, #12]
 80045a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a6:	4313      	orrs	r3, r2
 80045a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4013      	ands	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80045d0:	68fb      	ldr	r3, [r7, #12]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	4013      	ands	r3, r2
 8004600:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	0c1b      	lsrs	r3, r3, #16
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	4013      	ands	r3, r2
 8004634:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	b29b      	uxth	r3, r3
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4013      	ands	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004674:	68bb      	ldr	r3, [r7, #8]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004682:	b480      	push	{r7}
 8004684:	b087      	sub	sp, #28
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	460b      	mov	r3, r1
 800468c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	fa22 f303 	lsr.w	r3, r2, r3
 80046b2:	01db      	lsls	r3, r3, #7
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4013      	ands	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80046d0:	68bb      	ldr	r3, [r7, #8]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 0301 	and.w	r3, r3, #1
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004714:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004718:	f023 0307 	bic.w	r3, r3, #7
 800471c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800472c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004730:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	460b      	mov	r3, r1
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	333c      	adds	r3, #60	; 0x3c
 8004756:	3304      	adds	r3, #4
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <USB_EP0_OutStart+0xb8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d90a      	bls.n	800477a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004774:	d101      	bne.n	800477a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	e037      	b.n	80047ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	461a      	mov	r2, r3
 8004782:	2300      	movs	r3, #0
 8004784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a8:	f043 0318 	orr.w	r3, r3, #24
 80047ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80047c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80047c2:	7afb      	ldrb	r3, [r7, #11]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10f      	bne.n	80047e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	461a      	mov	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80047e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	4f54300a 	.word	0x4f54300a

080047fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004804:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	4611      	mov	r1, r2
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
 800483c:	4603      	mov	r3, r0
 800483e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	4611      	mov	r1, r2
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	4798      	blx	r3
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004870:	2303      	movs	r3, #3
 8004872:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f001 f8b2 	bl	80059fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d01a      	beq.n	80048f0 <USBD_LL_SetupStage+0x72>
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d822      	bhi.n	8004904 <USBD_LL_SetupStage+0x86>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <USBD_LL_SetupStage+0x4a>
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d00a      	beq.n	80048dc <USBD_LL_SetupStage+0x5e>
 80048c6:	e01d      	b.n	8004904 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fb09 	bl	8004ee8 <USBD_StdDevReq>
 80048d6:	4603      	mov	r3, r0
 80048d8:	73fb      	strb	r3, [r7, #15]
      break;
 80048da:	e020      	b.n	800491e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048e2:	4619      	mov	r1, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fb71 	bl	8004fcc <USBD_StdItfReq>
 80048ea:	4603      	mov	r3, r0
 80048ec:	73fb      	strb	r3, [r7, #15]
      break;
 80048ee:	e016      	b.n	800491e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fbd3 	bl	80050a4 <USBD_StdEPReq>
 80048fe:	4603      	mov	r3, r0
 8004900:	73fb      	strb	r3, [r7, #15]
      break;
 8004902:	e00c      	b.n	800491e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800490a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800490e:	b2db      	uxtb	r3, r3
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f001 fa36 	bl	8005d84 <USBD_LL_StallEP>
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]
      break;
 800491c:	bf00      	nop
  }

  return ret;
 800491e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	460b      	mov	r3, r1
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800493a:	7afb      	ldrb	r3, [r7, #11]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d16e      	bne.n	8004a1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004946:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800494e:	2b03      	cmp	r3, #3
 8004950:	f040 8098 	bne.w	8004a84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	429a      	cmp	r2, r3
 800495e:	d913      	bls.n	8004988 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	1ad2      	subs	r2, r2, r3
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4293      	cmp	r3, r2
 8004978:	bf28      	it	cs
 800497a:	4613      	movcs	r3, r2
 800497c:	461a      	mov	r2, r3
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f001 f8b1 	bl	8005ae8 <USBD_CtlContinueRx>
 8004986:	e07d      	b.n	8004a84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2b02      	cmp	r3, #2
 8004994:	d014      	beq.n	80049c0 <USBD_LL_DataOutStage+0x98>
 8004996:	2b02      	cmp	r3, #2
 8004998:	d81d      	bhi.n	80049d6 <USBD_LL_DataOutStage+0xae>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <USBD_LL_DataOutStage+0x7c>
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d003      	beq.n	80049aa <USBD_LL_DataOutStage+0x82>
 80049a2:	e018      	b.n	80049d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	75bb      	strb	r3, [r7, #22]
            break;
 80049a8:	e018      	b.n	80049dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	4619      	mov	r1, r3
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fa5e 	bl	8004e76 <USBD_CoreFindIF>
 80049ba:	4603      	mov	r3, r0
 80049bc:	75bb      	strb	r3, [r7, #22]
            break;
 80049be:	e00d      	b.n	80049dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	4619      	mov	r1, r3
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fa60 	bl	8004e90 <USBD_CoreFindEP>
 80049d0:	4603      	mov	r3, r0
 80049d2:	75bb      	strb	r3, [r7, #22]
            break;
 80049d4:	e002      	b.n	80049dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	75bb      	strb	r3, [r7, #22]
            break;
 80049da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80049dc:	7dbb      	ldrb	r3, [r7, #22]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d119      	bne.n	8004a16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d113      	bne.n	8004a16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80049ee:	7dba      	ldrb	r2, [r7, #22]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	32ae      	adds	r2, #174	; 0xae
 80049f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80049fe:	7dba      	ldrb	r2, [r7, #22]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004a06:	7dba      	ldrb	r2, [r7, #22]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	32ae      	adds	r2, #174	; 0xae
 8004a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f001 f877 	bl	8005b0a <USBD_CtlSendStatus>
 8004a1c:	e032      	b.n	8004a84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	4619      	mov	r1, r3
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fa31 	bl	8004e90 <USBD_CoreFindEP>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a32:	7dbb      	ldrb	r3, [r7, #22]
 8004a34:	2bff      	cmp	r3, #255	; 0xff
 8004a36:	d025      	beq.n	8004a84 <USBD_LL_DataOutStage+0x15c>
 8004a38:	7dbb      	ldrb	r3, [r7, #22]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d122      	bne.n	8004a84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d117      	bne.n	8004a7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004a4a:	7dba      	ldrb	r2, [r7, #22]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	32ae      	adds	r2, #174	; 0xae
 8004a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00f      	beq.n	8004a7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004a5a:	7dba      	ldrb	r2, [r7, #22]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004a62:	7dba      	ldrb	r2, [r7, #22]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	32ae      	adds	r2, #174	; 0xae
 8004a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	7afa      	ldrb	r2, [r7, #11]
 8004a70:	4611      	mov	r1, r2
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	4798      	blx	r3
 8004a76:	4603      	mov	r3, r0
 8004a78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	e000      	b.n	8004a86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	460b      	mov	r3, r1
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004a9c:	7afb      	ldrb	r3, [r7, #11]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d16f      	bne.n	8004b82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3314      	adds	r3, #20
 8004aa6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d15a      	bne.n	8004b68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d914      	bls.n	8004ae8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	1ad2      	subs	r2, r2, r3
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fff6 	bl	8005ac6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ada:	2300      	movs	r3, #0
 8004adc:	2200      	movs	r2, #0
 8004ade:	2100      	movs	r1, #0
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f001 f9f9 	bl	8005ed8 <USBD_LL_PrepareReceive>
 8004ae6:	e03f      	b.n	8004b68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d11c      	bne.n	8004b2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d316      	bcc.n	8004b2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d20f      	bcs.n	8004b2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2100      	movs	r1, #0
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 ffd7 	bl	8005ac6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b20:	2300      	movs	r3, #0
 8004b22:	2200      	movs	r2, #0
 8004b24:	2100      	movs	r1, #0
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f001 f9d6 	bl	8005ed8 <USBD_LL_PrepareReceive>
 8004b2c:	e01c      	b.n	8004b68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d10f      	bne.n	8004b5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b5a:	2180      	movs	r1, #128	; 0x80
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f001 f911 	bl	8005d84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 ffe4 	bl	8005b30 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d03a      	beq.n	8004be8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff fe42 	bl	80047fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004b80:	e032      	b.n	8004be8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004b82:	7afb      	ldrb	r3, [r7, #11]
 8004b84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f97f 	bl	8004e90 <USBD_CoreFindEP>
 8004b92:	4603      	mov	r3, r0
 8004b94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	2bff      	cmp	r3, #255	; 0xff
 8004b9a:	d025      	beq.n	8004be8 <USBD_LL_DataInStage+0x15a>
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d122      	bne.n	8004be8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d11c      	bne.n	8004be8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004bae:	7dfa      	ldrb	r2, [r7, #23]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	32ae      	adds	r2, #174	; 0xae
 8004bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d014      	beq.n	8004be8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004bbe:	7dfa      	ldrb	r2, [r7, #23]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004bc6:	7dfa      	ldrb	r2, [r7, #23]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	32ae      	adds	r2, #174	; 0xae
 8004bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	7afa      	ldrb	r2, [r7, #11]
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	4798      	blx	r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004bde:	7dbb      	ldrb	r3, [r7, #22]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004be4:	7dbb      	ldrb	r3, [r7, #22]
 8004be6:	e000      	b.n	8004bea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d014      	beq.n	8004c58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00e      	beq.n	8004c58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6852      	ldr	r2, [r2, #4]
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	4611      	mov	r1, r2
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004c54:	2303      	movs	r3, #3
 8004c56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c58:	2340      	movs	r3, #64	; 0x40
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f001 f86a 	bl	8005d38 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2240      	movs	r2, #64	; 0x40
 8004c70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c74:	2340      	movs	r3, #64	; 0x40
 8004c76:	2200      	movs	r2, #0
 8004c78:	2180      	movs	r1, #128	; 0x80
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f001 f85c 	bl	8005d38 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2240      	movs	r2, #64	; 0x40
 8004c8a:	621a      	str	r2, [r3, #32]

  return ret;
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	78fa      	ldrb	r2, [r7, #3]
 8004ca6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d106      	bne.n	8004d04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d110      	bne.n	8004d48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00b      	beq.n	8004d48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	32ae      	adds	r2, #174	; 0xae
 8004d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e01c      	b.n	8004dae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d115      	bne.n	8004dac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	32ae      	adds	r2, #174	; 0xae
 8004d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00b      	beq.n	8004dac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	32ae      	adds	r2, #174	; 0xae
 8004d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	4611      	mov	r1, r2
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	32ae      	adds	r2, #174	; 0xae
 8004dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e01c      	b.n	8004e12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d115      	bne.n	8004e10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	32ae      	adds	r2, #174	; 0xae
 8004dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	32ae      	adds	r2, #174	; 0xae
 8004e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00e      	beq.n	8004e6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6852      	ldr	r2, [r2, #4]
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	4798      	blx	r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004e82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004e9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004ec8:	8a3b      	ldrh	r3, [r7, #16]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	b21a      	sxth	r2, r3
 8004ece:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	b21b      	sxth	r3, r3
 8004ed6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004ed8:	89fb      	ldrh	r3, [r7, #14]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004efe:	2b40      	cmp	r3, #64	; 0x40
 8004f00:	d005      	beq.n	8004f0e <USBD_StdDevReq+0x26>
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d857      	bhi.n	8004fb6 <USBD_StdDevReq+0xce>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00f      	beq.n	8004f2a <USBD_StdDevReq+0x42>
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d153      	bne.n	8004fb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	32ae      	adds	r2, #174	; 0xae
 8004f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
 8004f24:	4603      	mov	r3, r0
 8004f26:	73fb      	strb	r3, [r7, #15]
      break;
 8004f28:	e04a      	b.n	8004fc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	2b09      	cmp	r3, #9
 8004f30:	d83b      	bhi.n	8004faa <USBD_StdDevReq+0xc2>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <USBD_StdDevReq+0x50>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f8d 	.word	0x08004f8d
 8004f3c:	08004fa1 	.word	0x08004fa1
 8004f40:	08004fab 	.word	0x08004fab
 8004f44:	08004f97 	.word	0x08004f97
 8004f48:	08004fab 	.word	0x08004fab
 8004f4c:	08004f6b 	.word	0x08004f6b
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004fab 	.word	0x08004fab
 8004f58:	08004f83 	.word	0x08004f83
 8004f5c:	08004f75 	.word	0x08004f75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fa3c 	bl	80053e0 <USBD_GetDescriptor>
          break;
 8004f68:	e024      	b.n	8004fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004f6a:	6839      	ldr	r1, [r7, #0]
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fba1 	bl	80056b4 <USBD_SetAddress>
          break;
 8004f72:	e01f      	b.n	8004fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004f74:	6839      	ldr	r1, [r7, #0]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fbe0 	bl	800573c <USBD_SetConfig>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]
          break;
 8004f80:	e018      	b.n	8004fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fc83 	bl	8005890 <USBD_GetConfig>
          break;
 8004f8a:	e013      	b.n	8004fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004f8c:	6839      	ldr	r1, [r7, #0]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fcb4 	bl	80058fc <USBD_GetStatus>
          break;
 8004f94:	e00e      	b.n	8004fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004f96:	6839      	ldr	r1, [r7, #0]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fce3 	bl	8005964 <USBD_SetFeature>
          break;
 8004f9e:	e009      	b.n	8004fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004fa0:	6839      	ldr	r1, [r7, #0]
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fd07 	bl	80059b6 <USBD_ClrFeature>
          break;
 8004fa8:	e004      	b.n	8004fb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004faa:	6839      	ldr	r1, [r7, #0]
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fd5e 	bl	8005a6e <USBD_CtlError>
          break;
 8004fb2:	bf00      	nop
      }
      break;
 8004fb4:	e004      	b.n	8004fc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fd58 	bl	8005a6e <USBD_CtlError>
      break;
 8004fbe:	bf00      	nop
  }

  return ret;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop

08004fcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d005      	beq.n	8004ff2 <USBD_StdItfReq+0x26>
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d852      	bhi.n	8005090 <USBD_StdItfReq+0xc4>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <USBD_StdItfReq+0x26>
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d14e      	bne.n	8005090 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d840      	bhi.n	8005082 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	889b      	ldrh	r3, [r3, #4]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	d836      	bhi.n	8005078 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	889b      	ldrh	r3, [r3, #4]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff ff2f 	bl	8004e76 <USBD_CoreFindIF>
 8005018:	4603      	mov	r3, r0
 800501a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800501c:	7bbb      	ldrb	r3, [r7, #14]
 800501e:	2bff      	cmp	r3, #255	; 0xff
 8005020:	d01d      	beq.n	800505e <USBD_StdItfReq+0x92>
 8005022:	7bbb      	ldrb	r3, [r7, #14]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d11a      	bne.n	800505e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005028:	7bba      	ldrb	r2, [r7, #14]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	32ae      	adds	r2, #174	; 0xae
 800502e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00f      	beq.n	8005058 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005038:	7bba      	ldrb	r2, [r7, #14]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005040:	7bba      	ldrb	r2, [r7, #14]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	32ae      	adds	r2, #174	; 0xae
 8005046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	4798      	blx	r3
 8005052:	4603      	mov	r3, r0
 8005054:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005056:	e004      	b.n	8005062 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005058:	2303      	movs	r3, #3
 800505a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800505c:	e001      	b.n	8005062 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800505e:	2303      	movs	r3, #3
 8005060:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	88db      	ldrh	r3, [r3, #6]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d110      	bne.n	800508c <USBD_StdItfReq+0xc0>
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10d      	bne.n	800508c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fd4a 	bl	8005b0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005076:	e009      	b.n	800508c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fcf7 	bl	8005a6e <USBD_CtlError>
          break;
 8005080:	e004      	b.n	800508c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fcf2 	bl	8005a6e <USBD_CtlError>
          break;
 800508a:	e000      	b.n	800508e <USBD_StdItfReq+0xc2>
          break;
 800508c:	bf00      	nop
      }
      break;
 800508e:	e004      	b.n	800509a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fceb 	bl	8005a6e <USBD_CtlError>
      break;
 8005098:	bf00      	nop
  }

  return ret;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	889b      	ldrh	r3, [r3, #4]
 80050b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d007      	beq.n	80050d4 <USBD_StdEPReq+0x30>
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	f200 817f 	bhi.w	80053c8 <USBD_StdEPReq+0x324>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d02a      	beq.n	8005124 <USBD_StdEPReq+0x80>
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	f040 817a 	bne.w	80053c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80050d4:	7bbb      	ldrb	r3, [r7, #14]
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff fed9 	bl	8004e90 <USBD_CoreFindEP>
 80050de:	4603      	mov	r3, r0
 80050e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80050e2:	7b7b      	ldrb	r3, [r7, #13]
 80050e4:	2bff      	cmp	r3, #255	; 0xff
 80050e6:	f000 8174 	beq.w	80053d2 <USBD_StdEPReq+0x32e>
 80050ea:	7b7b      	ldrb	r3, [r7, #13]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 8170 	bne.w	80053d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80050f2:	7b7a      	ldrb	r2, [r7, #13]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80050fa:	7b7a      	ldrb	r2, [r7, #13]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	32ae      	adds	r2, #174	; 0xae
 8005100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8163 	beq.w	80053d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800510c:	7b7a      	ldrb	r2, [r7, #13]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	32ae      	adds	r2, #174	; 0xae
 8005112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
 800511e:	4603      	mov	r3, r0
 8005120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005122:	e156      	b.n	80053d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	2b03      	cmp	r3, #3
 800512a:	d008      	beq.n	800513e <USBD_StdEPReq+0x9a>
 800512c:	2b03      	cmp	r3, #3
 800512e:	f300 8145 	bgt.w	80053bc <USBD_StdEPReq+0x318>
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 809b 	beq.w	800526e <USBD_StdEPReq+0x1ca>
 8005138:	2b01      	cmp	r3, #1
 800513a:	d03c      	beq.n	80051b6 <USBD_StdEPReq+0x112>
 800513c:	e13e      	b.n	80053bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d002      	beq.n	8005150 <USBD_StdEPReq+0xac>
 800514a:	2b03      	cmp	r3, #3
 800514c:	d016      	beq.n	800517c <USBD_StdEPReq+0xd8>
 800514e:	e02c      	b.n	80051aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005150:	7bbb      	ldrb	r3, [r7, #14]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00d      	beq.n	8005172 <USBD_StdEPReq+0xce>
 8005156:	7bbb      	ldrb	r3, [r7, #14]
 8005158:	2b80      	cmp	r3, #128	; 0x80
 800515a:	d00a      	beq.n	8005172 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800515c:	7bbb      	ldrb	r3, [r7, #14]
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fe0f 	bl	8005d84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005166:	2180      	movs	r1, #128	; 0x80
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fe0b 	bl	8005d84 <USBD_LL_StallEP>
 800516e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005170:	e020      	b.n	80051b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005172:	6839      	ldr	r1, [r7, #0]
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fc7a 	bl	8005a6e <USBD_CtlError>
              break;
 800517a:	e01b      	b.n	80051b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	885b      	ldrh	r3, [r3, #2]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10e      	bne.n	80051a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <USBD_StdEPReq+0xfe>
 800518a:	7bbb      	ldrb	r3, [r7, #14]
 800518c:	2b80      	cmp	r3, #128	; 0x80
 800518e:	d008      	beq.n	80051a2 <USBD_StdEPReq+0xfe>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	88db      	ldrh	r3, [r3, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d104      	bne.n	80051a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005198:	7bbb      	ldrb	r3, [r7, #14]
 800519a:	4619      	mov	r1, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fdf1 	bl	8005d84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fcb1 	bl	8005b0a <USBD_CtlSendStatus>

              break;
 80051a8:	e004      	b.n	80051b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fc5e 	bl	8005a6e <USBD_CtlError>
              break;
 80051b2:	bf00      	nop
          }
          break;
 80051b4:	e107      	b.n	80053c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d002      	beq.n	80051c8 <USBD_StdEPReq+0x124>
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d016      	beq.n	80051f4 <USBD_StdEPReq+0x150>
 80051c6:	e04b      	b.n	8005260 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051c8:	7bbb      	ldrb	r3, [r7, #14]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <USBD_StdEPReq+0x146>
 80051ce:	7bbb      	ldrb	r3, [r7, #14]
 80051d0:	2b80      	cmp	r3, #128	; 0x80
 80051d2:	d00a      	beq.n	80051ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80051d4:	7bbb      	ldrb	r3, [r7, #14]
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fdd3 	bl	8005d84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80051de:	2180      	movs	r1, #128	; 0x80
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fdcf 	bl	8005d84 <USBD_LL_StallEP>
 80051e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80051e8:	e040      	b.n	800526c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fc3e 	bl	8005a6e <USBD_CtlError>
              break;
 80051f2:	e03b      	b.n	800526c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	885b      	ldrh	r3, [r3, #2]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d136      	bne.n	800526a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80051fc:	7bbb      	ldrb	r3, [r7, #14]
 80051fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005206:	7bbb      	ldrb	r3, [r7, #14]
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fdd9 	bl	8005dc2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fc7a 	bl	8005b0a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005216:	7bbb      	ldrb	r3, [r7, #14]
 8005218:	4619      	mov	r1, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff fe38 	bl	8004e90 <USBD_CoreFindEP>
 8005220:	4603      	mov	r3, r0
 8005222:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005224:	7b7b      	ldrb	r3, [r7, #13]
 8005226:	2bff      	cmp	r3, #255	; 0xff
 8005228:	d01f      	beq.n	800526a <USBD_StdEPReq+0x1c6>
 800522a:	7b7b      	ldrb	r3, [r7, #13]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d11c      	bne.n	800526a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005230:	7b7a      	ldrb	r2, [r7, #13]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005238:	7b7a      	ldrb	r2, [r7, #13]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	32ae      	adds	r2, #174	; 0xae
 800523e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d010      	beq.n	800526a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005248:	7b7a      	ldrb	r2, [r7, #13]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	32ae      	adds	r2, #174	; 0xae
 800524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800525e:	e004      	b.n	800526a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fc03 	bl	8005a6e <USBD_CtlError>
              break;
 8005268:	e000      	b.n	800526c <USBD_StdEPReq+0x1c8>
              break;
 800526a:	bf00      	nop
          }
          break;
 800526c:	e0ab      	b.n	80053c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d002      	beq.n	8005280 <USBD_StdEPReq+0x1dc>
 800527a:	2b03      	cmp	r3, #3
 800527c:	d032      	beq.n	80052e4 <USBD_StdEPReq+0x240>
 800527e:	e097      	b.n	80053b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005280:	7bbb      	ldrb	r3, [r7, #14]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <USBD_StdEPReq+0x1f2>
 8005286:	7bbb      	ldrb	r3, [r7, #14]
 8005288:	2b80      	cmp	r3, #128	; 0x80
 800528a:	d004      	beq.n	8005296 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fbed 	bl	8005a6e <USBD_CtlError>
                break;
 8005294:	e091      	b.n	80053ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800529a:	2b00      	cmp	r3, #0
 800529c:	da0b      	bge.n	80052b6 <USBD_StdEPReq+0x212>
 800529e:	7bbb      	ldrb	r3, [r7, #14]
 80052a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	3310      	adds	r3, #16
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	3304      	adds	r3, #4
 80052b4:	e00b      	b.n	80052ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80052b6:	7bbb      	ldrb	r3, [r7, #14]
 80052b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	4413      	add	r3, r2
 80052cc:	3304      	adds	r3, #4
 80052ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2202      	movs	r2, #2
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fbd7 	bl	8005a90 <USBD_CtlSendData>
              break;
 80052e2:	e06a      	b.n	80053ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80052e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	da11      	bge.n	8005310 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80052ec:	7bbb      	ldrb	r3, [r7, #14]
 80052ee:	f003 020f 	and.w	r2, r3, #15
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	3324      	adds	r3, #36	; 0x24
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d117      	bne.n	8005336 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005306:	6839      	ldr	r1, [r7, #0]
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fbb0 	bl	8005a6e <USBD_CtlError>
                  break;
 800530e:	e054      	b.n	80053ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005310:	7bbb      	ldrb	r3, [r7, #14]
 8005312:	f003 020f 	and.w	r2, r3, #15
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d104      	bne.n	8005336 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fb9d 	bl	8005a6e <USBD_CtlError>
                  break;
 8005334:	e041      	b.n	80053ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800533a:	2b00      	cmp	r3, #0
 800533c:	da0b      	bge.n	8005356 <USBD_StdEPReq+0x2b2>
 800533e:	7bbb      	ldrb	r3, [r7, #14]
 8005340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	3310      	adds	r3, #16
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4413      	add	r3, r2
 8005352:	3304      	adds	r3, #4
 8005354:	e00b      	b.n	800536e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005356:	7bbb      	ldrb	r3, [r7, #14]
 8005358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	4413      	add	r3, r2
 800536c:	3304      	adds	r3, #4
 800536e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005370:	7bbb      	ldrb	r3, [r7, #14]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <USBD_StdEPReq+0x2d8>
 8005376:	7bbb      	ldrb	r3, [r7, #14]
 8005378:	2b80      	cmp	r3, #128	; 0x80
 800537a:	d103      	bne.n	8005384 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e00e      	b.n	80053a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005384:	7bbb      	ldrb	r3, [r7, #14]
 8005386:	4619      	mov	r1, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fd39 	bl	8005e00 <USBD_LL_IsStallEP>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e002      	b.n	80053a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2202      	movs	r2, #2
 80053a6:	4619      	mov	r1, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fb71 	bl	8005a90 <USBD_CtlSendData>
              break;
 80053ae:	e004      	b.n	80053ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fb5b 	bl	8005a6e <USBD_CtlError>
              break;
 80053b8:	bf00      	nop
          }
          break;
 80053ba:	e004      	b.n	80053c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fb55 	bl	8005a6e <USBD_CtlError>
          break;
 80053c4:	bf00      	nop
      }
      break;
 80053c6:	e005      	b.n	80053d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fb4f 	bl	8005a6e <USBD_CtlError>
      break;
 80053d0:	e000      	b.n	80053d4 <USBD_StdEPReq+0x330>
      break;
 80053d2:	bf00      	nop
  }

  return ret;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	885b      	ldrh	r3, [r3, #2]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	2b06      	cmp	r3, #6
 8005402:	f200 8128 	bhi.w	8005656 <USBD_GetDescriptor+0x276>
 8005406:	a201      	add	r2, pc, #4	; (adr r2, 800540c <USBD_GetDescriptor+0x2c>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005429 	.word	0x08005429
 8005410:	08005441 	.word	0x08005441
 8005414:	08005481 	.word	0x08005481
 8005418:	08005657 	.word	0x08005657
 800541c:	08005657 	.word	0x08005657
 8005420:	080055f7 	.word	0x080055f7
 8005424:	08005623 	.word	0x08005623
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	7c12      	ldrb	r2, [r2, #16]
 8005434:	f107 0108 	add.w	r1, r7, #8
 8005438:	4610      	mov	r0, r2
 800543a:	4798      	blx	r3
 800543c:	60f8      	str	r0, [r7, #12]
      break;
 800543e:	e112      	b.n	8005666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	7c1b      	ldrb	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10d      	bne.n	8005464 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	f107 0208 	add.w	r2, r7, #8
 8005454:	4610      	mov	r0, r2
 8005456:	4798      	blx	r3
 8005458:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	2202      	movs	r2, #2
 8005460:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005462:	e100      	b.n	8005666 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	f107 0208 	add.w	r2, r7, #8
 8005470:	4610      	mov	r0, r2
 8005472:	4798      	blx	r3
 8005474:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3301      	adds	r3, #1
 800547a:	2202      	movs	r2, #2
 800547c:	701a      	strb	r2, [r3, #0]
      break;
 800547e:	e0f2      	b.n	8005666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	885b      	ldrh	r3, [r3, #2]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b05      	cmp	r3, #5
 8005488:	f200 80ac 	bhi.w	80055e4 <USBD_GetDescriptor+0x204>
 800548c:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <USBD_GetDescriptor+0xb4>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054ad 	.word	0x080054ad
 8005498:	080054e1 	.word	0x080054e1
 800549c:	08005515 	.word	0x08005515
 80054a0:	08005549 	.word	0x08005549
 80054a4:	0800557d 	.word	0x0800557d
 80054a8:	080055b1 	.word	0x080055b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00b      	beq.n	80054d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	7c12      	ldrb	r2, [r2, #16]
 80054c4:	f107 0108 	add.w	r1, r7, #8
 80054c8:	4610      	mov	r0, r2
 80054ca:	4798      	blx	r3
 80054cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054ce:	e091      	b.n	80055f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 facb 	bl	8005a6e <USBD_CtlError>
            err++;
 80054d8:	7afb      	ldrb	r3, [r7, #11]
 80054da:	3301      	adds	r3, #1
 80054dc:	72fb      	strb	r3, [r7, #11]
          break;
 80054de:	e089      	b.n	80055f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00b      	beq.n	8005504 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	7c12      	ldrb	r2, [r2, #16]
 80054f8:	f107 0108 	add.w	r1, r7, #8
 80054fc:	4610      	mov	r0, r2
 80054fe:	4798      	blx	r3
 8005500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005502:	e077      	b.n	80055f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fab1 	bl	8005a6e <USBD_CtlError>
            err++;
 800550c:	7afb      	ldrb	r3, [r7, #11]
 800550e:	3301      	adds	r3, #1
 8005510:	72fb      	strb	r3, [r7, #11]
          break;
 8005512:	e06f      	b.n	80055f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	7c12      	ldrb	r2, [r2, #16]
 800552c:	f107 0108 	add.w	r1, r7, #8
 8005530:	4610      	mov	r0, r2
 8005532:	4798      	blx	r3
 8005534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005536:	e05d      	b.n	80055f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fa97 	bl	8005a6e <USBD_CtlError>
            err++;
 8005540:	7afb      	ldrb	r3, [r7, #11]
 8005542:	3301      	adds	r3, #1
 8005544:	72fb      	strb	r3, [r7, #11]
          break;
 8005546:	e055      	b.n	80055f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	7c12      	ldrb	r2, [r2, #16]
 8005560:	f107 0108 	add.w	r1, r7, #8
 8005564:	4610      	mov	r0, r2
 8005566:	4798      	blx	r3
 8005568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800556a:	e043      	b.n	80055f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fa7d 	bl	8005a6e <USBD_CtlError>
            err++;
 8005574:	7afb      	ldrb	r3, [r7, #11]
 8005576:	3301      	adds	r3, #1
 8005578:	72fb      	strb	r3, [r7, #11]
          break;
 800557a:	e03b      	b.n	80055f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	7c12      	ldrb	r2, [r2, #16]
 8005594:	f107 0108 	add.w	r1, r7, #8
 8005598:	4610      	mov	r0, r2
 800559a:	4798      	blx	r3
 800559c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800559e:	e029      	b.n	80055f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fa63 	bl	8005a6e <USBD_CtlError>
            err++;
 80055a8:	7afb      	ldrb	r3, [r7, #11]
 80055aa:	3301      	adds	r3, #1
 80055ac:	72fb      	strb	r3, [r7, #11]
          break;
 80055ae:	e021      	b.n	80055f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	7c12      	ldrb	r2, [r2, #16]
 80055c8:	f107 0108 	add.w	r1, r7, #8
 80055cc:	4610      	mov	r0, r2
 80055ce:	4798      	blx	r3
 80055d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055d2:	e00f      	b.n	80055f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa49 	bl	8005a6e <USBD_CtlError>
            err++;
 80055dc:	7afb      	ldrb	r3, [r7, #11]
 80055de:	3301      	adds	r3, #1
 80055e0:	72fb      	strb	r3, [r7, #11]
          break;
 80055e2:	e007      	b.n	80055f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa41 	bl	8005a6e <USBD_CtlError>
          err++;
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	3301      	adds	r3, #1
 80055f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80055f2:	bf00      	nop
      }
      break;
 80055f4:	e037      	b.n	8005666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7c1b      	ldrb	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	f107 0208 	add.w	r2, r7, #8
 800560a:	4610      	mov	r0, r2
 800560c:	4798      	blx	r3
 800560e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005610:	e029      	b.n	8005666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fa2a 	bl	8005a6e <USBD_CtlError>
        err++;
 800561a:	7afb      	ldrb	r3, [r7, #11]
 800561c:	3301      	adds	r3, #1
 800561e:	72fb      	strb	r3, [r7, #11]
      break;
 8005620:	e021      	b.n	8005666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	7c1b      	ldrb	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10d      	bne.n	8005646 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005632:	f107 0208 	add.w	r2, r7, #8
 8005636:	4610      	mov	r0, r2
 8005638:	4798      	blx	r3
 800563a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	2207      	movs	r2, #7
 8005642:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005644:	e00f      	b.n	8005666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fa10 	bl	8005a6e <USBD_CtlError>
        err++;
 800564e:	7afb      	ldrb	r3, [r7, #11]
 8005650:	3301      	adds	r3, #1
 8005652:	72fb      	strb	r3, [r7, #11]
      break;
 8005654:	e007      	b.n	8005666 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fa08 	bl	8005a6e <USBD_CtlError>
      err++;
 800565e:	7afb      	ldrb	r3, [r7, #11]
 8005660:	3301      	adds	r3, #1
 8005662:	72fb      	strb	r3, [r7, #11]
      break;
 8005664:	bf00      	nop
  }

  if (err != 0U)
 8005666:	7afb      	ldrb	r3, [r7, #11]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d11e      	bne.n	80056aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	88db      	ldrh	r3, [r3, #6]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d016      	beq.n	80056a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005674:	893b      	ldrh	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00e      	beq.n	8005698 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	88da      	ldrh	r2, [r3, #6]
 800567e:	893b      	ldrh	r3, [r7, #8]
 8005680:	4293      	cmp	r3, r2
 8005682:	bf28      	it	cs
 8005684:	4613      	movcs	r3, r2
 8005686:	b29b      	uxth	r3, r3
 8005688:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800568a:	893b      	ldrh	r3, [r7, #8]
 800568c:	461a      	mov	r2, r3
 800568e:	68f9      	ldr	r1, [r7, #12]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f9fd 	bl	8005a90 <USBD_CtlSendData>
 8005696:	e009      	b.n	80056ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f9e7 	bl	8005a6e <USBD_CtlError>
 80056a0:	e004      	b.n	80056ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fa31 	bl	8005b0a <USBD_CtlSendStatus>
 80056a8:	e000      	b.n	80056ac <USBD_GetDescriptor+0x2cc>
    return;
 80056aa:	bf00      	nop
  }
}
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop

080056b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	889b      	ldrh	r3, [r3, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d131      	bne.n	800572a <USBD_SetAddress+0x76>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	88db      	ldrh	r3, [r3, #6]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d12d      	bne.n	800572a <USBD_SetAddress+0x76>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	885b      	ldrh	r3, [r3, #2]
 80056d2:	2b7f      	cmp	r3, #127	; 0x7f
 80056d4:	d829      	bhi.n	800572a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	885b      	ldrh	r3, [r3, #2]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d104      	bne.n	80056f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80056ee:	6839      	ldr	r1, [r7, #0]
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f9bc 	bl	8005a6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f6:	e01d      	b.n	8005734 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	7bfa      	ldrb	r2, [r7, #15]
 80056fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fba7 	bl	8005e58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f9fd 	bl	8005b0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571e:	e009      	b.n	8005734 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005728:	e004      	b.n	8005734 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f99e 	bl	8005a6e <USBD_CtlError>
  }
}
 8005732:	bf00      	nop
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	885b      	ldrh	r3, [r3, #2]
 800574e:	b2da      	uxtb	r2, r3
 8005750:	4b4e      	ldr	r3, [pc, #312]	; (800588c <USBD_SetConfig+0x150>)
 8005752:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005754:	4b4d      	ldr	r3, [pc, #308]	; (800588c <USBD_SetConfig+0x150>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d905      	bls.n	8005768 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f985 	bl	8005a6e <USBD_CtlError>
    return USBD_FAIL;
 8005764:	2303      	movs	r3, #3
 8005766:	e08c      	b.n	8005882 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d002      	beq.n	800577a <USBD_SetConfig+0x3e>
 8005774:	2b03      	cmp	r3, #3
 8005776:	d029      	beq.n	80057cc <USBD_SetConfig+0x90>
 8005778:	e075      	b.n	8005866 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800577a:	4b44      	ldr	r3, [pc, #272]	; (800588c <USBD_SetConfig+0x150>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d020      	beq.n	80057c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005782:	4b42      	ldr	r3, [pc, #264]	; (800588c <USBD_SetConfig+0x150>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800578c:	4b3f      	ldr	r3, [pc, #252]	; (800588c <USBD_SetConfig+0x150>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	4619      	mov	r1, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff f83d 	bl	8004812 <USBD_SetClassConfig>
 8005798:	4603      	mov	r3, r0
 800579a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d008      	beq.n	80057b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80057a2:	6839      	ldr	r1, [r7, #0]
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f962 	bl	8005a6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80057b2:	e065      	b.n	8005880 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f9a8 	bl	8005b0a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2203      	movs	r2, #3
 80057be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80057c2:	e05d      	b.n	8005880 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f9a0 	bl	8005b0a <USBD_CtlSendStatus>
      break;
 80057ca:	e059      	b.n	8005880 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80057cc:	4b2f      	ldr	r3, [pc, #188]	; (800588c <USBD_SetConfig+0x150>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d112      	bne.n	80057fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80057dc:	4b2b      	ldr	r3, [pc, #172]	; (800588c <USBD_SetConfig+0x150>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80057e6:	4b29      	ldr	r3, [pc, #164]	; (800588c <USBD_SetConfig+0x150>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff f82c 	bl	800484a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f989 	bl	8005b0a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80057f8:	e042      	b.n	8005880 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80057fa:	4b24      	ldr	r3, [pc, #144]	; (800588c <USBD_SetConfig+0x150>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d02a      	beq.n	800585e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff f81a 	bl	800484a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005816:	4b1d      	ldr	r3, [pc, #116]	; (800588c <USBD_SetConfig+0x150>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005820:	4b1a      	ldr	r3, [pc, #104]	; (800588c <USBD_SetConfig+0x150>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fe fff3 	bl	8004812 <USBD_SetClassConfig>
 800582c:	4603      	mov	r3, r0
 800582e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00f      	beq.n	8005856 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f918 	bl	8005a6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fe ffff 	bl	800484a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005854:	e014      	b.n	8005880 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f957 	bl	8005b0a <USBD_CtlSendStatus>
      break;
 800585c:	e010      	b.n	8005880 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f953 	bl	8005b0a <USBD_CtlSendStatus>
      break;
 8005864:	e00c      	b.n	8005880 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f900 	bl	8005a6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <USBD_SetConfig+0x150>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7fe ffe8 	bl	800484a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800587a:	2303      	movs	r3, #3
 800587c:	73fb      	strb	r3, [r7, #15]
      break;
 800587e:	bf00      	nop
  }

  return ret;
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	2000007c 	.word	0x2000007c

08005890 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	88db      	ldrh	r3, [r3, #6]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d004      	beq.n	80058ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f8e2 	bl	8005a6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80058aa:	e023      	b.n	80058f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	dc02      	bgt.n	80058be <USBD_GetConfig+0x2e>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dc03      	bgt.n	80058c4 <USBD_GetConfig+0x34>
 80058bc:	e015      	b.n	80058ea <USBD_GetConfig+0x5a>
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d00b      	beq.n	80058da <USBD_GetConfig+0x4a>
 80058c2:	e012      	b.n	80058ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3308      	adds	r3, #8
 80058ce:	2201      	movs	r2, #1
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f8dc 	bl	8005a90 <USBD_CtlSendData>
        break;
 80058d8:	e00c      	b.n	80058f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3304      	adds	r3, #4
 80058de:	2201      	movs	r2, #1
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f8d4 	bl	8005a90 <USBD_CtlSendData>
        break;
 80058e8:	e004      	b.n	80058f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f8be 	bl	8005a6e <USBD_CtlError>
        break;
 80058f2:	bf00      	nop
}
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800590c:	b2db      	uxtb	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	2b02      	cmp	r3, #2
 8005912:	d81e      	bhi.n	8005952 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	88db      	ldrh	r3, [r3, #6]
 8005918:	2b02      	cmp	r3, #2
 800591a:	d004      	beq.n	8005926 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f8a5 	bl	8005a6e <USBD_CtlError>
        break;
 8005924:	e01a      	b.n	800595c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005932:	2b00      	cmp	r3, #0
 8005934:	d005      	beq.n	8005942 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f043 0202 	orr.w	r2, r3, #2
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	330c      	adds	r3, #12
 8005946:	2202      	movs	r2, #2
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f8a0 	bl	8005a90 <USBD_CtlSendData>
      break;
 8005950:	e004      	b.n	800595c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f88a 	bl	8005a6e <USBD_CtlError>
      break;
 800595a:	bf00      	nop
  }
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	885b      	ldrh	r3, [r3, #2]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d107      	bne.n	8005986 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8c3 	bl	8005b0a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005984:	e013      	b.n	80059ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	885b      	ldrh	r3, [r3, #2]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d10b      	bne.n	80059a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	889b      	ldrh	r3, [r3, #4]
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	b29b      	uxth	r3, r3
 8005996:	b2da      	uxtb	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f8b3 	bl	8005b0a <USBD_CtlSendStatus>
}
 80059a4:	e003      	b.n	80059ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f860 	bl	8005a6e <USBD_CtlError>
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b082      	sub	sp, #8
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d80b      	bhi.n	80059e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	885b      	ldrh	r3, [r3, #2]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10c      	bne.n	80059f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f893 	bl	8005b0a <USBD_CtlSendStatus>
      }
      break;
 80059e4:	e004      	b.n	80059f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f840 	bl	8005a6e <USBD_CtlError>
      break;
 80059ee:	e000      	b.n	80059f2 <USBD_ClrFeature+0x3c>
      break;
 80059f0:	bf00      	nop
  }
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	781a      	ldrb	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3301      	adds	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	781a      	ldrb	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fa40 	bl	8004eaa <SWAPBYTE>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3301      	adds	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7ff fa33 	bl	8004eaa <SWAPBYTE>
 8005a44:	4603      	mov	r3, r0
 8005a46:	461a      	mov	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3301      	adds	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7ff fa26 	bl	8004eaa <SWAPBYTE>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	461a      	mov	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	80da      	strh	r2, [r3, #6]
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a78:	2180      	movs	r1, #128	; 0x80
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f982 	bl	8005d84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005a80:	2100      	movs	r1, #0
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f97e 	bl	8005d84 <USBD_LL_StallEP>
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f9ed 	bl	8005e96 <USBD_LL_Transmit>

  return USBD_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f9dc 	bl	8005e96 <USBD_LL_Transmit>

  return USBD_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	2100      	movs	r1, #0
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f9ec 	bl	8005ed8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2204      	movs	r2, #4
 8005b16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2100      	movs	r1, #0
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f9b8 	bl	8005e96 <USBD_LL_Transmit>

  return USBD_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2205      	movs	r2, #5
 8005b3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b40:	2300      	movs	r3, #0
 8005b42:	2200      	movs	r2, #0
 8005b44:	2100      	movs	r1, #0
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f9c6 	bl	8005ed8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f7fe fe86 	bl	800487e <USBD_LL_SetupStage>
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8005b8c:	78fa      	ldrb	r2, [r7, #3]
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	f7fe fec0 	bl	8004928 <USBD_LL_DataOutStage>
}
 8005ba8:	bf00      	nop
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8005bc2:	78fa      	ldrb	r2, [r7, #3]
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	334c      	adds	r3, #76	; 0x4c
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f7fe ff59 	bl	8004a8e <USBD_LL_DataInStage>
}
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff f88d 	bl	8004d12 <USBD_LL_SOF>
}
 8005bf8:	bf00      	nop
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005c14:	2300      	movs	r3, #0
 8005c16:	73fb      	strb	r3, [r7, #15]
 8005c18:	e008      	b.n	8005c2c <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d102      	bne.n	8005c28 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005c22:	2301      	movs	r3, #1
 8005c24:	73fb      	strb	r3, [r7, #15]
 8005c26:	e001      	b.n	8005c2c <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005c28:	f7fb f8b0 	bl	8000d8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8005c32:	7bfa      	ldrb	r2, [r7, #15]
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff f82d 	bl	8004c96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe ffd5 	bl	8004bf2 <USBD_LL_Reset>
}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff f829 	bl	8004cb6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c76:	f043 0301 	orr.w	r3, r3, #1
 8005c7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005c84:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <HAL_PCD_SuspendCallback+0x48>)
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	4a03      	ldr	r2, [pc, #12]	; (8005c98 <HAL_PCD_SuspendCallback+0x48>)
 8005c8a:	f043 0306 	orr.w	r3, r3, #6
 8005c8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	e000ed00 	.word	0xe000ed00

08005c9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff f819 	bl	8004ce2 <USBD_LL_Resume>
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8005cca:	78fa      	ldrb	r2, [r7, #3]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff f871 	bl	8004db6 <USBD_LL_IsoOUTIncomplete>
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8005cee:	78fa      	ldrb	r2, [r7, #3]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff f82d 	bl	8004d52 <USBD_LL_IsoINIncomplete>
}
 8005cf8:	bf00      	nop
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff f883 	bl	8004e1a <USBD_LL_DevConnected>
}
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff f880 	bl	8004e30 <USBD_LL_DevDisconnected>
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	4608      	mov	r0, r1
 8005d42:	4611      	mov	r1, r2
 8005d44:	461a      	mov	r2, r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	70fb      	strb	r3, [r7, #3]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70bb      	strb	r3, [r7, #2]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8005d60:	78bb      	ldrb	r3, [r7, #2]
 8005d62:	883a      	ldrh	r2, [r7, #0]
 8005d64:	78f9      	ldrb	r1, [r7, #3]
 8005d66:	f7fc fcab 	bl	80026c0 <HAL_PCD_EP_Open>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 f8d3 	bl	8005f1c <USBD_Get_USB_Status>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	4611      	mov	r1, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fc fd89 	bl	80028ba <HAL_PCD_EP_SetStall>
 8005da8:	4603      	mov	r3, r0
 8005daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f8b4 	bl	8005f1c <USBD_Get_USB_Status>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005ddc:	78fa      	ldrb	r2, [r7, #3]
 8005dde:	4611      	mov	r1, r2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fc fdce 	bl	8002982 <HAL_PCD_EP_ClrStall>
 8005de6:	4603      	mov	r3, r0
 8005de8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 f895 	bl	8005f1c <USBD_Get_USB_Status>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005e12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da0b      	bge.n	8005e34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	4613      	mov	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	333e      	adds	r3, #62	; 0x3e
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	e00b      	b.n	8005e4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e3a:	68f9      	ldr	r1, [r7, #12]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8005e4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005e72:	78fa      	ldrb	r2, [r7, #3]
 8005e74:	4611      	mov	r1, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fc fbfd 	bl	8002676 <HAL_PCD_SetAddress>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 f84a 	bl	8005f1c <USBD_Get_USB_Status>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b086      	sub	sp, #24
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8005eb4:	7af9      	ldrb	r1, [r7, #11]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	f7fc fcb4 	bl	8002826 <HAL_PCD_EP_Transmit>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 f829 	bl	8005f1c <USBD_Get_USB_Status>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005ece:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	607a      	str	r2, [r7, #4]
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8005ef6:	7af9      	ldrb	r1, [r7, #11]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	f7fc fc48 	bl	8002790 <HAL_PCD_EP_Receive>
 8005f00:	4603      	mov	r3, r0
 8005f02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f808 	bl	8005f1c <USBD_Get_USB_Status>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005f10:	7dbb      	ldrb	r3, [r7, #22]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d817      	bhi.n	8005f60 <USBD_Get_USB_Status+0x44>
 8005f30:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <USBD_Get_USB_Status+0x1c>)
 8005f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f36:	bf00      	nop
 8005f38:	08005f49 	.word	0x08005f49
 8005f3c:	08005f4f 	.word	0x08005f4f
 8005f40:	08005f55 	.word	0x08005f55
 8005f44:	08005f5b 	.word	0x08005f5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8005f4c:	e00b      	b.n	8005f66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	73fb      	strb	r3, [r7, #15]
    break;
 8005f52:	e008      	b.n	8005f66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005f54:	2301      	movs	r3, #1
 8005f56:	73fb      	strb	r3, [r7, #15]
    break;
 8005f58:	e005      	b.n	8005f66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	73fb      	strb	r3, [r7, #15]
    break;
 8005f5e:	e002      	b.n	8005f66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005f60:	2303      	movs	r3, #3
 8005f62:	73fb      	strb	r3, [r7, #15]
    break;
 8005f64:	bf00      	nop
  }
  return usb_status;
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <__libc_init_array>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	4d0d      	ldr	r5, [pc, #52]	; (8005fac <__libc_init_array+0x38>)
 8005f78:	4c0d      	ldr	r4, [pc, #52]	; (8005fb0 <__libc_init_array+0x3c>)
 8005f7a:	1b64      	subs	r4, r4, r5
 8005f7c:	10a4      	asrs	r4, r4, #2
 8005f7e:	2600      	movs	r6, #0
 8005f80:	42a6      	cmp	r6, r4
 8005f82:	d109      	bne.n	8005f98 <__libc_init_array+0x24>
 8005f84:	4d0b      	ldr	r5, [pc, #44]	; (8005fb4 <__libc_init_array+0x40>)
 8005f86:	4c0c      	ldr	r4, [pc, #48]	; (8005fb8 <__libc_init_array+0x44>)
 8005f88:	f000 f820 	bl	8005fcc <_init>
 8005f8c:	1b64      	subs	r4, r4, r5
 8005f8e:	10a4      	asrs	r4, r4, #2
 8005f90:	2600      	movs	r6, #0
 8005f92:	42a6      	cmp	r6, r4
 8005f94:	d105      	bne.n	8005fa2 <__libc_init_array+0x2e>
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9c:	4798      	blx	r3
 8005f9e:	3601      	adds	r6, #1
 8005fa0:	e7ee      	b.n	8005f80 <__libc_init_array+0xc>
 8005fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa6:	4798      	blx	r3
 8005fa8:	3601      	adds	r6, #1
 8005faa:	e7f2      	b.n	8005f92 <__libc_init_array+0x1e>
 8005fac:	08005ffc 	.word	0x08005ffc
 8005fb0:	08005ffc 	.word	0x08005ffc
 8005fb4:	08005ffc 	.word	0x08005ffc
 8005fb8:	08006000 	.word	0x08006000

08005fbc <memset>:
 8005fbc:	4402      	add	r2, r0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d100      	bne.n	8005fc6 <memset+0xa>
 8005fc4:	4770      	bx	lr
 8005fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fca:	e7f9      	b.n	8005fc0 <memset+0x4>

08005fcc <_init>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr

08005fd8 <_fini>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	bf00      	nop
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr
