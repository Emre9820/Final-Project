
velostat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a390  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800a520  0800a520  0001a520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a840  0800a840  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800a840  0800a840  0001a840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a848  0800a848  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a848  0800a848  0001a848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a84c  0800a84c  0001a84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800a850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          0000245c  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200025c0  200025c0  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010068  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e8f  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  00033090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b98  00000000  00000000  00033d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f1b  00000000  00000000  00034928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001121d  00000000  00000000  00059843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d200f  00000000  00000000  0006aa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ca6f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000442c  00000000  00000000  0013cac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a508 	.word	0x0800a508

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800a508 	.word	0x0800a508

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b094      	sub	sp, #80	; 0x50
 8000e84:	af00      	add	r7, sp, #0

  HAL_Init();
 8000e86:	f000 fa5d 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8a:	f000 f853 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8e:	f000 f8bf 	bl	8001010 <MX_GPIO_Init>

  MX_USB_DEVICE_Init();
 8000e92:	f006 fa3d 	bl	8007310 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

	  char *adc_buffer[20];
    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000e96:	4823      	ldr	r0, [pc, #140]	; (8000f24 <main+0xa4>)
 8000e98:	f000 faea 	bl	8001470 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000e9c:	2164      	movs	r1, #100	; 0x64
 8000e9e:	4821      	ldr	r0, [pc, #132]	; (8000f24 <main+0xa4>)
 8000ea0:	f000 fbeb 	bl	800167a <HAL_ADC_PollForConversion>
	  	  adc_val = HAL_ADC_GetValue(&hadc1);
 8000ea4:	481f      	ldr	r0, [pc, #124]	; (8000f24 <main+0xa4>)
 8000ea6:	f000 fc73 	bl	8001790 <HAL_ADC_GetValue>
 8000eaa:	ee07 0a90 	vmov	s15, r0
 8000eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <main+0xa8>)
 8000eb4:	edc3 7a00 	vstr	s15, [r3]

	  	  //Transmisson


	  	  memset( adc_buffer, 0, sizeof(adc_buffer));
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2250      	movs	r2, #80	; 0x50
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f006 ff8e 	bl	8007de0 <memset>
	  	  gcvt(adc_val, 9, adc_buffer);
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <main+0xa8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fb3d 	bl	8000548 <__aeabi_f2d>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	460d      	mov	r5, r1
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	2009      	movs	r0, #9
 8000ed8:	ec45 4b10 	vmov	d0, r4, r5
 8000edc:	f006 ff32 	bl	8007d44 <gcvt>

	  	  strcat(message,adc_buffer);
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4811      	ldr	r0, [pc, #68]	; (8000f2c <main+0xac>)
 8000ee6:	f006 ff83 	bl	8007df0 <strcat>
	  	  //strcat(message,comma);
	  	  strcat(message,end);
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <main+0xb0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480e      	ldr	r0, [pc, #56]	; (8000f2c <main+0xac>)
 8000ef2:	f006 ff7d 	bl	8007df0 <strcat>

	  	  CDC_Transmit_FS((uint8_t *) message, strlen(message));
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <main+0xac>)
 8000ef8:	f7ff f96a 	bl	80001d0 <strlen>
 8000efc:	4603      	mov	r3, r0
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	4619      	mov	r1, r3
 8000f02:	480a      	ldr	r0, [pc, #40]	; (8000f2c <main+0xac>)
 8000f04:	f006 fac2 	bl	800748c <CDC_Transmit_FS>
	  	  memset(message, 0, sizeof(message));
 8000f08:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <main+0xac>)
 8000f10:	f006 ff66 	bl	8007de0 <memset>


	  	  HAL_ADC_Stop(&hadc1);
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <main+0xa4>)
 8000f16:	f000 fb7d 	bl	8001614 <HAL_ADC_Stop>
	  	  HAL_Delay(100);
 8000f1a:	2064      	movs	r0, #100	; 0x64
 8000f1c:	f000 fa84 	bl	8001428 <HAL_Delay>
  {
 8000f20:	e7b9      	b.n	8000e96 <main+0x16>
 8000f22:	bf00      	nop
 8000f24:	20000180 	.word	0x20000180
 8000f28:	200001c8 	.word	0x200001c8
 8000f2c:	200001cc 	.word	0x200001cc
 8000f30:	20000000 	.word	0x20000000

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	; 0x50
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	2230      	movs	r2, #48	; 0x30
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f006 ff4c 	bl	8007de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <SystemClock_Config+0xd4>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a29      	ldr	r2, [pc, #164]	; (8001008 <SystemClock_Config+0xd4>)
 8000f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <SystemClock_Config+0xd4>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <SystemClock_Config+0xd8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a23      	ldr	r2, [pc, #140]	; (800100c <SystemClock_Config+0xd8>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b21      	ldr	r3, [pc, #132]	; (800100c <SystemClock_Config+0xd8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fac:	2308      	movs	r3, #8
 8000fae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fba:	2307      	movs	r3, #7
 8000fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 f91e 	bl	8003204 <HAL_RCC_OscConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fce:	f000 f855 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fb7f 	bl	80036f4 <HAL_RCC_ClockConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ffc:	f000 f83e 	bl	800107c <Error_Handler>
  }
}
 8001000:	bf00      	nop
 8001002:	3750      	adds	r7, #80	; 0x50
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <MX_GPIO_Init>:

}


static void MX_GPIO_Init(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_GPIO_Init+0x68>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a16      	ldr	r2, [pc, #88]	; (8001078 <MX_GPIO_Init+0x68>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_GPIO_Init+0x68>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <MX_GPIO_Init+0x68>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <MX_GPIO_Init+0x68>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <MX_GPIO_Init+0x68>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_GPIO_Init+0x68>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <MX_GPIO_Init+0x68>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_GPIO_Init+0x68>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <Error_Handler>:

/* USER CODE END 4 */


void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop

  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <HAL_MspInit+0x4c>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 f960 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <OTG_FS_IRQHandler+0x10>)
 8001132:	f000 ff39 	bl	8001fa8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20001e84 	.word	0x20001e84

08001140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	return 1;
 8001144:	2301      	movs	r3, #1
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_kill>:

int _kill(int pid, int sig)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800115a:	f006 fe17 	bl	8007d8c <__errno>
 800115e:	4603      	mov	r3, r0
 8001160:	2216      	movs	r2, #22
 8001162:	601a      	str	r2, [r3, #0]
	return -1;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_exit>:

void _exit (int status)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffe7 	bl	8001150 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001182:	e7fe      	b.n	8001182 <_exit+0x12>

08001184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e00a      	b.n	80011ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001196:	f3af 8000 	nop.w
 800119a:	4601      	mov	r1, r0
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	60ba      	str	r2, [r7, #8]
 80011a2:	b2ca      	uxtb	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dbf0      	blt.n	8001196 <_read+0x12>
	}

return len;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	e009      	b.n	80011e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	60ba      	str	r2, [r7, #8]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbf1      	blt.n	80011d0 <_write+0x12>
	}
	return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_close>:

int _close(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
	return -1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800121e:	605a      	str	r2, [r3, #4]
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <_isatty>:

int _isatty(int file)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
	return 1;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f006 fd7c 	bl	8007d8c <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20020000 	.word	0x20020000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	2000099c 	.word	0x2000099c
 80012c8:	200025c0 	.word	0x200025c0

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001328 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012f6:	490e      	ldr	r1, [pc, #56]	; (8001330 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f8:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800130c:	4c0b      	ldr	r4, [pc, #44]	; (800133c <LoopFillZerobss+0x26>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800131a:	f7ff ffd7 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131e:	f006 fd3b 	bl	8007d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff fdad 	bl	8000e80 <main>
  bx  lr    
 8001326:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001334:	0800a850 	.word	0x0800a850
  ldr r2, =_sbss
 8001338:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800133c:	200025c0 	.word	0x200025c0

08001340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <HAL_Init+0x40>)
 800134e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_Init+0x40>)
 800135a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_Init+0x40>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 faed 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	200f      	movs	r0, #15
 8001374:	f000 f808 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff fe86 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x54>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fb05 	bl	80019b6 <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 facd 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_InitTick+0x5c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000004 	.word	0x20000004
 80013e0:	2000000c 	.word	0x2000000c
 80013e4:	20000008 	.word	0x20000008

080013e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	2000000c 	.word	0x2000000c
 800140c:	200009a0 	.word	0x200009a0

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200009a0 	.word	0x200009a0

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_Delay+0x44>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000000c 	.word	0x2000000c

08001470 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_ADC_Start+0x1a>
 8001486:	2302      	movs	r3, #2
 8001488:	e0b2      	b.n	80015f0 <HAL_ADC_Start+0x180>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b01      	cmp	r3, #1
 800149e:	d018      	beq.n	80014d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014b0:	4b52      	ldr	r3, [pc, #328]	; (80015fc <HAL_ADC_Start+0x18c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a52      	ldr	r2, [pc, #328]	; (8001600 <HAL_ADC_Start+0x190>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9a      	lsrs	r2, r3, #18
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014c4:	e002      	b.n	80014cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d17a      	bne.n	80015d6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800150a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800151e:	d106      	bne.n	800152e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	f023 0206 	bic.w	r2, r3, #6
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
 800152c:	e002      	b.n	8001534 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800153c:	4b31      	ldr	r3, [pc, #196]	; (8001604 <HAL_ADC_Start+0x194>)
 800153e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001548:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	2b00      	cmp	r3, #0
 8001554:	d12a      	bne.n	80015ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <HAL_ADC_Start+0x198>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d015      	beq.n	800158c <HAL_ADC_Start+0x11c>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a29      	ldr	r2, [pc, #164]	; (800160c <HAL_ADC_Start+0x19c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d105      	bne.n	8001576 <HAL_ADC_Start+0x106>
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_ADC_Start+0x194>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00a      	beq.n	800158c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a25      	ldr	r2, [pc, #148]	; (8001610 <HAL_ADC_Start+0x1a0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d136      	bne.n	80015ee <HAL_ADC_Start+0x17e>
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_ADC_Start+0x194>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	d130      	bne.n	80015ee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d129      	bne.n	80015ee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	e020      	b.n	80015ee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a15      	ldr	r2, [pc, #84]	; (8001608 <HAL_ADC_Start+0x198>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d11b      	bne.n	80015ee <HAL_ADC_Start+0x17e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d114      	bne.n	80015ee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	e00b      	b.n	80015ee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f043 0210 	orr.w	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	20000004 	.word	0x20000004
 8001600:	431bde83 	.word	0x431bde83
 8001604:	40012300 	.word	0x40012300
 8001608:	40012000 	.word	0x40012000
 800160c:	40012100 	.word	0x40012100
 8001610:	40012200 	.word	0x40012200

08001614 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_ADC_Stop+0x16>
 8001626:	2302      	movs	r3, #2
 8001628:	e021      	b.n	800166e <HAL_ADC_Stop+0x5a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001696:	d113      	bne.n	80016c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a6:	d10b      	bne.n	80016c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f043 0220 	orr.w	r2, r3, #32
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e063      	b.n	8001788 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80016c0:	f7ff fea6 	bl	8001410 <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016c6:	e021      	b.n	800170c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ce:	d01d      	beq.n	800170c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HAL_ADC_PollForConversion+0x6c>
 80016d6:	f7ff fe9b 	bl	8001410 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d212      	bcs.n	800170c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d00b      	beq.n	800170c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f043 0204 	orr.w	r2, r3, #4
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e03d      	b.n	8001788 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b02      	cmp	r3, #2
 8001718:	d1d6      	bne.n	80016c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f06f 0212 	mvn.w	r2, #18
 8001722:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d123      	bne.n	8001786 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d11f      	bne.n	8001786 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800175e:	2b00      	cmp	r3, #0
 8001760:	d111      	bne.n	8001786 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d105      	bne.n	8001786 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff3e 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff31 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa2 	bl	8001908 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e16b      	b.n	8001cc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f040 815a 	bne.w	8001cbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d005      	beq.n	8001a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d130      	bne.n	8001a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 0201 	and.w	r2, r3, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d017      	beq.n	8001ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d123      	bne.n	8001b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80b4 	beq.w	8001cbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b60      	ldr	r3, [pc, #384]	; (8001cdc <HAL_GPIO_Init+0x30c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a5f      	ldr	r2, [pc, #380]	; (8001cdc <HAL_GPIO_Init+0x30c>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <HAL_GPIO_Init+0x30c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b72:	4a5b      	ldr	r2, [pc, #364]	; (8001ce0 <HAL_GPIO_Init+0x310>)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <HAL_GPIO_Init+0x314>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d02b      	beq.n	8001bf6 <HAL_GPIO_Init+0x226>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_GPIO_Init+0x318>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d025      	beq.n	8001bf2 <HAL_GPIO_Init+0x222>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a50      	ldr	r2, [pc, #320]	; (8001cec <HAL_GPIO_Init+0x31c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <HAL_GPIO_Init+0x21e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	; (8001cf0 <HAL_GPIO_Init+0x320>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x21a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4e      	ldr	r2, [pc, #312]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x216>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4d      	ldr	r2, [pc, #308]	; (8001cf8 <HAL_GPIO_Init+0x328>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x212>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4c      	ldr	r2, [pc, #304]	; (8001cfc <HAL_GPIO_Init+0x32c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x20e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4b      	ldr	r2, [pc, #300]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x20a>
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	e00e      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bda:	2308      	movs	r3, #8
 8001bdc:	e00c      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bde:	2306      	movs	r3, #6
 8001be0:	e00a      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e008      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e004      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	f002 0203 	and.w	r2, r2, #3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c08:	4935      	ldr	r1, [pc, #212]	; (8001ce0 <HAL_GPIO_Init+0x310>)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c16:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3a:	4a32      	ldr	r2, [pc, #200]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c40:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8e:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <HAL_GPIO_Init+0x334>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	f67f ae90 	bls.w	80019ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40021400 	.word	0x40021400
 8001cfc:	40021800 	.word	0x40021800
 8001d00:	40021c00 	.word	0x40021c00
 8001d04:	40013c00 	.word	0x40013c00

08001d08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0a:	b08f      	sub	sp, #60	; 0x3c
 8001d0c:	af0a      	add	r7, sp, #40	; 0x28
 8001d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e10f      	b.n	8001f3a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d106      	bne.n	8001d3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f005 fcf1 	bl	800771c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d102      	bne.n	8001d54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 ffd8 	bl	8003d0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	687e      	ldr	r6, [r7, #4]
 8001d66:	466d      	mov	r5, sp
 8001d68:	f106 0410 	add.w	r4, r6, #16
 8001d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d78:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7c:	1d33      	adds	r3, r6, #4
 8001d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d80:	6838      	ldr	r0, [r7, #0]
 8001d82:	f001 feaf 	bl	8003ae4 <USB_CoreInit>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0d0      	b.n	8001f3a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 ffc6 	bl	8003d30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e04a      	b.n	8001e40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	333d      	adds	r3, #61	; 0x3d
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	333c      	adds	r3, #60	; 0x3c
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	b298      	uxth	r0, r3
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	3344      	adds	r3, #68	; 0x44
 8001de6:	4602      	mov	r2, r0
 8001de8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	3340      	adds	r3, #64	; 0x40
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3348      	adds	r3, #72	; 0x48
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	334c      	adds	r3, #76	; 0x4c
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	3354      	adds	r3, #84	; 0x54
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3af      	bcc.n	8001daa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
 8001e4e:	e044      	b.n	8001eda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d3b5      	bcc.n	8001e50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	687e      	ldr	r6, [r7, #4]
 8001eec:	466d      	mov	r5, sp
 8001eee:	f106 0410 	add.w	r4, r6, #16
 8001ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001efa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f02:	1d33      	adds	r3, r6, #4
 8001f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f06:	6838      	ldr	r0, [r7, #0]
 8001f08:	f001 ff5e 	bl	8003dc8 <USB_DevInit>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00d      	b.n	8001f3a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 f8ad 	bl	8005092 <USB_DevDisconnect>

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_PCD_Start+0x1c>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e020      	b.n	8001fa0 <HAL_PCD_Start+0x5e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d109      	bne.n	8001f82 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d005      	beq.n	8001f82 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 feb0 	bl	8003cec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 f85d 	bl	8005050 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b08d      	sub	sp, #52	; 0x34
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 f91b 	bl	80051fa <USB_GetMode>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 848a 	bne.w	80028e0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 f87f 	bl	80050d4 <USB_ReadInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8480 	beq.w	80028de <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 f86c 	bl	80050d4 <USB_ReadInterrupts>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b02      	cmp	r3, #2
 8002004:	d107      	bne.n	8002016 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f002 0202 	and.w	r2, r2, #2
 8002014:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f003 f85a 	bl	80050d4 <USB_ReadInterrupts>
 8002020:	4603      	mov	r3, r0
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b10      	cmp	r3, #16
 8002028:	d161      	bne.n	80020ee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0210 	bic.w	r2, r2, #16
 8002038:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	3304      	adds	r3, #4
 8002058:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	0c5b      	lsrs	r3, r3, #17
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	2b02      	cmp	r3, #2
 8002064:	d124      	bne.n	80020b0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d035      	beq.n	80020de <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800207c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002080:	b29b      	uxth	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	6a38      	ldr	r0, [r7, #32]
 8002086:	f002 fe91 	bl	8004dac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002096:	441a      	add	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a8:	441a      	add	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	621a      	str	r2, [r3, #32]
 80020ae:	e016      	b.n	80020de <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	0c5b      	lsrs	r3, r3, #17
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	2b06      	cmp	r3, #6
 80020ba:	d110      	bne.n	80020de <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020c2:	2208      	movs	r2, #8
 80020c4:	4619      	mov	r1, r3
 80020c6:	6a38      	ldr	r0, [r7, #32]
 80020c8:	f002 fe70 	bl	8004dac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020d8:	441a      	add	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0210 	orr.w	r2, r2, #16
 80020ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f002 ffee 	bl	80050d4 <USB_ReadInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002102:	f040 80a7 	bne.w	8002254 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f002 fff3 	bl	80050fa <USB_ReadDevAllOutEpInterrupt>
 8002114:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002116:	e099      	b.n	800224c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 808e 	beq.w	8002240 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f003 f817 	bl	8005162 <USB_ReadDevOutEPInterrupt>
 8002134:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00c      	beq.n	800215a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214c:	461a      	mov	r2, r3
 800214e:	2301      	movs	r3, #1
 8002150:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fec3 	bl	8002ee0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00c      	beq.n	800217e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002170:	461a      	mov	r2, r3
 8002172:	2308      	movs	r3, #8
 8002174:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 ff99 	bl	80030b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002194:	461a      	mov	r2, r3
 8002196:	2310      	movs	r3, #16
 8002198:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d030      	beq.n	8002206 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ac:	2b80      	cmp	r3, #128	; 0x80
 80021ae:	d109      	bne.n	80021c4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	3304      	adds	r3, #4
 80021d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	78db      	ldrb	r3, [r3, #3]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d108      	bne.n	80021f4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2200      	movs	r2, #0
 80021e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f005 fb9a 	bl	8007928 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002200:	461a      	mov	r2, r3
 8002202:	2302      	movs	r3, #2
 8002204:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221c:	461a      	mov	r2, r3
 800221e:	2320      	movs	r3, #32
 8002220:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d009      	beq.n	8002240 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800223e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	3301      	adds	r3, #1
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	2b00      	cmp	r3, #0
 8002250:	f47f af62 	bne.w	8002118 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f002 ff3b 	bl	80050d4 <USB_ReadInterrupts>
 800225e:	4603      	mov	r3, r0
 8002260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002268:	f040 80db 	bne.w	8002422 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f002 ff5c 	bl	800512e <USB_ReadDevAllInEpInterrupt>
 8002276:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800227c:	e0cd      	b.n	800241a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80c2 	beq.w	800240e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f002 ff82 	bl	800519e <USB_ReadDevInEPInterrupt>
 800229a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d057      	beq.n	8002356 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	2201      	movs	r2, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69f9      	ldr	r1, [r7, #28]
 80022c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022c6:	4013      	ands	r3, r2
 80022c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d6:	461a      	mov	r2, r3
 80022d8:	2301      	movs	r3, #1
 80022da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d132      	bne.n	800234a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	334c      	adds	r3, #76	; 0x4c
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4403      	add	r3, r0
 8002304:	3348      	adds	r3, #72	; 0x48
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4419      	add	r1, r3
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4403      	add	r3, r0
 8002318:	334c      	adds	r3, #76	; 0x4c
 800231a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	2b00      	cmp	r3, #0
 8002320:	d113      	bne.n	800234a <HAL_PCD_IRQHandler+0x3a2>
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	3354      	adds	r3, #84	; 0x54
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002342:	461a      	mov	r2, r3
 8002344:	2101      	movs	r1, #1
 8002346:	f002 ff89 	bl	800525c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4619      	mov	r1, r3
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f005 fa64 	bl	800781e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	4413      	add	r3, r2
 8002368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800236c:	461a      	mov	r2, r3
 800236e:	2308      	movs	r3, #8
 8002370:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	4413      	add	r3, r2
 8002384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002388:	461a      	mov	r2, r3
 800238a:	2310      	movs	r3, #16
 800238c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a4:	461a      	mov	r2, r3
 80023a6:	2340      	movs	r3, #64	; 0x40
 80023a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d023      	beq.n	80023fc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80023b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b6:	6a38      	ldr	r0, [r7, #32]
 80023b8:	f001 fe6a 	bl	8004090 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80023bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	3338      	adds	r3, #56	; 0x38
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	3304      	adds	r3, #4
 80023ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	78db      	ldrb	r3, [r3, #3]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d108      	bne.n	80023ea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2200      	movs	r2, #0
 80023dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	4619      	mov	r1, r3
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f005 fab1 	bl	800794c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f6:	461a      	mov	r2, r3
 80023f8:	2302      	movs	r3, #2
 80023fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 fcdb 	bl	8002dc4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	3301      	adds	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	f47f af2e 	bne.w	800227e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f002 fe54 	bl	80050d4 <USB_ReadInterrupts>
 800242c:	4603      	mov	r3, r0
 800242e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002436:	d122      	bne.n	800247e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002452:	2b01      	cmp	r3, #1
 8002454:	d108      	bne.n	8002468 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800245e:	2100      	movs	r1, #0
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fec3 	bl	80031ec <HAL_PCDEx_LPM_Callback>
 8002466:	e002      	b.n	800246e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f005 fa4f 	bl	800790c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800247c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f002 fe26 	bl	80050d4 <USB_ReadInterrupts>
 8002488:	4603      	mov	r3, r0
 800248a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800248e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002492:	d112      	bne.n	80024ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d102      	bne.n	80024aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f005 fa0b 	bl	80078c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024b8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 fe08 	bl	80050d4 <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ce:	f040 80b7 	bne.w	8002640 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2110      	movs	r1, #16
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 fdcf 	bl	8004090 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f6:	e046      	b.n	8002586 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002504:	461a      	mov	r2, r3
 8002506:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800250a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251c:	0151      	lsls	r1, r2, #5
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	440a      	add	r2, r1
 8002522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800252a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002538:	461a      	mov	r2, r3
 800253a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800253e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002550:	0151      	lsls	r1, r2, #5
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	440a      	add	r2, r1
 8002556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800255a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800255e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002570:	0151      	lsls	r1, r2, #5
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	440a      	add	r2, r1
 8002576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800257a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800257e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	3301      	adds	r3, #1
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800258c:	429a      	cmp	r2, r3
 800258e:	d3b3      	bcc.n	80024f8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800259e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d016      	beq.n	80025da <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025bc:	f043 030b 	orr.w	r3, r3, #11
 80025c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d2:	f043 030b 	orr.w	r3, r3, #11
 80025d6:	6453      	str	r3, [r2, #68]	; 0x44
 80025d8:	e015      	b.n	8002606 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002600:	f043 030b 	orr.w	r3, r3, #11
 8002604:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002614:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002618:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800262a:	461a      	mov	r2, r3
 800262c:	f002 fe16 	bl	800525c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800263e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f002 fd45 	bl	80050d4 <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002654:	d124      	bne.n	80026a0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f002 fddb 	bl	8005216 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f001 fd90 	bl	800418a <USB_GetDevSpeed>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681c      	ldr	r4, [r3, #0]
 8002676:	f001 fa29 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 800267a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	4620      	mov	r0, r4
 8002686:	f001 fa8f 	bl	8003ba8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f005 f8ef 	bl	800786e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800269e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 fd15 	bl	80050d4 <USB_ReadInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d10a      	bne.n	80026ca <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f005 f8cc 	bl	8007852 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f002 0208 	and.w	r2, r2, #8
 80026c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fd00 	bl	80050d4 <USB_ReadInterrupts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	2b80      	cmp	r3, #128	; 0x80
 80026dc:	d122      	bne.n	8002724 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ea:	2301      	movs	r3, #1
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	e014      	b.n	800271a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fb27 	bl	8002d62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	3301      	adds	r3, #1
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	429a      	cmp	r2, r3
 8002722:	d3e5      	bcc.n	80026f0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f002 fcd3 	bl	80050d4 <USB_ReadInterrupts>
 800272e:	4603      	mov	r3, r0
 8002730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002738:	d13b      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800273a:	2301      	movs	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	e02b      	b.n	8002798 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4413      	add	r3, r2
 8002748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3340      	adds	r3, #64	; 0x40
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d115      	bne.n	8002792 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002766:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002768:	2b00      	cmp	r3, #0
 800276a:	da12      	bge.n	8002792 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	333f      	adds	r3, #63	; 0x3f
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4619      	mov	r1, r3
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fae8 	bl	8002d62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	3301      	adds	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	429a      	cmp	r2, r3
 80027a0:	d3ce      	bcc.n	8002740 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 fc8c 	bl	80050d4 <USB_ReadInterrupts>
 80027bc:	4603      	mov	r3, r0
 80027be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027c6:	d155      	bne.n	8002874 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027c8:	2301      	movs	r3, #1
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	e045      	b.n	800285a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d12e      	bne.n	8002854 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da2b      	bge.n	8002854 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002808:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800280c:	429a      	cmp	r2, r3
 800280e:	d121      	bne.n	8002854 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10a      	bne.n	8002854 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800284c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002850:	6053      	str	r3, [r2, #4]
            break;
 8002852:	e007      	b.n	8002864 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	3301      	adds	r3, #1
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	429a      	cmp	r2, r3
 8002862:	d3b4      	bcc.n	80027ce <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f002 fc2b 	bl	80050d4 <USB_ReadInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002888:	d10a      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f005 f870 	bl	8007970 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800289e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 fc15 	bl	80050d4 <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d115      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f005 f860 	bl	800798c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6859      	ldr	r1, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	e000      	b.n	80028e0 <HAL_PCD_IRQHandler+0x938>
      return;
 80028de:	bf00      	nop
    }
  }
}
 80028e0:	3734      	adds	r7, #52	; 0x34
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}

080028e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_PCD_SetAddress+0x1a>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e013      	b.n	8002928 <HAL_PCD_SetAddress+0x42>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f002 fb73 	bl	8005004 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	70fb      	strb	r3, [r7, #3]
 8002942:	460b      	mov	r3, r1
 8002944:	803b      	strh	r3, [r7, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800294e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002952:	2b00      	cmp	r3, #0
 8002954:	da0f      	bge.n	8002976 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	f003 020f 	and.w	r2, r3, #15
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	3338      	adds	r3, #56	; 0x38
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	705a      	strb	r2, [r3, #1]
 8002974:	e00f      	b.n	8002996 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	b2da      	uxtb	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029a2:	883a      	ldrh	r2, [r7, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	78ba      	ldrb	r2, [r7, #2]
 80029ac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029c0:	78bb      	ldrb	r3, [r7, #2]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d102      	bne.n	80029cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_PCD_EP_Open+0xaa>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e00e      	b.n	80029f8 <HAL_PCD_EP_Open+0xc8>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68f9      	ldr	r1, [r7, #12]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 fbf3 	bl	80041d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029f6:	7afb      	ldrb	r3, [r7, #11]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	da0f      	bge.n	8002a34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	f003 020f 	and.w	r2, r3, #15
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	3338      	adds	r3, #56	; 0x38
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	3304      	adds	r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	705a      	strb	r2, [r3, #1]
 8002a32:	e00f      	b.n	8002a54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	f003 020f 	and.w	r2, r3, #15
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_PCD_EP_Close+0x6e>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e00e      	b.n	8002a8c <HAL_PCD_EP_Close+0x8c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68f9      	ldr	r1, [r7, #12]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 fc31 	bl	80042e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa4:	7afb      	ldrb	r3, [r7, #11]
 8002aa6:	f003 020f 	and.w	r2, r3, #15
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4413      	add	r3, r2
 8002aba:	3304      	adds	r3, #4
 8002abc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2200      	movs	r2, #0
 8002ace:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad6:	7afb      	ldrb	r3, [r7, #11]
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d102      	bne.n	8002af0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002af0:	7afb      	ldrb	r3, [r7, #11]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	6979      	ldr	r1, [r7, #20]
 8002b08:	f001 ff10 	bl	800492c <USB_EP0StartXfer>
 8002b0c:	e008      	b.n	8002b20 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6979      	ldr	r1, [r7, #20]
 8002b1c:	f001 fcbe 	bl	800449c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 020f 	and.w	r2, r3, #15
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002b4c:	681b      	ldr	r3, [r3, #0]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b086      	sub	sp, #24
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	460b      	mov	r3, r1
 8002b68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b6a:	7afb      	ldrb	r3, [r7, #11]
 8002b6c:	f003 020f 	and.w	r2, r3, #15
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	3338      	adds	r3, #56	; 0x38
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3304      	adds	r3, #4
 8002b80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2200      	movs	r2, #0
 8002b92:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2201      	movs	r2, #1
 8002b98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b9a:	7afb      	ldrb	r3, [r7, #11]
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d102      	bne.n	8002bb4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6979      	ldr	r1, [r7, #20]
 8002bcc:	f001 feae 	bl	800492c <USB_EP0StartXfer>
 8002bd0:	e008      	b.n	8002be4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	6979      	ldr	r1, [r7, #20]
 8002be0:	f001 fc5c 	bl	800449c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	f003 020f 	and.w	r2, r3, #15
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d901      	bls.n	8002c0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e050      	b.n	8002cae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	da0f      	bge.n	8002c34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 020f 	and.w	r2, r3, #15
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	3338      	adds	r3, #56	; 0x38
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	705a      	strb	r2, [r3, #1]
 8002c32:	e00d      	b.n	8002c50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	3304      	adds	r3, #4
 8002c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_PCD_EP_SetStall+0x82>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e01e      	b.n	8002cae <HAL_PCD_EP_SetStall+0xc0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f002 f8ec 	bl	8004e5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	b2d9      	uxtb	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f002 fadc 	bl	800525c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 020f 	and.w	r2, r3, #15
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d901      	bls.n	8002cd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e042      	b.n	8002d5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	da0f      	bge.n	8002cfc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f003 020f 	and.w	r2, r3, #15
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	3338      	adds	r3, #56	; 0x38
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	705a      	strb	r2, [r3, #1]
 8002cfa:	e00f      	b.n	8002d1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	f003 020f 	and.w	r2, r3, #15
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	3304      	adds	r3, #4
 8002d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_PCD_EP_ClrStall+0x86>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e00e      	b.n	8002d5a <HAL_PCD_EP_ClrStall+0xa4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68f9      	ldr	r1, [r7, #12]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 f8f4 	bl	8004f38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da0c      	bge.n	8002d90 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	3338      	adds	r3, #56	; 0x38
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e00c      	b.n	8002daa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	f003 020f 	and.w	r2, r3, #15
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68f9      	ldr	r1, [r7, #12]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 ff13 	bl	8004bdc <USB_EPStopXfer>
 8002db6:	4603      	mov	r3, r0
 8002db8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002dba:	7afb      	ldrb	r3, [r7, #11]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	3338      	adds	r3, #56	; 0x38
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	3304      	adds	r3, #4
 8002dea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a1a      	ldr	r2, [r3, #32]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d901      	bls.n	8002dfc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e06c      	b.n	8002ed6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d902      	bls.n	8002e18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	3303      	adds	r3, #3
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e20:	e02b      	b.n	8002e7a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d902      	bls.n	8002e3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3303      	adds	r3, #3
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6919      	ldr	r1, [r3, #16]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6978      	ldr	r0, [r7, #20]
 8002e5e:	f001 ff67 	bl	8004d30 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	441a      	add	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a1a      	ldr	r2, [r3, #32]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	441a      	add	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d809      	bhi.n	8002ea4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d203      	bcs.n	8002ea4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1be      	bne.n	8002e22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	699a      	ldr	r2, [r3, #24]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d811      	bhi.n	8002ed4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	6939      	ldr	r1, [r7, #16]
 8002ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	333c      	adds	r3, #60	; 0x3c
 8002ef8:	3304      	adds	r3, #4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d17b      	bne.n	800300e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	f240 80b9 	bls.w	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80b3 	beq.w	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	461a      	mov	r2, r3
 8002f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f48:	6093      	str	r3, [r2, #8]
 8002f4a:	e0a7      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f62:	461a      	mov	r2, r3
 8002f64:	2320      	movs	r3, #32
 8002f66:	6093      	str	r3, [r2, #8]
 8002f68:	e098      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 8093 	bne.w	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	4a4b      	ldr	r2, [pc, #300]	; (80030a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d90f      	bls.n	8002f9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f94:	461a      	mov	r2, r3
 8002f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f9a:	6093      	str	r3, [r2, #8]
 8002f9c:	e07e      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	0159      	lsls	r1, r3, #5
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d114      	bne.n	8003000 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2101      	movs	r1, #1
 8002fec:	f002 f936 	bl	800525c <USB_EP0_OutStart>
 8002ff0:	e006      	b.n	8003000 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	441a      	add	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f004 fbee 	bl	80077e8 <HAL_PCD_DataOutStageCallback>
 800300c:	e046      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4a26      	ldr	r2, [pc, #152]	; (80030ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d124      	bne.n	8003060 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	4413      	add	r3, r2
 8003028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302c:	461a      	mov	r2, r3
 800302e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003032:	6093      	str	r3, [r2, #8]
 8003034:	e032      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304c:	461a      	mov	r2, r3
 800304e:	2320      	movs	r3, #32
 8003050:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f004 fbc5 	bl	80077e8 <HAL_PCD_DataOutStageCallback>
 800305e:	e01d      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d114      	bne.n	8003090 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003088:	461a      	mov	r2, r3
 800308a:	2100      	movs	r1, #0
 800308c:	f002 f8e6 	bl	800525c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	4619      	mov	r1, r3
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f004 fba6 	bl	80077e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	4f54300a 	.word	0x4f54300a
 80030ac:	4f54310a 	.word	0x4f54310a

080030b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	333c      	adds	r3, #60	; 0x3c
 80030c8:	3304      	adds	r3, #4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a15      	ldr	r2, [pc, #84]	; (8003138 <PCD_EP_OutSetupPacket_int+0x88>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d90e      	bls.n	8003104 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fc:	461a      	mov	r2, r3
 80030fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003102:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f004 fb5d 	bl	80077c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <PCD_EP_OutSetupPacket_int+0x88>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d90c      	bls.n	800312c <PCD_EP_OutSetupPacket_int+0x7c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d108      	bne.n	800312c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003124:	461a      	mov	r2, r3
 8003126:	2101      	movs	r1, #1
 8003128:	f002 f898 	bl	800525c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	4f54300a 	.word	0x4f54300a

0800313c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
 8003148:	4613      	mov	r3, r2
 800314a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d107      	bne.n	800316a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800315a:	883b      	ldrh	r3, [r7, #0]
 800315c:	0419      	lsls	r1, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	430a      	orrs	r2, r1
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
 8003168:	e028      	b.n	80031bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	4413      	add	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003178:	2300      	movs	r3, #0
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	e00d      	b.n	800319a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	3340      	adds	r3, #64	; 0x40
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4413      	add	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	3301      	adds	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	3b01      	subs	r3, #1
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d3ec      	bcc.n	800317e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031a4:	883b      	ldrh	r3, [r7, #0]
 80031a6:	0418      	lsls	r0, r3, #16
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	4302      	orrs	r2, r0
 80031b4:	3340      	adds	r3, #64	; 0x40
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e267      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d075      	beq.n	800330e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b04      	cmp	r3, #4
 800322c:	d00c      	beq.n	8003248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322e:	4b85      	ldr	r3, [pc, #532]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003236:	2b08      	cmp	r3, #8
 8003238:	d112      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323a:	4b82      	ldr	r3, [pc, #520]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003246:	d10b      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	4b7e      	ldr	r3, [pc, #504]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d05b      	beq.n	800330c <HAL_RCC_OscConfig+0x108>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d157      	bne.n	800330c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e242      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d106      	bne.n	8003278 <HAL_RCC_OscConfig+0x74>
 800326a:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a75      	ldr	r2, [pc, #468]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e01d      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x98>
 8003282:	4b70      	ldr	r3, [pc, #448]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6f      	ldr	r2, [pc, #444]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b6d      	ldr	r3, [pc, #436]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6c      	ldr	r2, [pc, #432]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 800329c:	4b69      	ldr	r3, [pc, #420]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a68      	ldr	r2, [pc, #416]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b66      	ldr	r3, [pc, #408]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a65      	ldr	r2, [pc, #404]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe f8a8 	bl	8001410 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fe f8a4 	bl	8001410 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e207      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b5b      	ldr	r3, [pc, #364]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0xc0>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe f894 	bl	8001410 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe f890 	bl	8001410 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1f3      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	4b51      	ldr	r3, [pc, #324]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0xe8>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d063      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800331a:	4b4a      	ldr	r3, [pc, #296]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800332e:	2b08      	cmp	r3, #8
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b44      	ldr	r3, [pc, #272]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1c7      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4937      	ldr	r1, [pc, #220]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e03a      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <HAL_RCC_OscConfig+0x244>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe f849 	bl	8001410 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe f845 	bl	8001410 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1a8      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4925      	ldr	r1, [pc, #148]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e015      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_OscConfig+0x244>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe f828 	bl	8001410 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fe f824 	bl	8001410 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e187      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d036      	beq.n	800345c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_RCC_OscConfig+0x248>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe f808 	bl	8001410 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe f804 	bl	8001410 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e167      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_OscConfig+0x240>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x200>
 8003422:	e01b      	b.n	800345c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_OscConfig+0x248>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342a:	f7fd fff1 	bl	8001410 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	e00e      	b.n	8003450 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003432:	f7fd ffed 	bl	8001410 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d907      	bls.n	8003450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e150      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
 8003444:	40023800 	.word	0x40023800
 8003448:	42470000 	.word	0x42470000
 800344c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	4b88      	ldr	r3, [pc, #544]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ea      	bne.n	8003432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8097 	beq.w	8003598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346e:	4b81      	ldr	r3, [pc, #516]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b7d      	ldr	r3, [pc, #500]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a7c      	ldr	r2, [pc, #496]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b7a      	ldr	r3, [pc, #488]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b77      	ldr	r3, [pc, #476]	; (8003678 <HAL_RCC_OscConfig+0x474>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b74      	ldr	r3, [pc, #464]	; (8003678 <HAL_RCC_OscConfig+0x474>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a73      	ldr	r2, [pc, #460]	; (8003678 <HAL_RCC_OscConfig+0x474>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fd ffad 	bl	8001410 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fd ffa9 	bl	8001410 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e10c      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <HAL_RCC_OscConfig+0x474>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x2ea>
 80034e0:	4b64      	ldr	r3, [pc, #400]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	4a63      	ldr	r2, [pc, #396]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	; 0x70
 80034ec:	e01c      	b.n	8003528 <HAL_RCC_OscConfig+0x324>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x30c>
 80034f6:	4b5f      	ldr	r3, [pc, #380]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a5e      	ldr	r2, [pc, #376]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a5b      	ldr	r2, [pc, #364]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0x324>
 8003510:	4b58      	ldr	r3, [pc, #352]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a57      	ldr	r2, [pc, #348]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
 800351c:	4b55      	ldr	r3, [pc, #340]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a54      	ldr	r2, [pc, #336]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003522:	f023 0304 	bic.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fd ff6e 	bl	8001410 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fd ff6a 	bl	8001410 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0cb      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	4b49      	ldr	r3, [pc, #292]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ee      	beq.n	8003538 <HAL_RCC_OscConfig+0x334>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355c:	f7fd ff58 	bl	8001410 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fd ff54 	bl	8001410 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0b5      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357a:	4b3e      	ldr	r3, [pc, #248]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ee      	bne.n	8003564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4a38      	ldr	r2, [pc, #224]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003596:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a1 	beq.w	80036e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a2:	4b34      	ldr	r3, [pc, #208]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d05c      	beq.n	8003668 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d141      	bne.n	800363a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_RCC_OscConfig+0x478>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fd ff28 	bl	8001410 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fd ff24 	bl	8001410 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e087      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	4b27      	ldr	r3, [pc, #156]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	491b      	ldr	r1, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x478>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fd fefd 	bl	8001410 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361a:	f7fd fef9 	bl	8001410 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e05c      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x416>
 8003638:	e054      	b.n	80036e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_RCC_OscConfig+0x478>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fd fee6 	bl	8001410 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003648:	f7fd fee2 	bl	8001410 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e045      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_OscConfig+0x470>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x444>
 8003666:	e03d      	b.n	80036e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d107      	bne.n	8003680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e038      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
 800367c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_RCC_OscConfig+0x4ec>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d028      	beq.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d121      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d11a      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d111      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	3b01      	subs	r3, #1
 80036ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0cc      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003708:	4b68      	ldr	r3, [pc, #416]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d90c      	bls.n	8003730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b65      	ldr	r3, [pc, #404]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b63      	ldr	r3, [pc, #396]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0b8      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003748:	4b59      	ldr	r3, [pc, #356]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a58      	ldr	r2, [pc, #352]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003760:	4b53      	ldr	r3, [pc, #332]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a52      	ldr	r2, [pc, #328]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800376a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376c:	4b50      	ldr	r3, [pc, #320]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	494d      	ldr	r1, [pc, #308]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d044      	beq.n	8003814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b47      	ldr	r3, [pc, #284]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d119      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d003      	beq.n	80037b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b2:	4b3f      	ldr	r3, [pc, #252]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e06f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c2:	4b3b      	ldr	r3, [pc, #236]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e067      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d2:	4b37      	ldr	r3, [pc, #220]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f023 0203 	bic.w	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4934      	ldr	r1, [pc, #208]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e4:	f7fd fe14 	bl	8001410 <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fd fe10 	bl	8001410 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e04f      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	4b2b      	ldr	r3, [pc, #172]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 020c 	and.w	r2, r3, #12
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	429a      	cmp	r2, r3
 8003812:	d1eb      	bne.n	80037ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003814:	4b25      	ldr	r3, [pc, #148]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d20c      	bcs.n	800383c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b22      	ldr	r3, [pc, #136]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e032      	b.n	80038a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4916      	ldr	r1, [pc, #88]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003866:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	490e      	ldr	r1, [pc, #56]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800387a:	f000 f821 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 800387e:	4602      	mov	r2, r0
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	490a      	ldr	r1, [pc, #40]	; (80038b4 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	5ccb      	ldrb	r3, [r1, r3]
 800388e:	fa22 f303 	lsr.w	r3, r2, r3
 8003892:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003896:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x1c8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fd74 	bl	8001388 <HAL_InitTick>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40023c00 	.word	0x40023c00
 80038b0:	40023800 	.word	0x40023800
 80038b4:	0800a570 	.word	0x0800a570
 80038b8:	20000004 	.word	0x20000004
 80038bc:	20000008 	.word	0x20000008

080038c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c4:	b094      	sub	sp, #80	; 0x50
 80038c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	647b      	str	r3, [r7, #68]	; 0x44
 80038cc:	2300      	movs	r3, #0
 80038ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d0:	2300      	movs	r3, #0
 80038d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d8:	4b79      	ldr	r3, [pc, #484]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d00d      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x40>
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	f200 80e1 	bhi.w	8003aac <HAL_RCC_GetSysClockFreq+0x1ec>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x34>
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0x3a>
 80038f2:	e0db      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f4:	4b73      	ldr	r3, [pc, #460]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038f8:	e0db      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038fa:	4b73      	ldr	r3, [pc, #460]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x208>)
 80038fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038fe:	e0d8      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003900:	4b6f      	ldr	r3, [pc, #444]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003908:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800390a:	4b6d      	ldr	r3, [pc, #436]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d063      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003916:	4b6a      	ldr	r3, [pc, #424]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	2200      	movs	r2, #0
 800391e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003920:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003928:	633b      	str	r3, [r7, #48]	; 0x30
 800392a:	2300      	movs	r3, #0
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
 800392e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003932:	4622      	mov	r2, r4
 8003934:	462b      	mov	r3, r5
 8003936:	f04f 0000 	mov.w	r0, #0
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	0159      	lsls	r1, r3, #5
 8003940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003944:	0150      	lsls	r0, r2, #5
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4621      	mov	r1, r4
 800394c:	1a51      	subs	r1, r2, r1
 800394e:	6139      	str	r1, [r7, #16]
 8003950:	4629      	mov	r1, r5
 8003952:	eb63 0301 	sbc.w	r3, r3, r1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003964:	4659      	mov	r1, fp
 8003966:	018b      	lsls	r3, r1, #6
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800396e:	4651      	mov	r1, sl
 8003970:	018a      	lsls	r2, r1, #6
 8003972:	4651      	mov	r1, sl
 8003974:	ebb2 0801 	subs.w	r8, r2, r1
 8003978:	4659      	mov	r1, fp
 800397a:	eb63 0901 	sbc.w	r9, r3, r1
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800398a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800398e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003992:	4690      	mov	r8, r2
 8003994:	4699      	mov	r9, r3
 8003996:	4623      	mov	r3, r4
 8003998:	eb18 0303 	adds.w	r3, r8, r3
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	462b      	mov	r3, r5
 80039a0:	eb49 0303 	adc.w	r3, r9, r3
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039b2:	4629      	mov	r1, r5
 80039b4:	024b      	lsls	r3, r1, #9
 80039b6:	4621      	mov	r1, r4
 80039b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039bc:	4621      	mov	r1, r4
 80039be:	024a      	lsls	r2, r1, #9
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c6:	2200      	movs	r2, #0
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039d0:	f7fd f8d4 	bl	8000b7c <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4613      	mov	r3, r2
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	e058      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039de:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	099b      	lsrs	r3, r3, #6
 80039e4:	2200      	movs	r2, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	4611      	mov	r1, r2
 80039ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
 80039f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039f8:	4642      	mov	r2, r8
 80039fa:	464b      	mov	r3, r9
 80039fc:	f04f 0000 	mov.w	r0, #0
 8003a00:	f04f 0100 	mov.w	r1, #0
 8003a04:	0159      	lsls	r1, r3, #5
 8003a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a0a:	0150      	lsls	r0, r2, #5
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4641      	mov	r1, r8
 8003a12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a16:	4649      	mov	r1, r9
 8003a18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a30:	ebb2 040a 	subs.w	r4, r2, sl
 8003a34:	eb63 050b 	sbc.w	r5, r3, fp
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	00eb      	lsls	r3, r5, #3
 8003a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a46:	00e2      	lsls	r2, r4, #3
 8003a48:	4614      	mov	r4, r2
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	4643      	mov	r3, r8
 8003a4e:	18e3      	adds	r3, r4, r3
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	464b      	mov	r3, r9
 8003a54:	eb45 0303 	adc.w	r3, r5, r3
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a66:	4629      	mov	r1, r5
 8003a68:	028b      	lsls	r3, r1, #10
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a70:	4621      	mov	r1, r4
 8003a72:	028a      	lsls	r2, r1, #10
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	61fa      	str	r2, [r7, #28]
 8003a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a84:	f7fd f87a 	bl	8000b7c <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003aa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3750      	adds	r7, #80	; 0x50
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	00f42400 	.word	0x00f42400
 8003ac8:	007a1200 	.word	0x007a1200

08003acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000004 	.word	0x20000004

08003ae4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	f107 001c 	add.w	r0, r7, #28
 8003af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d122      	bne.n	8003b42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d105      	bne.n	8003b36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f001 fbee 	bl	8005318 <USB_CoreReset>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	73fb      	strb	r3, [r7, #15]
 8003b40:	e01a      	b.n	8003b78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f001 fbe2 	bl	8005318 <USB_CoreReset>
 8003b54:	4603      	mov	r3, r0
 8003b56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
 8003b6a:	e005      	b.n	8003b78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d10b      	bne.n	8003b96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f043 0206 	orr.w	r2, r3, #6
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ba2:	b004      	add	sp, #16
 8003ba4:	4770      	bx	lr
	...

08003ba8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d165      	bne.n	8003c88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4a41      	ldr	r2, [pc, #260]	; (8003cc4 <USB_SetTurnaroundTime+0x11c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d906      	bls.n	8003bd2 <USB_SetTurnaroundTime+0x2a>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4a40      	ldr	r2, [pc, #256]	; (8003cc8 <USB_SetTurnaroundTime+0x120>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d202      	bcs.n	8003bd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003bcc:	230f      	movs	r3, #15
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e062      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4a3c      	ldr	r2, [pc, #240]	; (8003cc8 <USB_SetTurnaroundTime+0x120>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d306      	bcc.n	8003be8 <USB_SetTurnaroundTime+0x40>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4a3b      	ldr	r2, [pc, #236]	; (8003ccc <USB_SetTurnaroundTime+0x124>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d202      	bcs.n	8003be8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003be2:	230e      	movs	r3, #14
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e057      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4a38      	ldr	r2, [pc, #224]	; (8003ccc <USB_SetTurnaroundTime+0x124>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d306      	bcc.n	8003bfe <USB_SetTurnaroundTime+0x56>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4a37      	ldr	r2, [pc, #220]	; (8003cd0 <USB_SetTurnaroundTime+0x128>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d202      	bcs.n	8003bfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bf8:	230d      	movs	r3, #13
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	e04c      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4a33      	ldr	r2, [pc, #204]	; (8003cd0 <USB_SetTurnaroundTime+0x128>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d306      	bcc.n	8003c14 <USB_SetTurnaroundTime+0x6c>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4a32      	ldr	r2, [pc, #200]	; (8003cd4 <USB_SetTurnaroundTime+0x12c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d802      	bhi.n	8003c14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003c0e:	230c      	movs	r3, #12
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e041      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4a2f      	ldr	r2, [pc, #188]	; (8003cd4 <USB_SetTurnaroundTime+0x12c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d906      	bls.n	8003c2a <USB_SetTurnaroundTime+0x82>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4a2e      	ldr	r2, [pc, #184]	; (8003cd8 <USB_SetTurnaroundTime+0x130>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d802      	bhi.n	8003c2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003c24:	230b      	movs	r3, #11
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e036      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <USB_SetTurnaroundTime+0x130>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d906      	bls.n	8003c40 <USB_SetTurnaroundTime+0x98>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4a29      	ldr	r2, [pc, #164]	; (8003cdc <USB_SetTurnaroundTime+0x134>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d802      	bhi.n	8003c40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c3a:	230a      	movs	r3, #10
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e02b      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <USB_SetTurnaroundTime+0x134>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d906      	bls.n	8003c56 <USB_SetTurnaroundTime+0xae>
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <USB_SetTurnaroundTime+0x138>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d202      	bcs.n	8003c56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c50:	2309      	movs	r3, #9
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e020      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <USB_SetTurnaroundTime+0x138>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d306      	bcc.n	8003c6c <USB_SetTurnaroundTime+0xc4>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <USB_SetTurnaroundTime+0x13c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d802      	bhi.n	8003c6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c66:	2308      	movs	r3, #8
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e015      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <USB_SetTurnaroundTime+0x13c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d906      	bls.n	8003c82 <USB_SetTurnaroundTime+0xda>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <USB_SetTurnaroundTime+0x140>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d202      	bcs.n	8003c82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c7c:	2307      	movs	r3, #7
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e00a      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c82:	2306      	movs	r3, #6
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e007      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c8e:	2309      	movs	r3, #9
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	e001      	b.n	8003c98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c94:	2309      	movs	r3, #9
 8003c96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	029b      	lsls	r3, r3, #10
 8003cac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	00d8acbf 	.word	0x00d8acbf
 8003cc8:	00e4e1c0 	.word	0x00e4e1c0
 8003ccc:	00f42400 	.word	0x00f42400
 8003cd0:	01067380 	.word	0x01067380
 8003cd4:	011a499f 	.word	0x011a499f
 8003cd8:	01312cff 	.word	0x01312cff
 8003cdc:	014ca43f 	.word	0x014ca43f
 8003ce0:	016e3600 	.word	0x016e3600
 8003ce4:	01a6ab1f 	.word	0x01a6ab1f
 8003ce8:	01e84800 	.word	0x01e84800

08003cec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f043 0201 	orr.w	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d115      	bne.n	8003d7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d5e:	2001      	movs	r0, #1
 8003d60:	f7fd fb62 	bl	8001428 <HAL_Delay>
      ms++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f001 fa45 	bl	80051fa <USB_GetMode>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d01e      	beq.n	8003db4 <USB_SetCurrentMode+0x84>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b31      	cmp	r3, #49	; 0x31
 8003d7a:	d9f0      	bls.n	8003d5e <USB_SetCurrentMode+0x2e>
 8003d7c:	e01a      	b.n	8003db4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d115      	bne.n	8003db0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d90:	2001      	movs	r0, #1
 8003d92:	f7fd fb49 	bl	8001428 <HAL_Delay>
      ms++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f001 fa2c 	bl	80051fa <USB_GetMode>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <USB_SetCurrentMode+0x84>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b31      	cmp	r3, #49	; 0x31
 8003dac:	d9f0      	bls.n	8003d90 <USB_SetCurrentMode+0x60>
 8003dae:	e001      	b.n	8003db4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e005      	b.n	8003dc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b32      	cmp	r3, #50	; 0x32
 8003db8:	d101      	bne.n	8003dbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dc8:	b084      	sub	sp, #16
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	e009      	b.n	8003dfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	3340      	adds	r3, #64	; 0x40
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	2200      	movs	r2, #0
 8003df4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b0e      	cmp	r3, #14
 8003e00:	d9f2      	bls.n	8003de8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d11c      	bne.n	8003e42 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e16:	f043 0302 	orr.w	r3, r3, #2
 8003e1a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e40:	e00b      	b.n	8003e5a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e60:	461a      	mov	r2, r3
 8003e62:	2300      	movs	r3, #0
 8003e64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	461a      	mov	r2, r3
 8003e76:	680b      	ldr	r3, [r1, #0]
 8003e78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10c      	bne.n	8003e9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e86:	2100      	movs	r1, #0
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f965 	bl	8004158 <USB_SetDevSpeed>
 8003e8e:	e008      	b.n	8003ea2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e90:	2101      	movs	r1, #1
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f960 	bl	8004158 <USB_SetDevSpeed>
 8003e98:	e003      	b.n	8003ea2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f95b 	bl	8004158 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ea2:	2110      	movs	r1, #16
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f8f3 	bl	8004090 <USB_FlushTxFifo>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f91f 	bl	80040f8 <USB_FlushRxFifo>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2300      	movs	r3, #0
 8003eda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ee8:	2300      	movs	r3, #0
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	e043      	b.n	8003f76 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f04:	d118      	bne.n	8003f38 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	e013      	b.n	8003f4a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e008      	b.n	8003f4a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	461a      	mov	r2, r3
 8003f46:	2300      	movs	r3, #0
 8003f48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f56:	461a      	mov	r2, r3
 8003f58:	2300      	movs	r3, #0
 8003f5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	3301      	adds	r3, #1
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d3b7      	bcc.n	8003eee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	e043      	b.n	800400c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f9a:	d118      	bne.n	8003fce <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e013      	b.n	8003fe0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	e008      	b.n	8003fe0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004004:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3301      	adds	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3b7      	bcc.n	8003f84 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004026:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004034:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f043 0210 	orr.w	r2, r3, #16
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <USB_DevInit+0x2c4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f043 0208 	orr.w	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004068:	2b01      	cmp	r3, #1
 800406a:	d107      	bne.n	800407c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800407c:	7dfb      	ldrb	r3, [r7, #23]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004088:	b004      	add	sp, #16
 800408a:	4770      	bx	lr
 800408c:	803c3800 	.word	0x803c3800

08004090 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3301      	adds	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <USB_FlushTxFifo+0x64>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d901      	bls.n	80040b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e01b      	b.n	80040e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	daf2      	bge.n	800409e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	019b      	lsls	r3, r3, #6
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3301      	adds	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <USB_FlushTxFifo+0x64>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e006      	b.n	80040e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d0f0      	beq.n	80040c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	00030d40 	.word	0x00030d40

080040f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3301      	adds	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a11      	ldr	r2, [pc, #68]	; (8004154 <USB_FlushRxFifo+0x5c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e018      	b.n	8004148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	daf2      	bge.n	8004104 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2210      	movs	r2, #16
 8004126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3301      	adds	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4a08      	ldr	r2, [pc, #32]	; (8004154 <USB_FlushRxFifo+0x5c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e006      	b.n	8004148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b10      	cmp	r3, #16
 8004144:	d0f0      	beq.n	8004128 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	00030d40 	.word	0x00030d40

08004158 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	68f9      	ldr	r1, [r7, #12]
 8004174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004178:	4313      	orrs	r3, r2
 800417a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800418a:	b480      	push	{r7}
 800418c:	b087      	sub	sp, #28
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0306 	and.w	r3, r3, #6
 80041a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80041aa:	2300      	movs	r3, #0
 80041ac:	75fb      	strb	r3, [r7, #23]
 80041ae:	e00a      	b.n	80041c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d002      	beq.n	80041bc <USB_GetDevSpeed+0x32>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b06      	cmp	r3, #6
 80041ba:	d102      	bne.n	80041c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80041bc:	2302      	movs	r3, #2
 80041be:	75fb      	strb	r3, [r7, #23]
 80041c0:	e001      	b.n	80041c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80041c2:	230f      	movs	r3, #15
 80041c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	785b      	ldrb	r3, [r3, #1]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d13a      	bne.n	8004266 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	2101      	movs	r1, #1
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	b29b      	uxth	r3, r3
 8004208:	68f9      	ldr	r1, [r7, #12]
 800420a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800420e:	4313      	orrs	r3, r2
 8004210:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d155      	bne.n	80042d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	791b      	ldrb	r3, [r3, #4]
 8004242:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004244:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	059b      	lsls	r3, r3, #22
 800424a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800424c:	4313      	orrs	r3, r2
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	e036      	b.n	80042d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	2101      	movs	r1, #1
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004284:	4313      	orrs	r3, r2
 8004286:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d11a      	bne.n	80042d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	791b      	ldrb	r3, [r3, #4]
 80042b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80042ba:	430b      	orrs	r3, r1
 80042bc:	4313      	orrs	r3, r2
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d161      	bne.n	80043c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004316:	d11f      	bne.n	8004358 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	0151      	lsls	r1, r2, #5
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	440a      	add	r2, r1
 800432e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004332:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004336:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	440a      	add	r2, r1
 800434e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004356:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	b29b      	uxth	r3, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	68f9      	ldr	r1, [r7, #12]
 8004374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004378:	4013      	ands	r3, r2
 800437a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	2101      	movs	r1, #1
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	b29b      	uxth	r3, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800439c:	4013      	ands	r3, r2
 800439e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	0159      	lsls	r1, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	440b      	add	r3, r1
 80043b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ba:	4619      	mov	r1, r3
 80043bc:	4b35      	ldr	r3, [pc, #212]	; (8004494 <USB_DeactivateEndpoint+0x1b0>)
 80043be:	4013      	ands	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
 80043c2:	e060      	b.n	8004486 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043da:	d11f      	bne.n	800441c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	015a      	lsls	r2, r3, #5
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	0151      	lsls	r1, r2, #5
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	440a      	add	r2, r1
 80043f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800441a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	041b      	lsls	r3, r3, #16
 8004434:	43db      	mvns	r3, r3
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800443c:	4013      	ands	r3, r2
 800443e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	041b      	lsls	r3, r3, #16
 8004458:	43db      	mvns	r3, r3
 800445a:	68f9      	ldr	r1, [r7, #12]
 800445c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004460:	4013      	ands	r3, r2
 8004462:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	0159      	lsls	r1, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	440b      	add	r3, r1
 800447a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447e:	4619      	mov	r1, r3
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <USB_DeactivateEndpoint+0x1b4>)
 8004482:	4013      	ands	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	ec337800 	.word	0xec337800
 8004498:	eff37800 	.word	0xeff37800

0800449c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	f040 815c 	bne.w	8004776 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d132      	bne.n	800452c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004508:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	0151      	lsls	r1, r2, #5
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	440a      	add	r2, r1
 8004520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004524:	0cdb      	lsrs	r3, r3, #19
 8004526:	04db      	lsls	r3, r3, #19
 8004528:	6113      	str	r3, [r2, #16]
 800452a:	e074      	b.n	8004616 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004546:	0cdb      	lsrs	r3, r3, #19
 8004548:	04db      	lsls	r3, r3, #19
 800454a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	0151      	lsls	r1, r2, #5
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	440a      	add	r2, r1
 8004562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004566:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800456a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800456e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	6999      	ldr	r1, [r3, #24]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	440b      	add	r3, r1
 8004588:	1e59      	subs	r1, r3, #1
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004592:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004594:	4b9d      	ldr	r3, [pc, #628]	; (800480c <USB_EPStartXfer+0x370>)
 8004596:	400b      	ands	r3, r1
 8004598:	69b9      	ldr	r1, [r7, #24]
 800459a:	0148      	lsls	r0, r1, #5
 800459c:	69f9      	ldr	r1, [r7, #28]
 800459e:	4401      	add	r1, r0
 80045a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045a4:	4313      	orrs	r3, r2
 80045a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045be:	69b9      	ldr	r1, [r7, #24]
 80045c0:	0148      	lsls	r0, r1, #5
 80045c2:	69f9      	ldr	r1, [r7, #28]
 80045c4:	4401      	add	r1, r0
 80045c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045ca:	4313      	orrs	r3, r2
 80045cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	791b      	ldrb	r3, [r3, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d11f      	bne.n	8004616 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	0151      	lsls	r1, r2, #5
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	440a      	add	r2, r1
 80045ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004614:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d14b      	bne.n	80046b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	461a      	mov	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	791b      	ldrb	r3, [r3, #4]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d128      	bne.n	8004692 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d110      	bne.n	8004672 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	440a      	add	r2, r1
 8004666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	e00f      	b.n	8004692 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	0151      	lsls	r1, r2, #5
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	440a      	add	r2, r1
 8004688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004690:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	0151      	lsls	r1, r2, #5
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	440a      	add	r2, r1
 80046a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e133      	b.n	800491c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	791b      	ldrb	r3, [r3, #4]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d015      	beq.n	8004708 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 811b 	beq.w	800491c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	69f9      	ldr	r1, [r7, #28]
 80046fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004702:	4313      	orrs	r3, r2
 8004704:	634b      	str	r3, [r1, #52]	; 0x34
 8004706:	e109      	b.n	800491c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d110      	bne.n	800473a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004732:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e00f      	b.n	800475a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	440a      	add	r2, r1
 8004750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6919      	ldr	r1, [r3, #16]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	b298      	uxth	r0, r3
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	4603      	mov	r3, r0
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fade 	bl	8004d30 <USB_WritePacket>
 8004774:	e0d2      	b.n	800491c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	0151      	lsls	r1, r2, #5
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	440a      	add	r2, r1
 800478c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004790:	0cdb      	lsrs	r3, r3, #19
 8004792:	04db      	lsls	r3, r3, #19
 8004794:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	0151      	lsls	r1, r2, #5
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	440a      	add	r2, r1
 80047ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d126      	bne.n	8004810 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d8:	69b9      	ldr	r1, [r7, #24]
 80047da:	0148      	lsls	r0, r1, #5
 80047dc:	69f9      	ldr	r1, [r7, #28]
 80047de:	4401      	add	r1, r0
 80047e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047e4:	4313      	orrs	r3, r2
 80047e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	0151      	lsls	r1, r2, #5
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	440a      	add	r2, r1
 80047fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004806:	6113      	str	r3, [r2, #16]
 8004808:	e03a      	b.n	8004880 <USB_EPStartXfer+0x3e4>
 800480a:	bf00      	nop
 800480c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	699a      	ldr	r2, [r3, #24]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4413      	add	r3, r2
 800481a:	1e5a      	subs	r2, r3, #1
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	8afa      	ldrh	r2, [r7, #22]
 800482c:	fb03 f202 	mul.w	r2, r3, r2
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	8afb      	ldrh	r3, [r7, #22]
 8004844:	04d9      	lsls	r1, r3, #19
 8004846:	4b38      	ldr	r3, [pc, #224]	; (8004928 <USB_EPStartXfer+0x48c>)
 8004848:	400b      	ands	r3, r1
 800484a:	69b9      	ldr	r1, [r7, #24]
 800484c:	0148      	lsls	r0, r1, #5
 800484e:	69f9      	ldr	r1, [r7, #28]
 8004850:	4401      	add	r1, r0
 8004852:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004856:	4313      	orrs	r3, r2
 8004858:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004870:	69b9      	ldr	r1, [r7, #24]
 8004872:	0148      	lsls	r0, r1, #5
 8004874:	69f9      	ldr	r1, [r7, #28]
 8004876:	4401      	add	r1, r0
 8004878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800487c:	4313      	orrs	r3, r2
 800487e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d10d      	bne.n	80048a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	6919      	ldr	r1, [r3, #16]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	460a      	mov	r2, r1
 80048a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	791b      	ldrb	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d128      	bne.n	80048fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d110      	bne.n	80048dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e00f      	b.n	80048fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	440a      	add	r2, r1
 8004912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004916:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800491a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3720      	adds	r7, #32
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	1ff80000 	.word	0x1ff80000

0800492c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	4613      	mov	r3, r2
 8004938:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b01      	cmp	r3, #1
 800494a:	f040 80ce 	bne.w	8004aea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d132      	bne.n	80049bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	440a      	add	r2, r1
 800496c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004998:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b4:	0cdb      	lsrs	r3, r3, #19
 80049b6:	04db      	lsls	r3, r3, #19
 80049b8:	6113      	str	r3, [r2, #16]
 80049ba:	e04e      	b.n	8004a5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d6:	0cdb      	lsrs	r3, r3, #19
 80049d8:	04db      	lsls	r3, r3, #19
 80049da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	699a      	ldr	r2, [r3, #24]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d903      	bls.n	8004a14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4a:	6939      	ldr	r1, [r7, #16]
 8004a4c:	0148      	lsls	r0, r1, #5
 8004a4e:	6979      	ldr	r1, [r7, #20]
 8004a50:	4401      	add	r1, r0
 8004a52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a56:	4313      	orrs	r3, r2
 8004a58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d11e      	bne.n	8004a9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a74:	461a      	mov	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e097      	b.n	8004bce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	0151      	lsls	r1, r2, #5
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	440a      	add	r2, r1
 8004ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004abc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8083 	beq.w	8004bce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	2101      	movs	r1, #1
 8004ada:	fa01 f303 	lsl.w	r3, r1, r3
 8004ade:	6979      	ldr	r1, [r7, #20]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	634b      	str	r3, [r1, #52]	; 0x34
 8004ae8:	e071      	b.n	8004bce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b04:	0cdb      	lsrs	r3, r3, #19
 8004b06:	04db      	lsls	r3, r3, #19
 8004b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	0151      	lsls	r1, r2, #5
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	440a      	add	r2, r1
 8004b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7c:	6939      	ldr	r1, [r7, #16]
 8004b7e:	0148      	lsls	r0, r1, #5
 8004b80:	6979      	ldr	r1, [r7, #20]
 8004b82:	4401      	add	r1, r0
 8004b84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d10d      	bne.n	8004bae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6919      	ldr	r1, [r3, #16]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	460a      	mov	r2, r1
 8004bac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	0151      	lsls	r1, r2, #5
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	440a      	add	r2, r1
 8004bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d14a      	bne.n	8004c90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c12:	f040 8086 	bne.w	8004d22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	7812      	ldrb	r2, [r2, #0]
 8004c4e:	0151      	lsls	r1, r2, #5
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	440a      	add	r2, r1
 8004c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3301      	adds	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d902      	bls.n	8004c74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
          break;
 8004c72:	e056      	b.n	8004d22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c8c:	d0e7      	beq.n	8004c5e <USB_EPStopXfer+0x82>
 8004c8e:	e048      	b.n	8004d22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca8:	d13b      	bne.n	8004d22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	7812      	ldrb	r2, [r2, #0]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ccc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	7812      	ldrb	r2, [r2, #0]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d902      	bls.n	8004d08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
          break;
 8004d06:	e00c      	b.n	8004d22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d20:	d0e7      	beq.n	8004cf2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b089      	sub	sp, #36	; 0x24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	460b      	mov	r3, r1
 8004d40:	71fb      	strb	r3, [r7, #7]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d123      	bne.n	8004d9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d56:	88bb      	ldrh	r3, [r7, #4]
 8004d58:	3303      	adds	r3, #3
 8004d5a:	089b      	lsrs	r3, r3, #2
 8004d5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e018      	b.n	8004d96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	031a      	lsls	r2, r3, #12
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d70:	461a      	mov	r2, r3
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	3301      	adds	r3, #1
 8004d82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3301      	adds	r3, #1
 8004d88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d3e2      	bcc.n	8004d64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3724      	adds	r7, #36	; 0x24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b08b      	sub	sp, #44	; 0x2c
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	089b      	lsrs	r3, r3, #2
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	f003 0303 	and.w	r3, r3, #3
 8004dd0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	e014      	b.n	8004e02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	3301      	adds	r3, #1
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	3301      	adds	r3, #1
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	3301      	adds	r3, #1
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	3301      	adds	r3, #1
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	623b      	str	r3, [r7, #32]
 8004e02:	6a3a      	ldr	r2, [r7, #32]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d3e6      	bcc.n	8004dd8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e0a:	8bfb      	ldrh	r3, [r7, #30]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01e      	beq.n	8004e4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f107 0310 	add.w	r3, r7, #16
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	701a      	strb	r2, [r3, #0]
      i++;
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	3301      	adds	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e42:	8bfb      	ldrh	r3, [r7, #30]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e48:	8bfb      	ldrh	r3, [r7, #30]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ea      	bne.n	8004e24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	372c      	adds	r7, #44	; 0x2c
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d12c      	bne.n	8004ed2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	db12      	blt.n	8004eb0 <USB_EPSetStall+0x54>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00f      	beq.n	8004eb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e02b      	b.n	8004f2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	db12      	blt.n	8004f0a <USB_EPSetStall+0xae>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00f      	beq.n	8004f0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d128      	bne.n	8004fa6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	791b      	ldrb	r3, [r3, #4]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d003      	beq.n	8004f84 <USB_EPClearStall+0x4c>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	791b      	ldrb	r3, [r3, #4]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d138      	bne.n	8004ff6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	0151      	lsls	r1, r2, #5
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	440a      	add	r2, r1
 8004f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	e027      	b.n	8004ff6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	791b      	ldrb	r3, [r3, #4]
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d003      	beq.n	8004fd6 <USB_EPClearStall+0x9e>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	791b      	ldrb	r3, [r3, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d10f      	bne.n	8004ff6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005022:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005026:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800507e:	f023 0302 	bic.w	r3, r3, #2
 8005082:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80050ac:	f023 0303 	bic.w	r3, r3, #3
 80050b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c0:	f043 0302 	orr.w	r3, r3, #2
 80050c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4013      	ands	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050ec:	68fb      	ldr	r3, [r7, #12]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	4013      	ands	r3, r2
 800511c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	0c1b      	lsrs	r3, r3, #16
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	4013      	ands	r3, r2
 8005150:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	b29b      	uxth	r3, r3
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	4013      	ands	r3, r2
 800518e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005190:	68bb      	ldr	r3, [r7, #8]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800519e:	b480      	push	{r7}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	460b      	mov	r3, r1
 80051a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	fa22 f303 	lsr.w	r3, r2, r3
 80051ce:	01db      	lsls	r3, r3, #7
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4013      	ands	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051ec:	68bb      	ldr	r3, [r7, #8]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f003 0301 	and.w	r3, r3, #1
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005216:	b480      	push	{r7}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005230:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	460b      	mov	r3, r1
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	333c      	adds	r3, #60	; 0x3c
 8005272:	3304      	adds	r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4a26      	ldr	r2, [pc, #152]	; (8005314 <USB_EP0_OutStart+0xb8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d90a      	bls.n	8005296 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800528c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005290:	d101      	bne.n	8005296 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	e037      	b.n	8005306 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	461a      	mov	r2, r3
 800529e:	2300      	movs	r3, #0
 80052a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c4:	f043 0318 	orr.w	r3, r3, #24
 80052c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052de:	7afb      	ldrb	r3, [r7, #11]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d10f      	bne.n	8005304 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005302:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	4f54300a 	.word	0x4f54300a

08005318 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4a13      	ldr	r2, [pc, #76]	; (800537c <USB_CoreReset+0x64>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e01b      	b.n	800536e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	daf2      	bge.n	8005324 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f043 0201 	orr.w	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3301      	adds	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <USB_CoreReset+0x64>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d901      	bls.n	8005360 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e006      	b.n	800536e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b01      	cmp	r3, #1
 800536a:	d0f0      	beq.n	800534e <USB_CoreReset+0x36>

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	00030d40 	.word	0x00030d40

08005380 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800538c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005390:	f002 fc94 	bl	8007cbc <USBD_static_malloc>
 8005394:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	32b0      	adds	r2, #176	; 0xb0
 80053a6:	2100      	movs	r1, #0
 80053a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80053ac:	2302      	movs	r3, #2
 80053ae:	e0d4      	b.n	800555a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80053b0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80053b4:	2100      	movs	r1, #0
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f002 fd12 	bl	8007de0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	32b0      	adds	r2, #176	; 0xb0
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	32b0      	adds	r2, #176	; 0xb0
 80053d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	7c1b      	ldrb	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d138      	bne.n	800545a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80053e8:	4b5e      	ldr	r3, [pc, #376]	; (8005564 <USBD_CDC_Init+0x1e4>)
 80053ea:	7819      	ldrb	r1, [r3, #0]
 80053ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f0:	2202      	movs	r2, #2
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f002 fb3f 	bl	8007a76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80053f8:	4b5a      	ldr	r3, [pc, #360]	; (8005564 <USBD_CDC_Init+0x1e4>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	f003 020f 	and.w	r2, r3, #15
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	3324      	adds	r3, #36	; 0x24
 800540e:	2201      	movs	r2, #1
 8005410:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005412:	4b55      	ldr	r3, [pc, #340]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005414:	7819      	ldrb	r1, [r3, #0]
 8005416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800541a:	2202      	movs	r2, #2
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f002 fb2a 	bl	8007a76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005422:	4b51      	ldr	r3, [pc, #324]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	f003 020f 	and.w	r2, r3, #15
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800543a:	2201      	movs	r2, #1
 800543c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800543e:	4b4b      	ldr	r3, [pc, #300]	; (800556c <USBD_CDC_Init+0x1ec>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	f003 020f 	and.w	r2, r3, #15
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	3326      	adds	r3, #38	; 0x26
 8005454:	2210      	movs	r2, #16
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	e035      	b.n	80054c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800545a:	4b42      	ldr	r3, [pc, #264]	; (8005564 <USBD_CDC_Init+0x1e4>)
 800545c:	7819      	ldrb	r1, [r3, #0]
 800545e:	2340      	movs	r3, #64	; 0x40
 8005460:	2202      	movs	r2, #2
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f002 fb07 	bl	8007a76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005468:	4b3e      	ldr	r3, [pc, #248]	; (8005564 <USBD_CDC_Init+0x1e4>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f003 020f 	and.w	r2, r3, #15
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	3324      	adds	r3, #36	; 0x24
 800547e:	2201      	movs	r2, #1
 8005480:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005482:	4b39      	ldr	r3, [pc, #228]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005484:	7819      	ldrb	r1, [r3, #0]
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	2202      	movs	r2, #2
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f002 faf3 	bl	8007a76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005490:	4b35      	ldr	r3, [pc, #212]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	f003 020f 	and.w	r2, r3, #15
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80054a8:	2201      	movs	r2, #1
 80054aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80054ac:	4b2f      	ldr	r3, [pc, #188]	; (800556c <USBD_CDC_Init+0x1ec>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	f003 020f 	and.w	r2, r3, #15
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	3326      	adds	r3, #38	; 0x26
 80054c2:	2210      	movs	r2, #16
 80054c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054c6:	4b29      	ldr	r3, [pc, #164]	; (800556c <USBD_CDC_Init+0x1ec>)
 80054c8:	7819      	ldrb	r1, [r3, #0]
 80054ca:	2308      	movs	r3, #8
 80054cc:	2203      	movs	r2, #3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f002 fad1 	bl	8007a76 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80054d4:	4b25      	ldr	r3, [pc, #148]	; (800556c <USBD_CDC_Init+0x1ec>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f003 020f 	and.w	r2, r3, #15
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	3324      	adds	r3, #36	; 0x24
 80054ea:	2201      	movs	r2, #1
 80054ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	33b0      	adds	r3, #176	; 0xb0
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005524:	2302      	movs	r3, #2
 8005526:	e018      	b.n	800555a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	7c1b      	ldrb	r3, [r3, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005532:	7819      	ldrb	r1, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800553a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f002 fb88 	bl	8007c54 <USBD_LL_PrepareReceive>
 8005544:	e008      	b.n	8005558 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <USBD_CDC_Init+0x1e8>)
 8005548:	7819      	ldrb	r1, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005550:	2340      	movs	r3, #64	; 0x40
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f002 fb7e 	bl	8007c54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000097 	.word	0x20000097
 8005568:	20000098 	.word	0x20000098
 800556c:	20000099 	.word	0x20000099

08005570 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800557c:	4b3a      	ldr	r3, [pc, #232]	; (8005668 <USBD_CDC_DeInit+0xf8>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f002 fa9d 	bl	8007ac2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005588:	4b37      	ldr	r3, [pc, #220]	; (8005668 <USBD_CDC_DeInit+0xf8>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	f003 020f 	and.w	r2, r3, #15
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	3324      	adds	r3, #36	; 0x24
 800559e:	2200      	movs	r2, #0
 80055a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80055a2:	4b32      	ldr	r3, [pc, #200]	; (800566c <USBD_CDC_DeInit+0xfc>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	4619      	mov	r1, r3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f002 fa8a 	bl	8007ac2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80055ae:	4b2f      	ldr	r3, [pc, #188]	; (800566c <USBD_CDC_DeInit+0xfc>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	f003 020f 	and.w	r2, r3, #15
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055c6:	2200      	movs	r2, #0
 80055c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80055ca:	4b29      	ldr	r3, [pc, #164]	; (8005670 <USBD_CDC_DeInit+0x100>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f002 fa76 	bl	8007ac2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80055d6:	4b26      	ldr	r3, [pc, #152]	; (8005670 <USBD_CDC_DeInit+0x100>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	f003 020f 	and.w	r2, r3, #15
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	3324      	adds	r3, #36	; 0x24
 80055ec:	2200      	movs	r2, #0
 80055ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80055f0:	4b1f      	ldr	r3, [pc, #124]	; (8005670 <USBD_CDC_DeInit+0x100>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f003 020f 	and.w	r2, r3, #15
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	3326      	adds	r3, #38	; 0x26
 8005606:	2200      	movs	r2, #0
 8005608:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	32b0      	adds	r2, #176	; 0xb0
 8005614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01f      	beq.n	800565c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	33b0      	adds	r3, #176	; 0xb0
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	32b0      	adds	r2, #176	; 0xb0
 800563a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563e:	4618      	mov	r0, r3
 8005640:	f002 fb4a 	bl	8007cd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	32b0      	adds	r2, #176	; 0xb0
 800564e:	2100      	movs	r1, #0
 8005650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000097 	.word	0x20000097
 800566c:	20000098 	.word	0x20000098
 8005670:	20000099 	.word	0x20000099

08005674 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	32b0      	adds	r2, #176	; 0xb0
 8005688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e0bf      	b.n	8005824 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d050      	beq.n	8005752 <USBD_CDC_Setup+0xde>
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	f040 80af 	bne.w	8005814 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	88db      	ldrh	r3, [r3, #6]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d03a      	beq.n	8005734 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b25b      	sxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	da1b      	bge.n	8005700 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	33b0      	adds	r3, #176	; 0xb0
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80056de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	88d2      	ldrh	r2, [r2, #6]
 80056e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	88db      	ldrh	r3, [r3, #6]
 80056ea:	2b07      	cmp	r3, #7
 80056ec:	bf28      	it	cs
 80056ee:	2307      	movcs	r3, #7
 80056f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	89fa      	ldrh	r2, [r7, #14]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 fd89 	bl	8007210 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80056fe:	e090      	b.n	8005822 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	785a      	ldrb	r2, [r3, #1]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	88db      	ldrh	r3, [r3, #6]
 800570e:	2b3f      	cmp	r3, #63	; 0x3f
 8005710:	d803      	bhi.n	800571a <USBD_CDC_Setup+0xa6>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	88db      	ldrh	r3, [r3, #6]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	e000      	b.n	800571c <USBD_CDC_Setup+0xa8>
 800571a:	2240      	movs	r2, #64	; 0x40
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005722:	6939      	ldr	r1, [r7, #16]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800572a:	461a      	mov	r2, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 fd9b 	bl	8007268 <USBD_CtlPrepareRx>
      break;
 8005732:	e076      	b.n	8005822 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	33b0      	adds	r3, #176	; 0xb0
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	7850      	ldrb	r0, [r2, #1]
 800574a:	2200      	movs	r2, #0
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	4798      	blx	r3
      break;
 8005750:	e067      	b.n	8005822 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	785b      	ldrb	r3, [r3, #1]
 8005756:	2b0b      	cmp	r3, #11
 8005758:	d851      	bhi.n	80057fe <USBD_CDC_Setup+0x18a>
 800575a:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <USBD_CDC_Setup+0xec>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	08005791 	.word	0x08005791
 8005764:	0800580d 	.word	0x0800580d
 8005768:	080057ff 	.word	0x080057ff
 800576c:	080057ff 	.word	0x080057ff
 8005770:	080057ff 	.word	0x080057ff
 8005774:	080057ff 	.word	0x080057ff
 8005778:	080057ff 	.word	0x080057ff
 800577c:	080057ff 	.word	0x080057ff
 8005780:	080057ff 	.word	0x080057ff
 8005784:	080057ff 	.word	0x080057ff
 8005788:	080057bb 	.word	0x080057bb
 800578c:	080057e5 	.word	0x080057e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b03      	cmp	r3, #3
 800579a:	d107      	bne.n	80057ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800579c:	f107 030a 	add.w	r3, r7, #10
 80057a0:	2202      	movs	r2, #2
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 fd33 	bl	8007210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057aa:	e032      	b.n	8005812 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fcbd 	bl	800712e <USBD_CtlError>
            ret = USBD_FAIL;
 80057b4:	2303      	movs	r3, #3
 80057b6:	75fb      	strb	r3, [r7, #23]
          break;
 80057b8:	e02b      	b.n	8005812 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d107      	bne.n	80057d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80057c6:	f107 030d 	add.w	r3, r7, #13
 80057ca:	2201      	movs	r2, #1
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f001 fd1e 	bl	8007210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057d4:	e01d      	b.n	8005812 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fca8 	bl	800712e <USBD_CtlError>
            ret = USBD_FAIL;
 80057de:	2303      	movs	r3, #3
 80057e0:	75fb      	strb	r3, [r7, #23]
          break;
 80057e2:	e016      	b.n	8005812 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d00f      	beq.n	8005810 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f001 fc9b 	bl	800712e <USBD_CtlError>
            ret = USBD_FAIL;
 80057f8:	2303      	movs	r3, #3
 80057fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80057fc:	e008      	b.n	8005810 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 fc94 	bl	800712e <USBD_CtlError>
          ret = USBD_FAIL;
 8005806:	2303      	movs	r3, #3
 8005808:	75fb      	strb	r3, [r7, #23]
          break;
 800580a:	e002      	b.n	8005812 <USBD_CDC_Setup+0x19e>
          break;
 800580c:	bf00      	nop
 800580e:	e008      	b.n	8005822 <USBD_CDC_Setup+0x1ae>
          break;
 8005810:	bf00      	nop
      }
      break;
 8005812:	e006      	b.n	8005822 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f001 fc89 	bl	800712e <USBD_CtlError>
      ret = USBD_FAIL;
 800581c:	2303      	movs	r3, #3
 800581e:	75fb      	strb	r3, [r7, #23]
      break;
 8005820:	bf00      	nop
  }

  return (uint8_t)ret;
 8005822:	7dfb      	ldrb	r3, [r7, #23]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800583e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	32b0      	adds	r2, #176	; 0xb0
 800584a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005852:	2303      	movs	r3, #3
 8005854:	e065      	b.n	8005922 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	32b0      	adds	r2, #176	; 0xb0
 8005860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005864:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	f003 020f 	and.w	r2, r3, #15
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	3318      	adds	r3, #24
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d02f      	beq.n	80058e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	f003 020f 	and.w	r2, r3, #15
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	3318      	adds	r3, #24
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	f003 010f 	and.w	r1, r3, #15
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	460b      	mov	r3, r1
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	440b      	add	r3, r1
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4403      	add	r3, r0
 80058a8:	3348      	adds	r3, #72	; 0x48
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80058b0:	fb01 f303 	mul.w	r3, r1, r3
 80058b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d112      	bne.n	80058e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	f003 020f 	and.w	r2, r3, #15
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	3318      	adds	r3, #24
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80058d2:	78f9      	ldrb	r1, [r7, #3]
 80058d4:	2300      	movs	r3, #0
 80058d6:	2200      	movs	r2, #0
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f002 f99a 	bl	8007c12 <USBD_LL_Transmit>
 80058de:	e01f      	b.n	8005920 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	33b0      	adds	r3, #176	; 0xb0
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d010      	beq.n	8005920 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	33b0      	adds	r3, #176	; 0xb0
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800591c:	78fa      	ldrb	r2, [r7, #3]
 800591e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	32b0      	adds	r2, #176	; 0xb0
 8005940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005944:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	32b0      	adds	r2, #176	; 0xb0
 8005950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005958:	2303      	movs	r3, #3
 800595a:	e01a      	b.n	8005992 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f002 f998 	bl	8007c96 <USBD_LL_GetRxDataSize>
 8005966:	4602      	mov	r2, r0
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	33b0      	adds	r3, #176	; 0xb0
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800598c:	4611      	mov	r1, r2
 800598e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	32b0      	adds	r2, #176	; 0xb0
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e025      	b.n	8005a08 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	33b0      	adds	r3, #176	; 0xb0
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01a      	beq.n	8005a06 <USBD_CDC_EP0_RxReady+0x6c>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80059d6:	2bff      	cmp	r3, #255	; 0xff
 80059d8:	d015      	beq.n	8005a06 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	33b0      	adds	r3, #176	; 0xb0
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80059f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059fa:	b292      	uxth	r2, r2
 80059fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	22ff      	movs	r2, #255	; 0xff
 8005a02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a18:	2182      	movs	r1, #130	; 0x82
 8005a1a:	4818      	ldr	r0, [pc, #96]	; (8005a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a1c:	f000 fd4f 	bl	80064be <USBD_GetEpDesc>
 8005a20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a22:	2101      	movs	r1, #1
 8005a24:	4815      	ldr	r0, [pc, #84]	; (8005a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a26:	f000 fd4a 	bl	80064be <USBD_GetEpDesc>
 8005a2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a2c:	2181      	movs	r1, #129	; 0x81
 8005a2e:	4813      	ldr	r0, [pc, #76]	; (8005a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a30:	f000 fd45 	bl	80064be <USBD_GetEpDesc>
 8005a34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2210      	movs	r2, #16
 8005a40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d006      	beq.n	8005a56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a50:	711a      	strb	r2, [r3, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d006      	beq.n	8005a6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a64:	711a      	strb	r2, [r3, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2243      	movs	r2, #67	; 0x43
 8005a6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a70:	4b02      	ldr	r3, [pc, #8]	; (8005a7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000054 	.word	0x20000054

08005a80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a88:	2182      	movs	r1, #130	; 0x82
 8005a8a:	4818      	ldr	r0, [pc, #96]	; (8005aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a8c:	f000 fd17 	bl	80064be <USBD_GetEpDesc>
 8005a90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a92:	2101      	movs	r1, #1
 8005a94:	4815      	ldr	r0, [pc, #84]	; (8005aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a96:	f000 fd12 	bl	80064be <USBD_GetEpDesc>
 8005a9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a9c:	2181      	movs	r1, #129	; 0x81
 8005a9e:	4813      	ldr	r0, [pc, #76]	; (8005aec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005aa0:	f000 fd0d 	bl	80064be <USBD_GetEpDesc>
 8005aa4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2210      	movs	r2, #16
 8005ab0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d006      	beq.n	8005ac6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2200      	movs	r2, #0
 8005abc:	711a      	strb	r2, [r3, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f042 0202 	orr.w	r2, r2, #2
 8005ac4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d006      	beq.n	8005ada <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	711a      	strb	r2, [r3, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f042 0202 	orr.w	r2, r2, #2
 8005ad8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2243      	movs	r2, #67	; 0x43
 8005ade:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ae0:	4b02      	ldr	r3, [pc, #8]	; (8005aec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000054 	.word	0x20000054

08005af0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005af8:	2182      	movs	r1, #130	; 0x82
 8005afa:	4818      	ldr	r0, [pc, #96]	; (8005b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005afc:	f000 fcdf 	bl	80064be <USBD_GetEpDesc>
 8005b00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b02:	2101      	movs	r1, #1
 8005b04:	4815      	ldr	r0, [pc, #84]	; (8005b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b06:	f000 fcda 	bl	80064be <USBD_GetEpDesc>
 8005b0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b0c:	2181      	movs	r1, #129	; 0x81
 8005b0e:	4813      	ldr	r0, [pc, #76]	; (8005b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b10:	f000 fcd5 	bl	80064be <USBD_GetEpDesc>
 8005b14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2210      	movs	r2, #16
 8005b20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d006      	beq.n	8005b36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b30:	711a      	strb	r2, [r3, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d006      	beq.n	8005b4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b44:	711a      	strb	r2, [r3, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2243      	movs	r2, #67	; 0x43
 8005b4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b50:	4b02      	ldr	r3, [pc, #8]	; (8005b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000054 	.word	0x20000054

08005b60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	220a      	movs	r2, #10
 8005b6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b6e:	4b03      	ldr	r3, [pc, #12]	; (8005b7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	20000010 	.word	0x20000010

08005b80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e009      	b.n	8005ba8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	33b0      	adds	r3, #176	; 0xb0
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	32b0      	adds	r2, #176	; 0xb0
 8005bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e008      	b.n	8005bec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	32b0      	adds	r2, #176	; 0xb0
 8005c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e004      	b.n	8005c26 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	32b0      	adds	r2, #176	; 0xb0
 8005c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	32b0      	adds	r2, #176	; 0xb0
 8005c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e025      	b.n	8005cb2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11f      	bne.n	8005cb0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005c78:	4b10      	ldr	r3, [pc, #64]	; (8005cbc <USBD_CDC_TransmitPacket+0x88>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	f003 020f 	and.w	r2, r3, #15
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4403      	add	r3, r0
 8005c92:	3318      	adds	r3, #24
 8005c94:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005c96:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <USBD_CDC_TransmitPacket+0x88>)
 8005c98:	7819      	ldrb	r1, [r3, #0]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f001 ffb3 	bl	8007c12 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000097 	.word	0x20000097

08005cc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	32b0      	adds	r2, #176	; 0xb0
 8005cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	32b0      	adds	r2, #176	; 0xb0
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e018      	b.n	8005d20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	7c1b      	ldrb	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <USBD_CDC_ReceivePacket+0x68>)
 8005cf8:	7819      	ldrb	r1, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 ffa5 	bl	8007c54 <USBD_LL_PrepareReceive>
 8005d0a:	e008      	b.n	8005d1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <USBD_CDC_ReceivePacket+0x68>)
 8005d0e:	7819      	ldrb	r1, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d16:	2340      	movs	r3, #64	; 0x40
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f001 ff9b 	bl	8007c54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20000098 	.word	0x20000098

08005d2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	4613      	mov	r3, r2
 8005d38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e01f      	b.n	8005d84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	79fa      	ldrb	r2, [r7, #7]
 8005d76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f001 fe15 	bl	80079a8 <USBD_LL_Init>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e025      	b.n	8005df0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	32ae      	adds	r2, #174	; 0xae
 8005db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00f      	beq.n	8005de0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	32ae      	adds	r2, #174	; 0xae
 8005dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	f107 020e 	add.w	r2, r7, #14
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4798      	blx	r3
 8005dd8:	4602      	mov	r2, r0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 fe1d 	bl	8007a40 <USBD_LL_Start>
 8005e06:	4603      	mov	r3, r0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	78fa      	ldrb	r2, [r7, #3]
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4798      	blx	r3
 8005e50:	4603      	mov	r3, r0
 8005e52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	4611      	mov	r1, r2
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e84:	2303      	movs	r3, #3
 8005e86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 f908 	bl	80070ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005eb8:	461a      	mov	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ec6:	f003 031f 	and.w	r3, r3, #31
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d01a      	beq.n	8005f04 <USBD_LL_SetupStage+0x72>
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d822      	bhi.n	8005f18 <USBD_LL_SetupStage+0x86>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <USBD_LL_SetupStage+0x4a>
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d00a      	beq.n	8005ef0 <USBD_LL_SetupStage+0x5e>
 8005eda:	e01d      	b.n	8005f18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fb5f 	bl	80065a8 <USBD_StdDevReq>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]
      break;
 8005eee:	e020      	b.n	8005f32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fbc7 	bl	800668c <USBD_StdItfReq>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
      break;
 8005f02:	e016      	b.n	8005f32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fc29 	bl	8006764 <USBD_StdEPReq>
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]
      break;
 8005f16:	e00c      	b.n	8005f32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fdea 	bl	8007b00 <USBD_LL_StallEP>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f30:	bf00      	nop
  }

  return ret;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	460b      	mov	r3, r1
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f4e:	7afb      	ldrb	r3, [r7, #11]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d16e      	bne.n	8006032 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	f040 8098 	bne.w	8006098 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d913      	bls.n	8005f9c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	1ad2      	subs	r2, r2, r3
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	bf28      	it	cs
 8005f8e:	4613      	movcs	r3, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f001 f984 	bl	80072a2 <USBD_CtlContinueRx>
 8005f9a:	e07d      	b.n	8006098 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d014      	beq.n	8005fd4 <USBD_LL_DataOutStage+0x98>
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d81d      	bhi.n	8005fea <USBD_LL_DataOutStage+0xae>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <USBD_LL_DataOutStage+0x7c>
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d003      	beq.n	8005fbe <USBD_LL_DataOutStage+0x82>
 8005fb6:	e018      	b.n	8005fea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	75bb      	strb	r3, [r7, #22]
            break;
 8005fbc:	e018      	b.n	8005ff0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fa5e 	bl	800648a <USBD_CoreFindIF>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75bb      	strb	r3, [r7, #22]
            break;
 8005fd2:	e00d      	b.n	8005ff0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fa60 	bl	80064a4 <USBD_CoreFindEP>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	75bb      	strb	r3, [r7, #22]
            break;
 8005fe8:	e002      	b.n	8005ff0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	75bb      	strb	r3, [r7, #22]
            break;
 8005fee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ff0:	7dbb      	ldrb	r3, [r7, #22]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d119      	bne.n	800602a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d113      	bne.n	800602a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006002:	7dba      	ldrb	r2, [r7, #22]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	32ae      	adds	r2, #174	; 0xae
 8006008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006012:	7dba      	ldrb	r2, [r7, #22]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800601a:	7dba      	ldrb	r2, [r7, #22]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	32ae      	adds	r2, #174	; 0xae
 8006020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f001 f94a 	bl	80072c4 <USBD_CtlSendStatus>
 8006030:	e032      	b.n	8006098 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006038:	b2db      	uxtb	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fa31 	bl	80064a4 <USBD_CoreFindEP>
 8006042:	4603      	mov	r3, r0
 8006044:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006046:	7dbb      	ldrb	r3, [r7, #22]
 8006048:	2bff      	cmp	r3, #255	; 0xff
 800604a:	d025      	beq.n	8006098 <USBD_LL_DataOutStage+0x15c>
 800604c:	7dbb      	ldrb	r3, [r7, #22]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d122      	bne.n	8006098 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b03      	cmp	r3, #3
 800605c:	d117      	bne.n	800608e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800605e:	7dba      	ldrb	r2, [r7, #22]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	32ae      	adds	r2, #174	; 0xae
 8006064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00f      	beq.n	800608e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800606e:	7dba      	ldrb	r2, [r7, #22]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006076:	7dba      	ldrb	r2, [r7, #22]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	32ae      	adds	r2, #174	; 0xae
 800607c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	7afa      	ldrb	r2, [r7, #11]
 8006084:	4611      	mov	r1, r2
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	4798      	blx	r3
 800608a:	4603      	mov	r3, r0
 800608c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	e000      	b.n	800609a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b086      	sub	sp, #24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	460b      	mov	r3, r1
 80060ac:	607a      	str	r2, [r7, #4]
 80060ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80060b0:	7afb      	ldrb	r3, [r7, #11]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d16f      	bne.n	8006196 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3314      	adds	r3, #20
 80060ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d15a      	bne.n	800617c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d914      	bls.n	80060fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	1ad2      	subs	r2, r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f001 f8ac 	bl	8007246 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060ee:	2300      	movs	r3, #0
 80060f0:	2200      	movs	r2, #0
 80060f2:	2100      	movs	r1, #0
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f001 fdad 	bl	8007c54 <USBD_LL_PrepareReceive>
 80060fa:	e03f      	b.n	800617c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	d11c      	bne.n	8006142 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006110:	429a      	cmp	r2, r3
 8006112:	d316      	bcc.n	8006142 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800611e:	429a      	cmp	r2, r3
 8006120:	d20f      	bcs.n	8006142 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006122:	2200      	movs	r2, #0
 8006124:	2100      	movs	r1, #0
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f001 f88d 	bl	8007246 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006134:	2300      	movs	r3, #0
 8006136:	2200      	movs	r2, #0
 8006138:	2100      	movs	r1, #0
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f001 fd8a 	bl	8007c54 <USBD_LL_PrepareReceive>
 8006140:	e01c      	b.n	800617c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b03      	cmp	r3, #3
 800614c:	d10f      	bne.n	800616e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800616e:	2180      	movs	r1, #128	; 0x80
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f001 fcc5 	bl	8007b00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f001 f8b7 	bl	80072ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d03a      	beq.n	80061fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff fe42 	bl	8005e10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006194:	e032      	b.n	80061fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006196:	7afb      	ldrb	r3, [r7, #11]
 8006198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800619c:	b2db      	uxtb	r3, r3
 800619e:	4619      	mov	r1, r3
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f97f 	bl	80064a4 <USBD_CoreFindEP>
 80061a6:	4603      	mov	r3, r0
 80061a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	2bff      	cmp	r3, #255	; 0xff
 80061ae:	d025      	beq.n	80061fc <USBD_LL_DataInStage+0x15a>
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d122      	bne.n	80061fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d11c      	bne.n	80061fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80061c2:	7dfa      	ldrb	r2, [r7, #23]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	32ae      	adds	r2, #174	; 0xae
 80061c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d014      	beq.n	80061fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80061d2:	7dfa      	ldrb	r2, [r7, #23]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80061da:	7dfa      	ldrb	r2, [r7, #23]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	32ae      	adds	r2, #174	; 0xae
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	7afa      	ldrb	r2, [r7, #11]
 80061e8:	4611      	mov	r1, r2
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	4798      	blx	r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80061f2:	7dbb      	ldrb	r3, [r7, #22]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80061f8:	7dbb      	ldrb	r3, [r7, #22]
 80061fa:	e000      	b.n	80061fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d014      	beq.n	800626c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00e      	beq.n	800626c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6852      	ldr	r2, [r2, #4]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	4611      	mov	r1, r2
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	4798      	blx	r3
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006268:	2303      	movs	r3, #3
 800626a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800626c:	2340      	movs	r3, #64	; 0x40
 800626e:	2200      	movs	r2, #0
 8006270:	2100      	movs	r1, #0
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fbff 	bl	8007a76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2240      	movs	r2, #64	; 0x40
 8006284:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006288:	2340      	movs	r3, #64	; 0x40
 800628a:	2200      	movs	r2, #0
 800628c:	2180      	movs	r1, #128	; 0x80
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 fbf1 	bl	8007a76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2240      	movs	r2, #64	; 0x40
 800629e:	621a      	str	r2, [r3, #32]

  return ret;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	78fa      	ldrb	r2, [r7, #3]
 80062ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2204      	movs	r2, #4
 80062e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b04      	cmp	r3, #4
 8006308:	d106      	bne.n	8006318 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006310:	b2da      	uxtb	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b03      	cmp	r3, #3
 8006338:	d110      	bne.n	800635c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00b      	beq.n	800635c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	32ae      	adds	r2, #174	; 0xae
 800637c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006384:	2303      	movs	r3, #3
 8006386:	e01c      	b.n	80063c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b03      	cmp	r3, #3
 8006392:	d115      	bne.n	80063c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	32ae      	adds	r2, #174	; 0xae
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	32ae      	adds	r2, #174	; 0xae
 80063b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	78fa      	ldrb	r2, [r7, #3]
 80063ba:	4611      	mov	r1, r2
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	32ae      	adds	r2, #174	; 0xae
 80063e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e01c      	b.n	8006426 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d115      	bne.n	8006424 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	32ae      	adds	r2, #174	; 0xae
 8006402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00b      	beq.n	8006424 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	32ae      	adds	r2, #174	; 0xae
 8006416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	78fa      	ldrb	r2, [r7, #3]
 800641e:	4611      	mov	r1, r2
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00e      	beq.n	8006480 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6852      	ldr	r2, [r2, #4]
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	4611      	mov	r1, r2
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800647c:	2303      	movs	r3, #3
 800647e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	460b      	mov	r3, r1
 8006494:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006496:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b086      	sub	sp, #24
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	885b      	ldrh	r3, [r3, #2]
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d920      	bls.n	8006528 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80064ee:	e013      	b.n	8006518 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80064f0:	f107 030a 	add.w	r3, r7, #10
 80064f4:	4619      	mov	r1, r3
 80064f6:	6978      	ldr	r0, [r7, #20]
 80064f8:	f000 f81b 	bl	8006532 <USBD_GetNextDesc>
 80064fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	2b05      	cmp	r3, #5
 8006504:	d108      	bne.n	8006518 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	789b      	ldrb	r3, [r3, #2]
 800650e:	78fa      	ldrb	r2, [r7, #3]
 8006510:	429a      	cmp	r2, r3
 8006512:	d008      	beq.n	8006526 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006514:	2300      	movs	r3, #0
 8006516:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	885b      	ldrh	r3, [r3, #2]
 800651c:	b29a      	uxth	r2, r3
 800651e:	897b      	ldrh	r3, [r7, #10]
 8006520:	429a      	cmp	r2, r3
 8006522:	d8e5      	bhi.n	80064f0 <USBD_GetEpDesc+0x32>
 8006524:	e000      	b.n	8006528 <USBD_GetEpDesc+0x6a>
          break;
 8006526:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006528:	693b      	ldr	r3, [r7, #16]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	881a      	ldrh	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	4413      	add	r3, r2
 800654c:	b29a      	uxth	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4413      	add	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800655e:	68fb      	ldr	r3, [r7, #12]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	3301      	adds	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800658a:	8a3b      	ldrh	r3, [r7, #16]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	b21a      	sxth	r2, r3
 8006590:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006594:	4313      	orrs	r3, r2
 8006596:	b21b      	sxth	r3, r3
 8006598:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800659a:	89fb      	ldrh	r3, [r7, #14]
}
 800659c:	4618      	mov	r0, r3
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d005      	beq.n	80065ce <USBD_StdDevReq+0x26>
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d857      	bhi.n	8006676 <USBD_StdDevReq+0xce>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00f      	beq.n	80065ea <USBD_StdDevReq+0x42>
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d153      	bne.n	8006676 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	32ae      	adds	r2, #174	; 0xae
 80065d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	4798      	blx	r3
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
      break;
 80065e8:	e04a      	b.n	8006680 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	785b      	ldrb	r3, [r3, #1]
 80065ee:	2b09      	cmp	r3, #9
 80065f0:	d83b      	bhi.n	800666a <USBD_StdDevReq+0xc2>
 80065f2:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <USBD_StdDevReq+0x50>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	0800664d 	.word	0x0800664d
 80065fc:	08006661 	.word	0x08006661
 8006600:	0800666b 	.word	0x0800666b
 8006604:	08006657 	.word	0x08006657
 8006608:	0800666b 	.word	0x0800666b
 800660c:	0800662b 	.word	0x0800662b
 8006610:	08006621 	.word	0x08006621
 8006614:	0800666b 	.word	0x0800666b
 8006618:	08006643 	.word	0x08006643
 800661c:	08006635 	.word	0x08006635
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa3c 	bl	8006aa0 <USBD_GetDescriptor>
          break;
 8006628:	e024      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fba1 	bl	8006d74 <USBD_SetAddress>
          break;
 8006632:	e01f      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fbe0 	bl	8006dfc <USBD_SetConfig>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]
          break;
 8006640:	e018      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fc83 	bl	8006f50 <USBD_GetConfig>
          break;
 800664a:	e013      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fcb4 	bl	8006fbc <USBD_GetStatus>
          break;
 8006654:	e00e      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fce3 	bl	8007024 <USBD_SetFeature>
          break;
 800665e:	e009      	b.n	8006674 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fd07 	bl	8007076 <USBD_ClrFeature>
          break;
 8006668:	e004      	b.n	8006674 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fd5e 	bl	800712e <USBD_CtlError>
          break;
 8006672:	bf00      	nop
      }
      break;
 8006674:	e004      	b.n	8006680 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fd58 	bl	800712e <USBD_CtlError>
      break;
 800667e:	bf00      	nop
  }

  return ret;
 8006680:	7bfb      	ldrb	r3, [r7, #15]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop

0800668c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d005      	beq.n	80066b2 <USBD_StdItfReq+0x26>
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d852      	bhi.n	8006750 <USBD_StdItfReq+0xc4>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <USBD_StdItfReq+0x26>
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d14e      	bne.n	8006750 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d840      	bhi.n	8006742 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	889b      	ldrh	r3, [r3, #4]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d836      	bhi.n	8006738 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	889b      	ldrh	r3, [r3, #4]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff fed9 	bl	800648a <USBD_CoreFindIF>
 80066d8:	4603      	mov	r3, r0
 80066da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2bff      	cmp	r3, #255	; 0xff
 80066e0:	d01d      	beq.n	800671e <USBD_StdItfReq+0x92>
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d11a      	bne.n	800671e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80066e8:	7bba      	ldrb	r2, [r7, #14]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	32ae      	adds	r2, #174	; 0xae
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00f      	beq.n	8006718 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80066f8:	7bba      	ldrb	r2, [r7, #14]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006700:	7bba      	ldrb	r2, [r7, #14]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	32ae      	adds	r2, #174	; 0xae
 8006706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4798      	blx	r3
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006716:	e004      	b.n	8006722 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006718:	2303      	movs	r3, #3
 800671a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800671c:	e001      	b.n	8006722 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800671e:	2303      	movs	r3, #3
 8006720:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	88db      	ldrh	r3, [r3, #6]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d110      	bne.n	800674c <USBD_StdItfReq+0xc0>
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10d      	bne.n	800674c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fdc7 	bl	80072c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006736:	e009      	b.n	800674c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fcf7 	bl	800712e <USBD_CtlError>
          break;
 8006740:	e004      	b.n	800674c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fcf2 	bl	800712e <USBD_CtlError>
          break;
 800674a:	e000      	b.n	800674e <USBD_StdItfReq+0xc2>
          break;
 800674c:	bf00      	nop
      }
      break;
 800674e:	e004      	b.n	800675a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fceb 	bl	800712e <USBD_CtlError>
      break;
 8006758:	bf00      	nop
  }

  return ret;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	889b      	ldrh	r3, [r3, #4]
 8006776:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	d007      	beq.n	8006794 <USBD_StdEPReq+0x30>
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	f200 817f 	bhi.w	8006a88 <USBD_StdEPReq+0x324>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d02a      	beq.n	80067e4 <USBD_StdEPReq+0x80>
 800678e:	2b20      	cmp	r3, #32
 8006790:	f040 817a 	bne.w	8006a88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff fe83 	bl	80064a4 <USBD_CoreFindEP>
 800679e:	4603      	mov	r3, r0
 80067a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067a2:	7b7b      	ldrb	r3, [r7, #13]
 80067a4:	2bff      	cmp	r3, #255	; 0xff
 80067a6:	f000 8174 	beq.w	8006a92 <USBD_StdEPReq+0x32e>
 80067aa:	7b7b      	ldrb	r3, [r7, #13]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f040 8170 	bne.w	8006a92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80067b2:	7b7a      	ldrb	r2, [r7, #13]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80067ba:	7b7a      	ldrb	r2, [r7, #13]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	32ae      	adds	r2, #174	; 0xae
 80067c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8163 	beq.w	8006a92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80067cc:	7b7a      	ldrb	r2, [r7, #13]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	32ae      	adds	r2, #174	; 0xae
 80067d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067e2:	e156      	b.n	8006a92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d008      	beq.n	80067fe <USBD_StdEPReq+0x9a>
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	f300 8145 	bgt.w	8006a7c <USBD_StdEPReq+0x318>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 809b 	beq.w	800692e <USBD_StdEPReq+0x1ca>
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d03c      	beq.n	8006876 <USBD_StdEPReq+0x112>
 80067fc:	e13e      	b.n	8006a7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d002      	beq.n	8006810 <USBD_StdEPReq+0xac>
 800680a:	2b03      	cmp	r3, #3
 800680c:	d016      	beq.n	800683c <USBD_StdEPReq+0xd8>
 800680e:	e02c      	b.n	800686a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00d      	beq.n	8006832 <USBD_StdEPReq+0xce>
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	2b80      	cmp	r3, #128	; 0x80
 800681a:	d00a      	beq.n	8006832 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 f96d 	bl	8007b00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006826:	2180      	movs	r1, #128	; 0x80
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 f969 	bl	8007b00 <USBD_LL_StallEP>
 800682e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006830:	e020      	b.n	8006874 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fc7a 	bl	800712e <USBD_CtlError>
              break;
 800683a:	e01b      	b.n	8006874 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	885b      	ldrh	r3, [r3, #2]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10e      	bne.n	8006862 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <USBD_StdEPReq+0xfe>
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	2b80      	cmp	r3, #128	; 0x80
 800684e:	d008      	beq.n	8006862 <USBD_StdEPReq+0xfe>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	88db      	ldrh	r3, [r3, #6]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 f94f 	bl	8007b00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fd2e 	bl	80072c4 <USBD_CtlSendStatus>

              break;
 8006868:	e004      	b.n	8006874 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fc5e 	bl	800712e <USBD_CtlError>
              break;
 8006872:	bf00      	nop
          }
          break;
 8006874:	e107      	b.n	8006a86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d002      	beq.n	8006888 <USBD_StdEPReq+0x124>
 8006882:	2b03      	cmp	r3, #3
 8006884:	d016      	beq.n	80068b4 <USBD_StdEPReq+0x150>
 8006886:	e04b      	b.n	8006920 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00d      	beq.n	80068aa <USBD_StdEPReq+0x146>
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	2b80      	cmp	r3, #128	; 0x80
 8006892:	d00a      	beq.n	80068aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f931 	bl	8007b00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800689e:	2180      	movs	r1, #128	; 0x80
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 f92d 	bl	8007b00 <USBD_LL_StallEP>
 80068a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068a8:	e040      	b.n	800692c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fc3e 	bl	800712e <USBD_CtlError>
              break;
 80068b2:	e03b      	b.n	800692c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	885b      	ldrh	r3, [r3, #2]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d136      	bne.n	800692a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 f937 	bl	8007b3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fcf7 	bl	80072c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff fde2 	bl	80064a4 <USBD_CoreFindEP>
 80068e0:	4603      	mov	r3, r0
 80068e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068e4:	7b7b      	ldrb	r3, [r7, #13]
 80068e6:	2bff      	cmp	r3, #255	; 0xff
 80068e8:	d01f      	beq.n	800692a <USBD_StdEPReq+0x1c6>
 80068ea:	7b7b      	ldrb	r3, [r7, #13]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d11c      	bne.n	800692a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80068f0:	7b7a      	ldrb	r2, [r7, #13]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80068f8:	7b7a      	ldrb	r2, [r7, #13]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	32ae      	adds	r2, #174	; 0xae
 80068fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d010      	beq.n	800692a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006908:	7b7a      	ldrb	r2, [r7, #13]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	32ae      	adds	r2, #174	; 0xae
 800690e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	4798      	blx	r3
 800691a:	4603      	mov	r3, r0
 800691c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800691e:	e004      	b.n	800692a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fc03 	bl	800712e <USBD_CtlError>
              break;
 8006928:	e000      	b.n	800692c <USBD_StdEPReq+0x1c8>
              break;
 800692a:	bf00      	nop
          }
          break;
 800692c:	e0ab      	b.n	8006a86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d002      	beq.n	8006940 <USBD_StdEPReq+0x1dc>
 800693a:	2b03      	cmp	r3, #3
 800693c:	d032      	beq.n	80069a4 <USBD_StdEPReq+0x240>
 800693e:	e097      	b.n	8006a70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006940:	7bbb      	ldrb	r3, [r7, #14]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <USBD_StdEPReq+0x1f2>
 8006946:	7bbb      	ldrb	r3, [r7, #14]
 8006948:	2b80      	cmp	r3, #128	; 0x80
 800694a:	d004      	beq.n	8006956 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fbed 	bl	800712e <USBD_CtlError>
                break;
 8006954:	e091      	b.n	8006a7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800695a:	2b00      	cmp	r3, #0
 800695c:	da0b      	bge.n	8006976 <USBD_StdEPReq+0x212>
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	3310      	adds	r3, #16
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4413      	add	r3, r2
 8006972:	3304      	adds	r3, #4
 8006974:	e00b      	b.n	800698e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	4413      	add	r3, r2
 800698c:	3304      	adds	r3, #4
 800698e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2202      	movs	r2, #2
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fc37 	bl	8007210 <USBD_CtlSendData>
              break;
 80069a2:	e06a      	b.n	8006a7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	da11      	bge.n	80069d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	f003 020f 	and.w	r2, r3, #15
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	3324      	adds	r3, #36	; 0x24
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d117      	bne.n	80069f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fbb0 	bl	800712e <USBD_CtlError>
                  break;
 80069ce:	e054      	b.n	8006a7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	f003 020f 	and.w	r2, r3, #15
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	440b      	add	r3, r1
 80069e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fb9d 	bl	800712e <USBD_CtlError>
                  break;
 80069f4:	e041      	b.n	8006a7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	da0b      	bge.n	8006a16 <USBD_StdEPReq+0x2b2>
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
 8006a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	3310      	adds	r3, #16
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	4413      	add	r3, r2
 8006a12:	3304      	adds	r3, #4
 8006a14:	e00b      	b.n	8006a2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a30:	7bbb      	ldrb	r3, [r7, #14]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <USBD_StdEPReq+0x2d8>
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	2b80      	cmp	r3, #128	; 0x80
 8006a3a:	d103      	bne.n	8006a44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	e00e      	b.n	8006a62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 f897 	bl	8007b7c <USBD_LL_IsStallEP>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2201      	movs	r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e002      	b.n	8006a62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2202      	movs	r2, #2
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fbd1 	bl	8007210 <USBD_CtlSendData>
              break;
 8006a6e:	e004      	b.n	8006a7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fb5b 	bl	800712e <USBD_CtlError>
              break;
 8006a78:	bf00      	nop
          }
          break;
 8006a7a:	e004      	b.n	8006a86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fb55 	bl	800712e <USBD_CtlError>
          break;
 8006a84:	bf00      	nop
      }
      break;
 8006a86:	e005      	b.n	8006a94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fb4f 	bl	800712e <USBD_CtlError>
      break;
 8006a90:	e000      	b.n	8006a94 <USBD_StdEPReq+0x330>
      break;
 8006a92:	bf00      	nop
  }

  return ret;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	885b      	ldrh	r3, [r3, #2]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	2b06      	cmp	r3, #6
 8006ac2:	f200 8128 	bhi.w	8006d16 <USBD_GetDescriptor+0x276>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <USBD_GetDescriptor+0x2c>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	08006b01 	.word	0x08006b01
 8006ad4:	08006b41 	.word	0x08006b41
 8006ad8:	08006d17 	.word	0x08006d17
 8006adc:	08006d17 	.word	0x08006d17
 8006ae0:	08006cb7 	.word	0x08006cb7
 8006ae4:	08006ce3 	.word	0x08006ce3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	7c12      	ldrb	r2, [r2, #16]
 8006af4:	f107 0108 	add.w	r1, r7, #8
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	60f8      	str	r0, [r7, #12]
      break;
 8006afe:	e112      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7c1b      	ldrb	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10d      	bne.n	8006b24 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	f107 0208 	add.w	r2, r7, #8
 8006b14:	4610      	mov	r0, r2
 8006b16:	4798      	blx	r3
 8006b18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	2202      	movs	r2, #2
 8006b20:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b22:	e100      	b.n	8006d26 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	f107 0208 	add.w	r2, r7, #8
 8006b30:	4610      	mov	r0, r2
 8006b32:	4798      	blx	r3
 8006b34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	701a      	strb	r2, [r3, #0]
      break;
 8006b3e:	e0f2      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	885b      	ldrh	r3, [r3, #2]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b05      	cmp	r3, #5
 8006b48:	f200 80ac 	bhi.w	8006ca4 <USBD_GetDescriptor+0x204>
 8006b4c:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <USBD_GetDescriptor+0xb4>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006b6d 	.word	0x08006b6d
 8006b58:	08006ba1 	.word	0x08006ba1
 8006b5c:	08006bd5 	.word	0x08006bd5
 8006b60:	08006c09 	.word	0x08006c09
 8006b64:	08006c3d 	.word	0x08006c3d
 8006b68:	08006c71 	.word	0x08006c71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00b      	beq.n	8006b90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	7c12      	ldrb	r2, [r2, #16]
 8006b84:	f107 0108 	add.w	r1, r7, #8
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4798      	blx	r3
 8006b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b8e:	e091      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 facb 	bl	800712e <USBD_CtlError>
            err++;
 8006b98:	7afb      	ldrb	r3, [r7, #11]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b9e:	e089      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00b      	beq.n	8006bc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	7c12      	ldrb	r2, [r2, #16]
 8006bb8:	f107 0108 	add.w	r1, r7, #8
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4798      	blx	r3
 8006bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bc2:	e077      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fab1 	bl	800712e <USBD_CtlError>
            err++;
 8006bcc:	7afb      	ldrb	r3, [r7, #11]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bd2:	e06f      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	7c12      	ldrb	r2, [r2, #16]
 8006bec:	f107 0108 	add.w	r1, r7, #8
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4798      	blx	r3
 8006bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bf6:	e05d      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa97 	bl	800712e <USBD_CtlError>
            err++;
 8006c00:	7afb      	ldrb	r3, [r7, #11]
 8006c02:	3301      	adds	r3, #1
 8006c04:	72fb      	strb	r3, [r7, #11]
          break;
 8006c06:	e055      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	7c12      	ldrb	r2, [r2, #16]
 8006c20:	f107 0108 	add.w	r1, r7, #8
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
 8006c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c2a:	e043      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa7d 	bl	800712e <USBD_CtlError>
            err++;
 8006c34:	7afb      	ldrb	r3, [r7, #11]
 8006c36:	3301      	adds	r3, #1
 8006c38:	72fb      	strb	r3, [r7, #11]
          break;
 8006c3a:	e03b      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	7c12      	ldrb	r2, [r2, #16]
 8006c54:	f107 0108 	add.w	r1, r7, #8
 8006c58:	4610      	mov	r0, r2
 8006c5a:	4798      	blx	r3
 8006c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c5e:	e029      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa63 	bl	800712e <USBD_CtlError>
            err++;
 8006c68:	7afb      	ldrb	r3, [r7, #11]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c6e:	e021      	b.n	8006cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00b      	beq.n	8006c94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	7c12      	ldrb	r2, [r2, #16]
 8006c88:	f107 0108 	add.w	r1, r7, #8
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	4798      	blx	r3
 8006c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c92:	e00f      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa49 	bl	800712e <USBD_CtlError>
            err++;
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ca2:	e007      	b.n	8006cb4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa41 	bl	800712e <USBD_CtlError>
          err++;
 8006cac:	7afb      	ldrb	r3, [r7, #11]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006cb2:	bf00      	nop
      }
      break;
 8006cb4:	e037      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7c1b      	ldrb	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d109      	bne.n	8006cd2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc6:	f107 0208 	add.w	r2, r7, #8
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4798      	blx	r3
 8006cce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cd0:	e029      	b.n	8006d26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fa2a 	bl	800712e <USBD_CtlError>
        err++;
 8006cda:	7afb      	ldrb	r3, [r7, #11]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	72fb      	strb	r3, [r7, #11]
      break;
 8006ce0:	e021      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	7c1b      	ldrb	r3, [r3, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10d      	bne.n	8006d06 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	f107 0208 	add.w	r2, r7, #8
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4798      	blx	r3
 8006cfa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	2207      	movs	r2, #7
 8006d02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d04:	e00f      	b.n	8006d26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fa10 	bl	800712e <USBD_CtlError>
        err++;
 8006d0e:	7afb      	ldrb	r3, [r7, #11]
 8006d10:	3301      	adds	r3, #1
 8006d12:	72fb      	strb	r3, [r7, #11]
      break;
 8006d14:	e007      	b.n	8006d26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fa08 	bl	800712e <USBD_CtlError>
      err++;
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	3301      	adds	r3, #1
 8006d22:	72fb      	strb	r3, [r7, #11]
      break;
 8006d24:	bf00      	nop
  }

  if (err != 0U)
 8006d26:	7afb      	ldrb	r3, [r7, #11]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d11e      	bne.n	8006d6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	88db      	ldrh	r3, [r3, #6]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d016      	beq.n	8006d62 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d34:	893b      	ldrh	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00e      	beq.n	8006d58 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	88da      	ldrh	r2, [r3, #6]
 8006d3e:	893b      	ldrh	r3, [r7, #8]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bf28      	it	cs
 8006d44:	4613      	movcs	r3, r2
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d4a:	893b      	ldrh	r3, [r7, #8]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	68f9      	ldr	r1, [r7, #12]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa5d 	bl	8007210 <USBD_CtlSendData>
 8006d56:	e009      	b.n	8006d6c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f9e7 	bl	800712e <USBD_CtlError>
 8006d60:	e004      	b.n	8006d6c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 faae 	bl	80072c4 <USBD_CtlSendStatus>
 8006d68:	e000      	b.n	8006d6c <USBD_GetDescriptor+0x2cc>
    return;
 8006d6a:	bf00      	nop
  }
}
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop

08006d74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	889b      	ldrh	r3, [r3, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d131      	bne.n	8006dea <USBD_SetAddress+0x76>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	88db      	ldrh	r3, [r3, #6]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d12d      	bne.n	8006dea <USBD_SetAddress+0x76>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	885b      	ldrh	r3, [r3, #2]
 8006d92:	2b7f      	cmp	r3, #127	; 0x7f
 8006d94:	d829      	bhi.n	8006dea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	885b      	ldrh	r3, [r3, #2]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d104      	bne.n	8006db8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f9bc 	bl	800712e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db6:	e01d      	b.n	8006df4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7bfa      	ldrb	r2, [r7, #15]
 8006dbc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 ff05 	bl	8007bd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa7a 	bl	80072c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d004      	beq.n	8006de0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dde:	e009      	b.n	8006df4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de8:	e004      	b.n	8006df4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f99e 	bl	800712e <USBD_CtlError>
  }
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	885b      	ldrh	r3, [r3, #2]
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	4b4e      	ldr	r3, [pc, #312]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e14:	4b4d      	ldr	r3, [pc, #308]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d905      	bls.n	8006e28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f985 	bl	800712e <USBD_CtlError>
    return USBD_FAIL;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e08c      	b.n	8006f42 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d002      	beq.n	8006e3a <USBD_SetConfig+0x3e>
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d029      	beq.n	8006e8c <USBD_SetConfig+0x90>
 8006e38:	e075      	b.n	8006f26 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e3a:	4b44      	ldr	r3, [pc, #272]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d020      	beq.n	8006e84 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006e42:	4b42      	ldr	r3, [pc, #264]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e4c:	4b3f      	ldr	r3, [pc, #252]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fe ffe7 	bl	8005e26 <USBD_SetClassConfig>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f962 	bl	800712e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e72:	e065      	b.n	8006f40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fa25 	bl	80072c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e82:	e05d      	b.n	8006f40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fa1d 	bl	80072c4 <USBD_CtlSendStatus>
      break;
 8006e8a:	e059      	b.n	8006f40 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e8c:	4b2f      	ldr	r3, [pc, #188]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d112      	bne.n	8006eba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006e9c:	4b2b      	ldr	r3, [pc, #172]	; (8006f4c <USBD_SetConfig+0x150>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ea6:	4b29      	ldr	r3, [pc, #164]	; (8006f4c <USBD_SetConfig+0x150>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7fe ffd6 	bl	8005e5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa06 	bl	80072c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006eb8:	e042      	b.n	8006f40 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006eba:	4b24      	ldr	r3, [pc, #144]	; (8006f4c <USBD_SetConfig+0x150>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d02a      	beq.n	8006f1e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7fe ffc4 	bl	8005e5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ed6:	4b1d      	ldr	r3, [pc, #116]	; (8006f4c <USBD_SetConfig+0x150>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ee0:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <USBD_SetConfig+0x150>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fe ff9d 	bl	8005e26 <USBD_SetClassConfig>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00f      	beq.n	8006f16 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f918 	bl	800712e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fe ffa9 	bl	8005e5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f14:	e014      	b.n	8006f40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f9d4 	bl	80072c4 <USBD_CtlSendStatus>
      break;
 8006f1c:	e010      	b.n	8006f40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f9d0 	bl	80072c4 <USBD_CtlSendStatus>
      break;
 8006f24:	e00c      	b.n	8006f40 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f900 	bl	800712e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <USBD_SetConfig+0x150>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7fe ff92 	bl	8005e5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3e:	bf00      	nop
  }

  return ret;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	200009a4 	.word	0x200009a4

08006f50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	88db      	ldrh	r3, [r3, #6]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d004      	beq.n	8006f6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f8e2 	bl	800712e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f6a:	e023      	b.n	8006fb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	dc02      	bgt.n	8006f7e <USBD_GetConfig+0x2e>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	dc03      	bgt.n	8006f84 <USBD_GetConfig+0x34>
 8006f7c:	e015      	b.n	8006faa <USBD_GetConfig+0x5a>
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d00b      	beq.n	8006f9a <USBD_GetConfig+0x4a>
 8006f82:	e012      	b.n	8006faa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	2201      	movs	r2, #1
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f93c 	bl	8007210 <USBD_CtlSendData>
        break;
 8006f98:	e00c      	b.n	8006fb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f934 	bl	8007210 <USBD_CtlSendData>
        break;
 8006fa8:	e004      	b.n	8006fb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f8be 	bl	800712e <USBD_CtlError>
        break;
 8006fb2:	bf00      	nop
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d81e      	bhi.n	8007012 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	88db      	ldrh	r3, [r3, #6]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d004      	beq.n	8006fe6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f8a5 	bl	800712e <USBD_CtlError>
        break;
 8006fe4:	e01a      	b.n	800701c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f043 0202 	orr.w	r2, r3, #2
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	330c      	adds	r3, #12
 8007006:	2202      	movs	r2, #2
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f900 	bl	8007210 <USBD_CtlSendData>
      break;
 8007010:	e004      	b.n	800701c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f88a 	bl	800712e <USBD_CtlError>
      break;
 800701a:	bf00      	nop
  }
}
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	885b      	ldrh	r3, [r3, #2]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d107      	bne.n	8007046 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f940 	bl	80072c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007044:	e013      	b.n	800706e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	885b      	ldrh	r3, [r3, #2]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d10b      	bne.n	8007066 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	889b      	ldrh	r3, [r3, #4]
 8007052:	0a1b      	lsrs	r3, r3, #8
 8007054:	b29b      	uxth	r3, r3
 8007056:	b2da      	uxtb	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f930 	bl	80072c4 <USBD_CtlSendStatus>
}
 8007064:	e003      	b.n	800706e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f860 	bl	800712e <USBD_CtlError>
}
 800706e:	bf00      	nop
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007086:	b2db      	uxtb	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	2b02      	cmp	r3, #2
 800708c:	d80b      	bhi.n	80070a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	885b      	ldrh	r3, [r3, #2]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d10c      	bne.n	80070b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f910 	bl	80072c4 <USBD_CtlSendStatus>
      }
      break;
 80070a4:	e004      	b.n	80070b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f840 	bl	800712e <USBD_CtlError>
      break;
 80070ae:	e000      	b.n	80070b2 <USBD_ClrFeature+0x3c>
      break;
 80070b0:	bf00      	nop
  }
}
 80070b2:	bf00      	nop
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3301      	adds	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	781a      	ldrb	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3301      	adds	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff fa41 	bl	800656c <SWAPBYTE>
 80070ea:	4603      	mov	r3, r0
 80070ec:	461a      	mov	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3301      	adds	r3, #1
 80070f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff fa34 	bl	800656c <SWAPBYTE>
 8007104:	4603      	mov	r3, r0
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3301      	adds	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff fa27 	bl	800656c <SWAPBYTE>
 800711e:	4603      	mov	r3, r0
 8007120:	461a      	mov	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	80da      	strh	r2, [r3, #6]
}
 8007126:	bf00      	nop
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007138:	2180      	movs	r1, #128	; 0x80
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fce0 	bl	8007b00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007140:	2100      	movs	r1, #0
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fcdc 	bl	8007b00 <USBD_LL_StallEP>
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d036      	beq.n	80071d4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800716a:	6938      	ldr	r0, [r7, #16]
 800716c:	f000 f836 	bl	80071dc <USBD_GetLen>
 8007170:	4603      	mov	r3, r0
 8007172:	3301      	adds	r3, #1
 8007174:	b29b      	uxth	r3, r3
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	4413      	add	r3, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	7812      	ldrb	r2, [r2, #0]
 8007188:	701a      	strb	r2, [r3, #0]
  idx++;
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	3301      	adds	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	4413      	add	r3, r2
 8007196:	2203      	movs	r2, #3
 8007198:	701a      	strb	r2, [r3, #0]
  idx++;
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	3301      	adds	r3, #1
 800719e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071a0:	e013      	b.n	80071ca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	4413      	add	r3, r2
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	7812      	ldrb	r2, [r2, #0]
 80071ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	3301      	adds	r3, #1
 80071b2:	613b      	str	r3, [r7, #16]
    idx++;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	3301      	adds	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	4413      	add	r3, r2
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	3301      	adds	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e7      	bne.n	80071a2 <USBD_GetString+0x52>
 80071d2:	e000      	b.n	80071d6 <USBD_GetString+0x86>
    return;
 80071d4:	bf00      	nop
  }
}
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071ec:	e005      	b.n	80071fa <USBD_GetLen+0x1e>
  {
    len++;
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	3301      	adds	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3301      	adds	r3, #1
 80071f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1f5      	bne.n	80071ee <USBD_GetLen+0x12>
  }

  return len;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2202      	movs	r2, #2
 8007220:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	2100      	movs	r1, #0
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 fceb 	bl	8007c12 <USBD_LL_Transmit>

  return USBD_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	2100      	movs	r1, #0
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 fcda 	bl	8007c12 <USBD_LL_Transmit>

  return USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2203      	movs	r2, #3
 8007278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	2100      	movs	r1, #0
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fcde 	bl	8007c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	2100      	movs	r1, #0
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fccd 	bl	8007c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2204      	movs	r2, #4
 80072d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072d4:	2300      	movs	r3, #0
 80072d6:	2200      	movs	r2, #0
 80072d8:	2100      	movs	r1, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fc99 	bl	8007c12 <USBD_LL_Transmit>

  return USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2205      	movs	r2, #5
 80072f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072fa:	2300      	movs	r3, #0
 80072fc:	2200      	movs	r2, #0
 80072fe:	2100      	movs	r1, #0
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fca7 	bl	8007c54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007314:	2200      	movs	r2, #0
 8007316:	4912      	ldr	r1, [pc, #72]	; (8007360 <MX_USB_DEVICE_Init+0x50>)
 8007318:	4812      	ldr	r0, [pc, #72]	; (8007364 <MX_USB_DEVICE_Init+0x54>)
 800731a:	f7fe fd07 	bl	8005d2c <USBD_Init>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007324:	f7f9 feaa 	bl	800107c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007328:	490f      	ldr	r1, [pc, #60]	; (8007368 <MX_USB_DEVICE_Init+0x58>)
 800732a:	480e      	ldr	r0, [pc, #56]	; (8007364 <MX_USB_DEVICE_Init+0x54>)
 800732c:	f7fe fd2e 	bl	8005d8c <USBD_RegisterClass>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007336:	f7f9 fea1 	bl	800107c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800733a:	490c      	ldr	r1, [pc, #48]	; (800736c <MX_USB_DEVICE_Init+0x5c>)
 800733c:	4809      	ldr	r0, [pc, #36]	; (8007364 <MX_USB_DEVICE_Init+0x54>)
 800733e:	f7fe fc1f 	bl	8005b80 <USBD_CDC_RegisterInterface>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007348:	f7f9 fe98 	bl	800107c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800734c:	4805      	ldr	r0, [pc, #20]	; (8007364 <MX_USB_DEVICE_Init+0x54>)
 800734e:	f7fe fd53 	bl	8005df8 <USBD_Start>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007358:	f7f9 fe90 	bl	800107c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800735c:	bf00      	nop
 800735e:	bd80      	pop	{r7, pc}
 8007360:	200000b0 	.word	0x200000b0
 8007364:	200009a8 	.word	0x200009a8
 8007368:	2000001c 	.word	0x2000001c
 800736c:	2000009c 	.word	0x2000009c

08007370 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007374:	2200      	movs	r2, #0
 8007376:	4905      	ldr	r1, [pc, #20]	; (800738c <CDC_Init_FS+0x1c>)
 8007378:	4805      	ldr	r0, [pc, #20]	; (8007390 <CDC_Init_FS+0x20>)
 800737a:	f7fe fc1b 	bl	8005bb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800737e:	4905      	ldr	r1, [pc, #20]	; (8007394 <CDC_Init_FS+0x24>)
 8007380:	4803      	ldr	r0, [pc, #12]	; (8007390 <CDC_Init_FS+0x20>)
 8007382:	f7fe fc39 	bl	8005bf8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007386:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007388:	4618      	mov	r0, r3
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20001484 	.word	0x20001484
 8007390:	200009a8 	.word	0x200009a8
 8007394:	20000c84 	.word	0x20000c84

08007398 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800739c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800739e:	4618      	mov	r0, r3
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	6039      	str	r1, [r7, #0]
 80073b2:	71fb      	strb	r3, [r7, #7]
 80073b4:	4613      	mov	r3, r2
 80073b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	2b23      	cmp	r3, #35	; 0x23
 80073bc:	d84a      	bhi.n	8007454 <CDC_Control_FS+0xac>
 80073be:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <CDC_Control_FS+0x1c>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	08007455 	.word	0x08007455
 80073c8:	08007455 	.word	0x08007455
 80073cc:	08007455 	.word	0x08007455
 80073d0:	08007455 	.word	0x08007455
 80073d4:	08007455 	.word	0x08007455
 80073d8:	08007455 	.word	0x08007455
 80073dc:	08007455 	.word	0x08007455
 80073e0:	08007455 	.word	0x08007455
 80073e4:	08007455 	.word	0x08007455
 80073e8:	08007455 	.word	0x08007455
 80073ec:	08007455 	.word	0x08007455
 80073f0:	08007455 	.word	0x08007455
 80073f4:	08007455 	.word	0x08007455
 80073f8:	08007455 	.word	0x08007455
 80073fc:	08007455 	.word	0x08007455
 8007400:	08007455 	.word	0x08007455
 8007404:	08007455 	.word	0x08007455
 8007408:	08007455 	.word	0x08007455
 800740c:	08007455 	.word	0x08007455
 8007410:	08007455 	.word	0x08007455
 8007414:	08007455 	.word	0x08007455
 8007418:	08007455 	.word	0x08007455
 800741c:	08007455 	.word	0x08007455
 8007420:	08007455 	.word	0x08007455
 8007424:	08007455 	.word	0x08007455
 8007428:	08007455 	.word	0x08007455
 800742c:	08007455 	.word	0x08007455
 8007430:	08007455 	.word	0x08007455
 8007434:	08007455 	.word	0x08007455
 8007438:	08007455 	.word	0x08007455
 800743c:	08007455 	.word	0x08007455
 8007440:	08007455 	.word	0x08007455
 8007444:	08007455 	.word	0x08007455
 8007448:	08007455 	.word	0x08007455
 800744c:	08007455 	.word	0x08007455
 8007450:	08007455 	.word	0x08007455
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007454:	bf00      	nop
  }

  return (USBD_OK);
 8007456:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	4805      	ldr	r0, [pc, #20]	; (8007488 <CDC_Receive_FS+0x24>)
 8007472:	f7fe fbc1 	bl	8005bf8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007476:	4804      	ldr	r0, [pc, #16]	; (8007488 <CDC_Receive_FS+0x24>)
 8007478:	f7fe fc22 	bl	8005cc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800747c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	200009a8 	.word	0x200009a8

0800748c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800749c:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <CDC_Transmit_FS+0x48>)
 800749e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e00b      	b.n	80074ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80074b2:	887b      	ldrh	r3, [r7, #2]
 80074b4:	461a      	mov	r2, r3
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	4806      	ldr	r0, [pc, #24]	; (80074d4 <CDC_Transmit_FS+0x48>)
 80074ba:	f7fe fb7b 	bl	8005bb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074be:	4805      	ldr	r0, [pc, #20]	; (80074d4 <CDC_Transmit_FS+0x48>)
 80074c0:	f7fe fbb8 	bl	8005c34 <USBD_CDC_TransmitPacket>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	200009a8 	.word	0x200009a8

080074d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80074ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
	...

080074fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	4603      	mov	r3, r0
 8007504:	6039      	str	r1, [r7, #0]
 8007506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2212      	movs	r2, #18
 800750c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800750e:	4b03      	ldr	r3, [pc, #12]	; (800751c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	200000cc 	.word	0x200000cc

08007520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	6039      	str	r1, [r7, #0]
 800752a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2204      	movs	r2, #4
 8007530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007532:	4b03      	ldr	r3, [pc, #12]	; (8007540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	200000e0 	.word	0x200000e0

08007544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	4603      	mov	r3, r0
 800754c:	6039      	str	r1, [r7, #0]
 800754e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007550:	79fb      	ldrb	r3, [r7, #7]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d105      	bne.n	8007562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	4907      	ldr	r1, [pc, #28]	; (8007578 <USBD_FS_ProductStrDescriptor+0x34>)
 800755a:	4808      	ldr	r0, [pc, #32]	; (800757c <USBD_FS_ProductStrDescriptor+0x38>)
 800755c:	f7ff fdf8 	bl	8007150 <USBD_GetString>
 8007560:	e004      	b.n	800756c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	4904      	ldr	r1, [pc, #16]	; (8007578 <USBD_FS_ProductStrDescriptor+0x34>)
 8007566:	4805      	ldr	r0, [pc, #20]	; (800757c <USBD_FS_ProductStrDescriptor+0x38>)
 8007568:	f7ff fdf2 	bl	8007150 <USBD_GetString>
  }
  return USBD_StrDesc;
 800756c:	4b02      	ldr	r3, [pc, #8]	; (8007578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20001c84 	.word	0x20001c84
 800757c:	0800a528 	.word	0x0800a528

08007580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	4603      	mov	r3, r0
 8007588:	6039      	str	r1, [r7, #0]
 800758a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	4904      	ldr	r1, [pc, #16]	; (80075a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007590:	4804      	ldr	r0, [pc, #16]	; (80075a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007592:	f7ff fddd 	bl	8007150 <USBD_GetString>
  return USBD_StrDesc;
 8007596:	4b02      	ldr	r3, [pc, #8]	; (80075a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20001c84 	.word	0x20001c84
 80075a4:	0800a540 	.word	0x0800a540

080075a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	221a      	movs	r2, #26
 80075b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075ba:	f000 f843 	bl	8007644 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075be:	4b02      	ldr	r3, [pc, #8]	; (80075c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	200000e4 	.word	0x200000e4

080075cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	6039      	str	r1, [r7, #0]
 80075d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d105      	bne.n	80075ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	4907      	ldr	r1, [pc, #28]	; (8007600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075e2:	4808      	ldr	r0, [pc, #32]	; (8007604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075e4:	f7ff fdb4 	bl	8007150 <USBD_GetString>
 80075e8:	e004      	b.n	80075f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	4904      	ldr	r1, [pc, #16]	; (8007600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075ee:	4805      	ldr	r0, [pc, #20]	; (8007604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075f0:	f7ff fdae 	bl	8007150 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075f4:	4b02      	ldr	r3, [pc, #8]	; (8007600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20001c84 	.word	0x20001c84
 8007604:	0800a554 	.word	0x0800a554

08007608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	6039      	str	r1, [r7, #0]
 8007612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d105      	bne.n	8007626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	4907      	ldr	r1, [pc, #28]	; (800763c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800761e:	4808      	ldr	r0, [pc, #32]	; (8007640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007620:	f7ff fd96 	bl	8007150 <USBD_GetString>
 8007624:	e004      	b.n	8007630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	4904      	ldr	r1, [pc, #16]	; (800763c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800762a:	4805      	ldr	r0, [pc, #20]	; (8007640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800762c:	f7ff fd90 	bl	8007150 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007630:	4b02      	ldr	r3, [pc, #8]	; (800763c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20001c84 	.word	0x20001c84
 8007640:	0800a560 	.word	0x0800a560

08007644 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800764a:	4b0f      	ldr	r3, [pc, #60]	; (8007688 <Get_SerialNum+0x44>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007650:	4b0e      	ldr	r3, [pc, #56]	; (800768c <Get_SerialNum+0x48>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007656:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <Get_SerialNum+0x4c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4413      	add	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d009      	beq.n	800767e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800766a:	2208      	movs	r2, #8
 800766c:	4909      	ldr	r1, [pc, #36]	; (8007694 <Get_SerialNum+0x50>)
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 f814 	bl	800769c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007674:	2204      	movs	r2, #4
 8007676:	4908      	ldr	r1, [pc, #32]	; (8007698 <Get_SerialNum+0x54>)
 8007678:	68b8      	ldr	r0, [r7, #8]
 800767a:	f000 f80f 	bl	800769c <IntToUnicode>
  }
}
 800767e:	bf00      	nop
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	1fff7a10 	.word	0x1fff7a10
 800768c:	1fff7a14 	.word	0x1fff7a14
 8007690:	1fff7a18 	.word	0x1fff7a18
 8007694:	200000e6 	.word	0x200000e6
 8007698:	200000f6 	.word	0x200000f6

0800769c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	4613      	mov	r3, r2
 80076a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]
 80076b2:	e027      	b.n	8007704 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	0f1b      	lsrs	r3, r3, #28
 80076b8:	2b09      	cmp	r3, #9
 80076ba:	d80b      	bhi.n	80076d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	0f1b      	lsrs	r3, r3, #28
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	4619      	mov	r1, r3
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	440b      	add	r3, r1
 80076cc:	3230      	adds	r2, #48	; 0x30
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]
 80076d2:	e00a      	b.n	80076ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	0f1b      	lsrs	r3, r3, #28
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4619      	mov	r1, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	440b      	add	r3, r1
 80076e4:	3237      	adds	r2, #55	; 0x37
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	3301      	adds	r3, #1
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	4413      	add	r3, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
 8007700:	3301      	adds	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
 8007704:	7dfa      	ldrb	r2, [r7, #23]
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	429a      	cmp	r2, r3
 800770a:	d3d3      	bcc.n	80076b4 <IntToUnicode+0x18>
  }
}
 800770c:	bf00      	nop
 800770e:	bf00      	nop
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
	...

0800771c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08a      	sub	sp, #40	; 0x28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007724:	f107 0314 	add.w	r3, r7, #20
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	605a      	str	r2, [r3, #4]
 800772e:	609a      	str	r2, [r3, #8]
 8007730:	60da      	str	r2, [r3, #12]
 8007732:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800773c:	d13a      	bne.n	80077b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800773e:	2300      	movs	r3, #0
 8007740:	613b      	str	r3, [r7, #16]
 8007742:	4b1e      	ldr	r3, [pc, #120]	; (80077bc <HAL_PCD_MspInit+0xa0>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	4a1d      	ldr	r2, [pc, #116]	; (80077bc <HAL_PCD_MspInit+0xa0>)
 8007748:	f043 0301 	orr.w	r3, r3, #1
 800774c:	6313      	str	r3, [r2, #48]	; 0x30
 800774e:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <HAL_PCD_MspInit+0xa0>)
 8007750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800775a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800775e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007760:	2302      	movs	r3, #2
 8007762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007764:	2300      	movs	r3, #0
 8007766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007768:	2303      	movs	r3, #3
 800776a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800776c:	230a      	movs	r3, #10
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007770:	f107 0314 	add.w	r3, r7, #20
 8007774:	4619      	mov	r1, r3
 8007776:	4812      	ldr	r0, [pc, #72]	; (80077c0 <HAL_PCD_MspInit+0xa4>)
 8007778:	f7fa f92a 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800777c:	4b0f      	ldr	r3, [pc, #60]	; (80077bc <HAL_PCD_MspInit+0xa0>)
 800777e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007780:	4a0e      	ldr	r2, [pc, #56]	; (80077bc <HAL_PCD_MspInit+0xa0>)
 8007782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007786:	6353      	str	r3, [r2, #52]	; 0x34
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <HAL_PCD_MspInit+0xa0>)
 800778e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007790:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <HAL_PCD_MspInit+0xa0>)
 8007792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007796:	6453      	str	r3, [r2, #68]	; 0x44
 8007798:	4b08      	ldr	r3, [pc, #32]	; (80077bc <HAL_PCD_MspInit+0xa0>)
 800779a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077a4:	2200      	movs	r2, #0
 80077a6:	2100      	movs	r1, #0
 80077a8:	2043      	movs	r0, #67	; 0x43
 80077aa:	f7fa f8da 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077ae:	2043      	movs	r0, #67	; 0x43
 80077b0:	f7fa f8f3 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077b4:	bf00      	nop
 80077b6:	3728      	adds	r7, #40	; 0x28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	40023800 	.word	0x40023800
 80077c0:	40020000 	.word	0x40020000

080077c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f7fe fb59 	bl	8005e92 <USBD_LL_SetupStage>
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80077fa:	78fa      	ldrb	r2, [r7, #3]
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	4613      	mov	r3, r2
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	440b      	add	r3, r1
 8007808:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	4619      	mov	r1, r3
 8007812:	f7fe fb93 	bl	8005f3c <USBD_LL_DataOutStage>
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	460b      	mov	r3, r1
 8007828:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007830:	78fa      	ldrb	r2, [r7, #3]
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	4613      	mov	r3, r2
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	440b      	add	r3, r1
 800783e:	334c      	adds	r3, #76	; 0x4c
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	4619      	mov	r1, r3
 8007846:	f7fe fc2c 	bl	80060a2 <USBD_LL_DataInStage>
}
 800784a:	bf00      	nop
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007860:	4618      	mov	r0, r3
 8007862:	f7fe fd60 	bl	8006326 <USBD_LL_SOF>
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007876:	2301      	movs	r3, #1
 8007878:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]
 8007886:	e008      	b.n	800789a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d102      	bne.n	8007896 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007890:	2301      	movs	r3, #1
 8007892:	73fb      	strb	r3, [r7, #15]
 8007894:	e001      	b.n	800789a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007896:	f7f9 fbf1 	bl	800107c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078a0:	7bfa      	ldrb	r2, [r7, #15]
 80078a2:	4611      	mov	r1, r2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe fd00 	bl	80062aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe fca8 	bl	8006206 <USBD_LL_Reset>
}
 80078b6:	bf00      	nop
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe fcfb 	bl	80062ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	6812      	ldr	r2, [r2, #0]
 80078e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078e6:	f043 0301 	orr.w	r3, r3, #1
 80078ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <HAL_PCD_SuspendCallback+0x48>)
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	4a03      	ldr	r2, [pc, #12]	; (8007908 <HAL_PCD_SuspendCallback+0x48>)
 80078fa:	f043 0306 	orr.w	r3, r3, #6
 80078fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	e000ed00 	.word	0xe000ed00

0800790c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fceb 	bl	80062f6 <USBD_LL_Resume>
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	460b      	mov	r3, r1
 8007932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800793a:	78fa      	ldrb	r2, [r7, #3]
 800793c:	4611      	mov	r1, r2
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe fd43 	bl	80063ca <USBD_LL_IsoOUTIncomplete>
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800795e:	78fa      	ldrb	r2, [r7, #3]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fcff 	bl	8006366 <USBD_LL_IsoINIncomplete>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fd55 	bl	800642e <USBD_LL_DevConnected>
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800799a:	4618      	mov	r0, r3
 800799c:	f7fe fd52 	bl	8006444 <USBD_LL_DevDisconnected>
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d13c      	bne.n	8007a32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079b8:	4a20      	ldr	r2, [pc, #128]	; (8007a3c <USBD_LL_Init+0x94>)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a1e      	ldr	r2, [pc, #120]	; (8007a3c <USBD_LL_Init+0x94>)
 80079c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079c8:	4b1c      	ldr	r3, [pc, #112]	; (8007a3c <USBD_LL_Init+0x94>)
 80079ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80079d0:	4b1a      	ldr	r3, [pc, #104]	; (8007a3c <USBD_LL_Init+0x94>)
 80079d2:	2204      	movs	r2, #4
 80079d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079d6:	4b19      	ldr	r3, [pc, #100]	; (8007a3c <USBD_LL_Init+0x94>)
 80079d8:	2202      	movs	r2, #2
 80079da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079dc:	4b17      	ldr	r3, [pc, #92]	; (8007a3c <USBD_LL_Init+0x94>)
 80079de:	2200      	movs	r2, #0
 80079e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079e2:	4b16      	ldr	r3, [pc, #88]	; (8007a3c <USBD_LL_Init+0x94>)
 80079e4:	2202      	movs	r2, #2
 80079e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079e8:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <USBD_LL_Init+0x94>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80079ee:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <USBD_LL_Init+0x94>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80079f4:	4b11      	ldr	r3, [pc, #68]	; (8007a3c <USBD_LL_Init+0x94>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80079fa:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <USBD_LL_Init+0x94>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a00:	4b0e      	ldr	r3, [pc, #56]	; (8007a3c <USBD_LL_Init+0x94>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a06:	480d      	ldr	r0, [pc, #52]	; (8007a3c <USBD_LL_Init+0x94>)
 8007a08:	f7fa f97e 	bl	8001d08 <HAL_PCD_Init>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a12:	f7f9 fb33 	bl	800107c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a16:	2180      	movs	r1, #128	; 0x80
 8007a18:	4808      	ldr	r0, [pc, #32]	; (8007a3c <USBD_LL_Init+0x94>)
 8007a1a:	f7fb fbd6 	bl	80031ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a1e:	2240      	movs	r2, #64	; 0x40
 8007a20:	2100      	movs	r1, #0
 8007a22:	4806      	ldr	r0, [pc, #24]	; (8007a3c <USBD_LL_Init+0x94>)
 8007a24:	f7fb fb8a 	bl	800313c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a28:	2280      	movs	r2, #128	; 0x80
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	4803      	ldr	r0, [pc, #12]	; (8007a3c <USBD_LL_Init+0x94>)
 8007a2e:	f7fb fb85 	bl	800313c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20001e84 	.word	0x20001e84

08007a40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fa fa73 	bl	8001f42 <HAL_PCD_Start>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 f942 	bl	8007cec <USBD_Get_USB_Status>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	4608      	mov	r0, r1
 8007a80:	4611      	mov	r1, r2
 8007a82:	461a      	mov	r2, r3
 8007a84:	4603      	mov	r3, r0
 8007a86:	70fb      	strb	r3, [r7, #3]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70bb      	strb	r3, [r7, #2]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007a9e:	78bb      	ldrb	r3, [r7, #2]
 8007aa0:	883a      	ldrh	r2, [r7, #0]
 8007aa2:	78f9      	ldrb	r1, [r7, #3]
 8007aa4:	f7fa ff44 	bl	8002930 <HAL_PCD_EP_Open>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f91c 	bl	8007cec <USBD_Get_USB_Status>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	4611      	mov	r1, r2
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fa ff8d 	bl	8002a00 <HAL_PCD_EP_Close>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 f8fd 	bl	8007cec <USBD_Get_USB_Status>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fb f865 	bl	8002bee <HAL_PCD_EP_SetStall>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 f8de 	bl	8007cec <USBD_Get_USB_Status>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fb f8aa 	bl	8002cb6 <HAL_PCD_EP_ClrStall>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 f8bf 	bl	8007cec <USBD_Get_USB_Status>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da0b      	bge.n	8007bb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	333e      	adds	r3, #62	; 0x3e
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	e00b      	b.n	8007bc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bb6:	68f9      	ldr	r1, [r7, #12]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007bc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fa fe77 	bl	80028e6 <HAL_PCD_SetAddress>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f874 	bl	8007cec <USBD_Get_USB_Status>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b086      	sub	sp, #24
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c30:	7af9      	ldrb	r1, [r7, #11]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	f7fa ff90 	bl	8002b5a <HAL_PCD_EP_Transmit>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 f853 	bl	8007cec <USBD_Get_USB_Status>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	607a      	str	r2, [r7, #4]
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	460b      	mov	r3, r1
 8007c62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c72:	7af9      	ldrb	r1, [r7, #11]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	f7fa ff0c 	bl	8002a94 <HAL_PCD_EP_Receive>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 f832 	bl	8007cec <USBD_Get_USB_Status>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ca8:	78fa      	ldrb	r2, [r7, #3]
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fa ff3c 	bl	8002b2a <HAL_PCD_EP_GetRxCount>
 8007cb2:	4603      	mov	r3, r0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cc4:	4b03      	ldr	r3, [pc, #12]	; (8007cd4 <USBD_static_malloc+0x18>)
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	20002390 	.word	0x20002390

08007cd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]

}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d817      	bhi.n	8007d30 <USBD_Get_USB_Status+0x44>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <USBD_Get_USB_Status+0x1c>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d19 	.word	0x08007d19
 8007d0c:	08007d1f 	.word	0x08007d1f
 8007d10:	08007d25 	.word	0x08007d25
 8007d14:	08007d2b 	.word	0x08007d2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d1c:	e00b      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	73fb      	strb	r3, [r7, #15]
    break;
 8007d22:	e008      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d24:	2301      	movs	r3, #1
 8007d26:	73fb      	strb	r3, [r7, #15]
    break;
 8007d28:	e005      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d2e:	e002      	b.n	8007d36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	73fb      	strb	r3, [r7, #15]
    break;
 8007d34:	bf00      	nop
  }
  return usb_status;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <gcvt>:
 8007d44:	b530      	push	{r4, r5, lr}
 8007d46:	2200      	movs	r2, #0
 8007d48:	b085      	sub	sp, #20
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	2300      	movs	r3, #0
 8007d50:	ec51 0b10 	vmov	r0, r1, d0
 8007d54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d58:	f7f8 fec0 	bl	8000adc <__aeabi_dcmplt>
 8007d5c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007d60:	4622      	mov	r2, r4
 8007d62:	b118      	cbz	r0, 8007d6c <gcvt+0x28>
 8007d64:	232d      	movs	r3, #45	; 0x2d
 8007d66:	f802 3b01 	strb.w	r3, [r2], #1
 8007d6a:	3d01      	subs	r5, #1
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4806      	ldr	r0, [pc, #24]	; (8007d88 <gcvt+0x44>)
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	4629      	mov	r1, r5
 8007d74:	2367      	movs	r3, #103	; 0x67
 8007d76:	6800      	ldr	r0, [r0, #0]
 8007d78:	f000 f8c2 	bl	8007f00 <_gcvt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	bf14      	ite	ne
 8007d80:	4620      	movne	r0, r4
 8007d82:	2000      	moveq	r0, #0
 8007d84:	b005      	add	sp, #20
 8007d86:	bd30      	pop	{r4, r5, pc}
 8007d88:	20000100 	.word	0x20000100

08007d8c <__errno>:
 8007d8c:	4b01      	ldr	r3, [pc, #4]	; (8007d94 <__errno+0x8>)
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000100 	.word	0x20000100

08007d98 <__libc_init_array>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4d0d      	ldr	r5, [pc, #52]	; (8007dd0 <__libc_init_array+0x38>)
 8007d9c:	4c0d      	ldr	r4, [pc, #52]	; (8007dd4 <__libc_init_array+0x3c>)
 8007d9e:	1b64      	subs	r4, r4, r5
 8007da0:	10a4      	asrs	r4, r4, #2
 8007da2:	2600      	movs	r6, #0
 8007da4:	42a6      	cmp	r6, r4
 8007da6:	d109      	bne.n	8007dbc <__libc_init_array+0x24>
 8007da8:	4d0b      	ldr	r5, [pc, #44]	; (8007dd8 <__libc_init_array+0x40>)
 8007daa:	4c0c      	ldr	r4, [pc, #48]	; (8007ddc <__libc_init_array+0x44>)
 8007dac:	f002 fbac 	bl	800a508 <_init>
 8007db0:	1b64      	subs	r4, r4, r5
 8007db2:	10a4      	asrs	r4, r4, #2
 8007db4:	2600      	movs	r6, #0
 8007db6:	42a6      	cmp	r6, r4
 8007db8:	d105      	bne.n	8007dc6 <__libc_init_array+0x2e>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc0:	4798      	blx	r3
 8007dc2:	3601      	adds	r6, #1
 8007dc4:	e7ee      	b.n	8007da4 <__libc_init_array+0xc>
 8007dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dca:	4798      	blx	r3
 8007dcc:	3601      	adds	r6, #1
 8007dce:	e7f2      	b.n	8007db6 <__libc_init_array+0x1e>
 8007dd0:	0800a848 	.word	0x0800a848
 8007dd4:	0800a848 	.word	0x0800a848
 8007dd8:	0800a848 	.word	0x0800a848
 8007ddc:	0800a84c 	.word	0x0800a84c

08007de0 <memset>:
 8007de0:	4402      	add	r2, r0
 8007de2:	4603      	mov	r3, r0
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d100      	bne.n	8007dea <memset+0xa>
 8007de8:	4770      	bx	lr
 8007dea:	f803 1b01 	strb.w	r1, [r3], #1
 8007dee:	e7f9      	b.n	8007de4 <memset+0x4>

08007df0 <strcat>:
 8007df0:	b510      	push	{r4, lr}
 8007df2:	4602      	mov	r2, r0
 8007df4:	7814      	ldrb	r4, [r2, #0]
 8007df6:	4613      	mov	r3, r2
 8007df8:	3201      	adds	r2, #1
 8007dfa:	2c00      	cmp	r4, #0
 8007dfc:	d1fa      	bne.n	8007df4 <strcat+0x4>
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e08:	2a00      	cmp	r2, #0
 8007e0a:	d1f9      	bne.n	8007e00 <strcat+0x10>
 8007e0c:	bd10      	pop	{r4, pc}

08007e0e <print_e>:
 8007e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e10:	b087      	sub	sp, #28
 8007e12:	ec43 2b10 	vmov	d0, r2, r3
 8007e16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007e18:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8007e1c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007e1e:	ab04      	add	r3, sp, #16
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	ab03      	add	r3, sp, #12
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	1c62      	adds	r2, r4, #1
 8007e28:	ab05      	add	r3, sp, #20
 8007e2a:	460f      	mov	r7, r1
 8007e2c:	2102      	movs	r1, #2
 8007e2e:	f000 fe37 	bl	8008aa0 <_dtoa_r>
 8007e32:	9a05      	ldr	r2, [sp, #20]
 8007e34:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d105      	bne.n	8007e48 <print_e+0x3a>
 8007e3c:	4601      	mov	r1, r0
 8007e3e:	4638      	mov	r0, r7
 8007e40:	f000 fd7a 	bl	8008938 <strcpy>
 8007e44:	b007      	add	sp, #28
 8007e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e48:	463b      	mov	r3, r7
 8007e4a:	7801      	ldrb	r1, [r0, #0]
 8007e4c:	f803 1b01 	strb.w	r1, [r3], #1
 8007e50:	2c00      	cmp	r4, #0
 8007e52:	bfc8      	it	gt
 8007e54:	2501      	movgt	r5, #1
 8007e56:	212e      	movs	r1, #46	; 0x2e
 8007e58:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8007e5c:	b10f      	cbz	r7, 8007e62 <print_e+0x54>
 8007e5e:	2c00      	cmp	r4, #0
 8007e60:	dc37      	bgt.n	8007ed2 <print_e+0xc4>
 8007e62:	2e67      	cmp	r6, #103	; 0x67
 8007e64:	d046      	beq.n	8007ef4 <print_e+0xe6>
 8007e66:	2e47      	cmp	r6, #71	; 0x47
 8007e68:	d046      	beq.n	8007ef8 <print_e+0xea>
 8007e6a:	212e      	movs	r1, #46	; 0x2e
 8007e6c:	2030      	movs	r0, #48	; 0x30
 8007e6e:	2c00      	cmp	r4, #0
 8007e70:	dc38      	bgt.n	8007ee4 <print_e+0xd6>
 8007e72:	1e51      	subs	r1, r2, #1
 8007e74:	2900      	cmp	r1, #0
 8007e76:	bfb8      	it	lt
 8007e78:	f1c2 0201 	rsblt	r2, r2, #1
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	9105      	str	r1, [sp, #20]
 8007e80:	bfac      	ite	ge
 8007e82:	222b      	movge	r2, #43	; 0x2b
 8007e84:	9205      	strlt	r2, [sp, #20]
 8007e86:	f800 6b02 	strb.w	r6, [r0], #2
 8007e8a:	bfa8      	it	ge
 8007e8c:	705a      	strbge	r2, [r3, #1]
 8007e8e:	9a05      	ldr	r2, [sp, #20]
 8007e90:	bfbc      	itt	lt
 8007e92:	212d      	movlt	r1, #45	; 0x2d
 8007e94:	7059      	strblt	r1, [r3, #1]
 8007e96:	2a63      	cmp	r2, #99	; 0x63
 8007e98:	dd0b      	ble.n	8007eb2 <print_e+0xa4>
 8007e9a:	2164      	movs	r1, #100	; 0x64
 8007e9c:	fb92 f1f1 	sdiv	r1, r2, r1
 8007ea0:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8007ea4:	1cd8      	adds	r0, r3, #3
 8007ea6:	709c      	strb	r4, [r3, #2]
 8007ea8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007eac:	fb03 2201 	mla	r2, r3, r1, r2
 8007eb0:	9205      	str	r2, [sp, #20]
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	220a      	movs	r2, #10
 8007eb6:	fb93 f2f2 	sdiv	r2, r3, r2
 8007eba:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8007ebe:	7001      	strb	r1, [r0, #0]
 8007ec0:	f06f 0109 	mvn.w	r1, #9
 8007ec4:	fb01 3302 	mla	r3, r1, r2, r3
 8007ec8:	3330      	adds	r3, #48	; 0x30
 8007eca:	7043      	strb	r3, [r0, #1]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	7083      	strb	r3, [r0, #2]
 8007ed0:	e7b8      	b.n	8007e44 <print_e+0x36>
 8007ed2:	b10d      	cbz	r5, 8007ed8 <print_e+0xca>
 8007ed4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ed8:	7805      	ldrb	r5, [r0, #0]
 8007eda:	f803 5b01 	strb.w	r5, [r3], #1
 8007ede:	3c01      	subs	r4, #1
 8007ee0:	2500      	movs	r5, #0
 8007ee2:	e7b9      	b.n	8007e58 <print_e+0x4a>
 8007ee4:	b10d      	cbz	r5, 8007eea <print_e+0xdc>
 8007ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eea:	f803 0b01 	strb.w	r0, [r3], #1
 8007eee:	3c01      	subs	r4, #1
 8007ef0:	2500      	movs	r5, #0
 8007ef2:	e7bc      	b.n	8007e6e <print_e+0x60>
 8007ef4:	2665      	movs	r6, #101	; 0x65
 8007ef6:	e7bc      	b.n	8007e72 <print_e+0x64>
 8007ef8:	2645      	movs	r6, #69	; 0x45
 8007efa:	e7ba      	b.n	8007e72 <print_e+0x64>
 8007efc:	0000      	movs	r0, r0
	...

08007f00 <_gcvt>:
 8007f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f04:	ec55 4b10 	vmov	r4, r5, d0
 8007f08:	b088      	sub	sp, #32
 8007f0a:	4681      	mov	r9, r0
 8007f0c:	4688      	mov	r8, r1
 8007f0e:	4616      	mov	r6, r2
 8007f10:	469a      	mov	sl, r3
 8007f12:	ee10 0a10 	vmov	r0, s0
 8007f16:	2200      	movs	r2, #0
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8007f1e:	f7f8 fddd 	bl	8000adc <__aeabi_dcmplt>
 8007f22:	b110      	cbz	r0, 8007f2a <_gcvt+0x2a>
 8007f24:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007f28:	461d      	mov	r5, r3
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	4620      	mov	r0, r4
 8007f30:	4629      	mov	r1, r5
 8007f32:	f7f8 fdc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f36:	b138      	cbz	r0, 8007f48 <_gcvt+0x48>
 8007f38:	2330      	movs	r3, #48	; 0x30
 8007f3a:	7033      	strb	r3, [r6, #0]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	7073      	strb	r3, [r6, #1]
 8007f40:	4630      	mov	r0, r6
 8007f42:	b008      	add	sp, #32
 8007f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f48:	a34b      	add	r3, pc, #300	; (adr r3, 8008078 <_gcvt+0x178>)
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 fdcd 	bl	8000af0 <__aeabi_dcmple>
 8007f56:	b158      	cbz	r0, 8007f70 <_gcvt+0x70>
 8007f58:	f108 31ff 	add.w	r1, r8, #4294967295
 8007f5c:	9100      	str	r1, [sp, #0]
 8007f5e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8007f62:	4622      	mov	r2, r4
 8007f64:	462b      	mov	r3, r5
 8007f66:	4631      	mov	r1, r6
 8007f68:	4648      	mov	r0, r9
 8007f6a:	f7ff ff50 	bl	8007e0e <print_e>
 8007f6e:	e7e7      	b.n	8007f40 <_gcvt+0x40>
 8007f70:	4640      	mov	r0, r8
 8007f72:	f000 fc09 	bl	8008788 <_mprec_log10>
 8007f76:	4622      	mov	r2, r4
 8007f78:	ec51 0b10 	vmov	r0, r1, d0
 8007f7c:	462b      	mov	r3, r5
 8007f7e:	f7f8 fdb7 	bl	8000af0 <__aeabi_dcmple>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d1e8      	bne.n	8007f58 <_gcvt+0x58>
 8007f86:	ab07      	add	r3, sp, #28
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	ab06      	add	r3, sp, #24
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	4642      	mov	r2, r8
 8007f90:	ab05      	add	r3, sp, #20
 8007f92:	ec45 4b10 	vmov	d0, r4, r5
 8007f96:	2102      	movs	r1, #2
 8007f98:	4648      	mov	r0, r9
 8007f9a:	f000 fd81 	bl	8008aa0 <_dtoa_r>
 8007f9e:	9a05      	ldr	r2, [sp, #20]
 8007fa0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d00e      	beq.n	8007fc6 <_gcvt+0xc6>
 8007fa8:	4633      	mov	r3, r6
 8007faa:	44b0      	add	r8, r6
 8007fac:	4605      	mov	r5, r0
 8007fae:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007fb2:	9c05      	ldr	r4, [sp, #20]
 8007fb4:	eba8 0203 	sub.w	r2, r8, r3
 8007fb8:	b109      	cbz	r1, 8007fbe <_gcvt+0xbe>
 8007fba:	2c00      	cmp	r4, #0
 8007fbc:	dc08      	bgt.n	8007fd0 <_gcvt+0xd0>
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8007fc4:	e00d      	b.n	8007fe2 <_gcvt+0xe2>
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f000 fcb5 	bl	8008938 <strcpy>
 8007fce:	e7b7      	b.n	8007f40 <_gcvt+0x40>
 8007fd0:	3c01      	subs	r4, #1
 8007fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd6:	9405      	str	r4, [sp, #20]
 8007fd8:	e7e8      	b.n	8007fac <_gcvt+0xac>
 8007fda:	f803 cb01 	strb.w	ip, [r3], #1
 8007fde:	3a01      	subs	r2, #1
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	2c00      	cmp	r4, #0
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	dc2a      	bgt.n	800803e <_gcvt+0x13e>
 8007fe8:	b101      	cbz	r1, 8007fec <_gcvt+0xec>
 8007fea:	9405      	str	r4, [sp, #20]
 8007fec:	b90f      	cbnz	r7, 8007ff2 <_gcvt+0xf2>
 8007fee:	7829      	ldrb	r1, [r5, #0]
 8007ff0:	b311      	cbz	r1, 8008038 <_gcvt+0x138>
 8007ff2:	42b3      	cmp	r3, r6
 8007ff4:	bf04      	itt	eq
 8007ff6:	2130      	moveq	r1, #48	; 0x30
 8007ff8:	f803 1b01 	strbeq.w	r1, [r3], #1
 8007ffc:	212e      	movs	r1, #46	; 0x2e
 8007ffe:	7019      	strb	r1, [r3, #0]
 8008000:	9905      	ldr	r1, [sp, #20]
 8008002:	4618      	mov	r0, r3
 8008004:	2400      	movs	r4, #0
 8008006:	eba1 0c03 	sub.w	ip, r1, r3
 800800a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800800e:	eb1c 0f00 	cmn.w	ip, r0
 8008012:	d41c      	bmi.n	800804e <_gcvt+0x14e>
 8008014:	2900      	cmp	r1, #0
 8008016:	f1c1 0000 	rsb	r0, r1, #0
 800801a:	bfc8      	it	gt
 800801c:	2000      	movgt	r0, #0
 800801e:	f100 0c01 	add.w	ip, r0, #1
 8008022:	4463      	add	r3, ip
 8008024:	4401      	add	r1, r0
 8008026:	b104      	cbz	r4, 800802a <_gcvt+0x12a>
 8008028:	9105      	str	r1, [sp, #20]
 800802a:	1e69      	subs	r1, r5, #1
 800802c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008030:	b108      	cbz	r0, 8008036 <_gcvt+0x136>
 8008032:	2a00      	cmp	r2, #0
 8008034:	dc0f      	bgt.n	8008056 <_gcvt+0x156>
 8008036:	b9df      	cbnz	r7, 8008070 <_gcvt+0x170>
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]
 800803c:	e780      	b.n	8007f40 <_gcvt+0x40>
 800803e:	2a00      	cmp	r2, #0
 8008040:	f104 34ff 	add.w	r4, r4, #4294967295
 8008044:	dcc9      	bgt.n	8007fda <_gcvt+0xda>
 8008046:	2900      	cmp	r1, #0
 8008048:	d0d0      	beq.n	8007fec <_gcvt+0xec>
 800804a:	9005      	str	r0, [sp, #20]
 800804c:	e7ce      	b.n	8007fec <_gcvt+0xec>
 800804e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8008052:	2401      	movs	r4, #1
 8008054:	e7db      	b.n	800800e <_gcvt+0x10e>
 8008056:	f803 0b01 	strb.w	r0, [r3], #1
 800805a:	3a01      	subs	r2, #1
 800805c:	e7e6      	b.n	800802c <_gcvt+0x12c>
 800805e:	f801 5b01 	strb.w	r5, [r1], #1
 8008062:	1a60      	subs	r0, r4, r1
 8008064:	2800      	cmp	r0, #0
 8008066:	dcfa      	bgt.n	800805e <_gcvt+0x15e>
 8008068:	2a00      	cmp	r2, #0
 800806a:	bfa8      	it	ge
 800806c:	189b      	addge	r3, r3, r2
 800806e:	e7e3      	b.n	8008038 <_gcvt+0x138>
 8008070:	4619      	mov	r1, r3
 8008072:	189c      	adds	r4, r3, r2
 8008074:	2530      	movs	r5, #48	; 0x30
 8008076:	e7f4      	b.n	8008062 <_gcvt+0x162>
 8008078:	eb1c432d 	.word	0xeb1c432d
 800807c:	3f1a36e2 	.word	0x3f1a36e2

08008080 <_Balloc>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008084:	4604      	mov	r4, r0
 8008086:	460d      	mov	r5, r1
 8008088:	b976      	cbnz	r6, 80080a8 <_Balloc+0x28>
 800808a:	2010      	movs	r0, #16
 800808c:	f001 fb08 	bl	80096a0 <malloc>
 8008090:	4602      	mov	r2, r0
 8008092:	6260      	str	r0, [r4, #36]	; 0x24
 8008094:	b920      	cbnz	r0, 80080a0 <_Balloc+0x20>
 8008096:	4b18      	ldr	r3, [pc, #96]	; (80080f8 <_Balloc+0x78>)
 8008098:	4818      	ldr	r0, [pc, #96]	; (80080fc <_Balloc+0x7c>)
 800809a:	2166      	movs	r1, #102	; 0x66
 800809c:	f000 fc54 	bl	8008948 <__assert_func>
 80080a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080a4:	6006      	str	r6, [r0, #0]
 80080a6:	60c6      	str	r6, [r0, #12]
 80080a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080aa:	68f3      	ldr	r3, [r6, #12]
 80080ac:	b183      	cbz	r3, 80080d0 <_Balloc+0x50>
 80080ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080b6:	b9b8      	cbnz	r0, 80080e8 <_Balloc+0x68>
 80080b8:	2101      	movs	r1, #1
 80080ba:	fa01 f605 	lsl.w	r6, r1, r5
 80080be:	1d72      	adds	r2, r6, #5
 80080c0:	0092      	lsls	r2, r2, #2
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 fb7e 	bl	80087c4 <_calloc_r>
 80080c8:	b160      	cbz	r0, 80080e4 <_Balloc+0x64>
 80080ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080ce:	e00e      	b.n	80080ee <_Balloc+0x6e>
 80080d0:	2221      	movs	r2, #33	; 0x21
 80080d2:	2104      	movs	r1, #4
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fb75 	bl	80087c4 <_calloc_r>
 80080da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080dc:	60f0      	str	r0, [r6, #12]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e4      	bne.n	80080ae <_Balloc+0x2e>
 80080e4:	2000      	movs	r0, #0
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	6802      	ldr	r2, [r0, #0]
 80080ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080ee:	2300      	movs	r3, #0
 80080f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080f4:	e7f7      	b.n	80080e6 <_Balloc+0x66>
 80080f6:	bf00      	nop
 80080f8:	0800a584 	.word	0x0800a584
 80080fc:	0800a59b 	.word	0x0800a59b

08008100 <_Bfree>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008104:	4605      	mov	r5, r0
 8008106:	460c      	mov	r4, r1
 8008108:	b976      	cbnz	r6, 8008128 <_Bfree+0x28>
 800810a:	2010      	movs	r0, #16
 800810c:	f001 fac8 	bl	80096a0 <malloc>
 8008110:	4602      	mov	r2, r0
 8008112:	6268      	str	r0, [r5, #36]	; 0x24
 8008114:	b920      	cbnz	r0, 8008120 <_Bfree+0x20>
 8008116:	4b09      	ldr	r3, [pc, #36]	; (800813c <_Bfree+0x3c>)
 8008118:	4809      	ldr	r0, [pc, #36]	; (8008140 <_Bfree+0x40>)
 800811a:	218a      	movs	r1, #138	; 0x8a
 800811c:	f000 fc14 	bl	8008948 <__assert_func>
 8008120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008124:	6006      	str	r6, [r0, #0]
 8008126:	60c6      	str	r6, [r0, #12]
 8008128:	b13c      	cbz	r4, 800813a <_Bfree+0x3a>
 800812a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800812c:	6862      	ldr	r2, [r4, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008134:	6021      	str	r1, [r4, #0]
 8008136:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800813a:	bd70      	pop	{r4, r5, r6, pc}
 800813c:	0800a584 	.word	0x0800a584
 8008140:	0800a59b 	.word	0x0800a59b

08008144 <__multadd>:
 8008144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008148:	690d      	ldr	r5, [r1, #16]
 800814a:	4607      	mov	r7, r0
 800814c:	460c      	mov	r4, r1
 800814e:	461e      	mov	r6, r3
 8008150:	f101 0c14 	add.w	ip, r1, #20
 8008154:	2000      	movs	r0, #0
 8008156:	f8dc 3000 	ldr.w	r3, [ip]
 800815a:	b299      	uxth	r1, r3
 800815c:	fb02 6101 	mla	r1, r2, r1, r6
 8008160:	0c1e      	lsrs	r6, r3, #16
 8008162:	0c0b      	lsrs	r3, r1, #16
 8008164:	fb02 3306 	mla	r3, r2, r6, r3
 8008168:	b289      	uxth	r1, r1
 800816a:	3001      	adds	r0, #1
 800816c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008170:	4285      	cmp	r5, r0
 8008172:	f84c 1b04 	str.w	r1, [ip], #4
 8008176:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800817a:	dcec      	bgt.n	8008156 <__multadd+0x12>
 800817c:	b30e      	cbz	r6, 80081c2 <__multadd+0x7e>
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	42ab      	cmp	r3, r5
 8008182:	dc19      	bgt.n	80081b8 <__multadd+0x74>
 8008184:	6861      	ldr	r1, [r4, #4]
 8008186:	4638      	mov	r0, r7
 8008188:	3101      	adds	r1, #1
 800818a:	f7ff ff79 	bl	8008080 <_Balloc>
 800818e:	4680      	mov	r8, r0
 8008190:	b928      	cbnz	r0, 800819e <__multadd+0x5a>
 8008192:	4602      	mov	r2, r0
 8008194:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <__multadd+0x84>)
 8008196:	480d      	ldr	r0, [pc, #52]	; (80081cc <__multadd+0x88>)
 8008198:	21b5      	movs	r1, #181	; 0xb5
 800819a:	f000 fbd5 	bl	8008948 <__assert_func>
 800819e:	6922      	ldr	r2, [r4, #16]
 80081a0:	3202      	adds	r2, #2
 80081a2:	f104 010c 	add.w	r1, r4, #12
 80081a6:	0092      	lsls	r2, r2, #2
 80081a8:	300c      	adds	r0, #12
 80081aa:	f001 fa81 	bl	80096b0 <memcpy>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4638      	mov	r0, r7
 80081b2:	f7ff ffa5 	bl	8008100 <_Bfree>
 80081b6:	4644      	mov	r4, r8
 80081b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081bc:	3501      	adds	r5, #1
 80081be:	615e      	str	r6, [r3, #20]
 80081c0:	6125      	str	r5, [r4, #16]
 80081c2:	4620      	mov	r0, r4
 80081c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c8:	0800a5f7 	.word	0x0800a5f7
 80081cc:	0800a59b 	.word	0x0800a59b

080081d0 <__hi0bits>:
 80081d0:	0c03      	lsrs	r3, r0, #16
 80081d2:	041b      	lsls	r3, r3, #16
 80081d4:	b9d3      	cbnz	r3, 800820c <__hi0bits+0x3c>
 80081d6:	0400      	lsls	r0, r0, #16
 80081d8:	2310      	movs	r3, #16
 80081da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081de:	bf04      	itt	eq
 80081e0:	0200      	lsleq	r0, r0, #8
 80081e2:	3308      	addeq	r3, #8
 80081e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081e8:	bf04      	itt	eq
 80081ea:	0100      	lsleq	r0, r0, #4
 80081ec:	3304      	addeq	r3, #4
 80081ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081f2:	bf04      	itt	eq
 80081f4:	0080      	lsleq	r0, r0, #2
 80081f6:	3302      	addeq	r3, #2
 80081f8:	2800      	cmp	r0, #0
 80081fa:	db05      	blt.n	8008208 <__hi0bits+0x38>
 80081fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008200:	f103 0301 	add.w	r3, r3, #1
 8008204:	bf08      	it	eq
 8008206:	2320      	moveq	r3, #32
 8008208:	4618      	mov	r0, r3
 800820a:	4770      	bx	lr
 800820c:	2300      	movs	r3, #0
 800820e:	e7e4      	b.n	80081da <__hi0bits+0xa>

08008210 <__lo0bits>:
 8008210:	6803      	ldr	r3, [r0, #0]
 8008212:	f013 0207 	ands.w	r2, r3, #7
 8008216:	4601      	mov	r1, r0
 8008218:	d00b      	beq.n	8008232 <__lo0bits+0x22>
 800821a:	07da      	lsls	r2, r3, #31
 800821c:	d423      	bmi.n	8008266 <__lo0bits+0x56>
 800821e:	0798      	lsls	r0, r3, #30
 8008220:	bf49      	itett	mi
 8008222:	085b      	lsrmi	r3, r3, #1
 8008224:	089b      	lsrpl	r3, r3, #2
 8008226:	2001      	movmi	r0, #1
 8008228:	600b      	strmi	r3, [r1, #0]
 800822a:	bf5c      	itt	pl
 800822c:	600b      	strpl	r3, [r1, #0]
 800822e:	2002      	movpl	r0, #2
 8008230:	4770      	bx	lr
 8008232:	b298      	uxth	r0, r3
 8008234:	b9a8      	cbnz	r0, 8008262 <__lo0bits+0x52>
 8008236:	0c1b      	lsrs	r3, r3, #16
 8008238:	2010      	movs	r0, #16
 800823a:	b2da      	uxtb	r2, r3
 800823c:	b90a      	cbnz	r2, 8008242 <__lo0bits+0x32>
 800823e:	3008      	adds	r0, #8
 8008240:	0a1b      	lsrs	r3, r3, #8
 8008242:	071a      	lsls	r2, r3, #28
 8008244:	bf04      	itt	eq
 8008246:	091b      	lsreq	r3, r3, #4
 8008248:	3004      	addeq	r0, #4
 800824a:	079a      	lsls	r2, r3, #30
 800824c:	bf04      	itt	eq
 800824e:	089b      	lsreq	r3, r3, #2
 8008250:	3002      	addeq	r0, #2
 8008252:	07da      	lsls	r2, r3, #31
 8008254:	d403      	bmi.n	800825e <__lo0bits+0x4e>
 8008256:	085b      	lsrs	r3, r3, #1
 8008258:	f100 0001 	add.w	r0, r0, #1
 800825c:	d005      	beq.n	800826a <__lo0bits+0x5a>
 800825e:	600b      	str	r3, [r1, #0]
 8008260:	4770      	bx	lr
 8008262:	4610      	mov	r0, r2
 8008264:	e7e9      	b.n	800823a <__lo0bits+0x2a>
 8008266:	2000      	movs	r0, #0
 8008268:	4770      	bx	lr
 800826a:	2020      	movs	r0, #32
 800826c:	4770      	bx	lr
	...

08008270 <__i2b>:
 8008270:	b510      	push	{r4, lr}
 8008272:	460c      	mov	r4, r1
 8008274:	2101      	movs	r1, #1
 8008276:	f7ff ff03 	bl	8008080 <_Balloc>
 800827a:	4602      	mov	r2, r0
 800827c:	b928      	cbnz	r0, 800828a <__i2b+0x1a>
 800827e:	4b05      	ldr	r3, [pc, #20]	; (8008294 <__i2b+0x24>)
 8008280:	4805      	ldr	r0, [pc, #20]	; (8008298 <__i2b+0x28>)
 8008282:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008286:	f000 fb5f 	bl	8008948 <__assert_func>
 800828a:	2301      	movs	r3, #1
 800828c:	6144      	str	r4, [r0, #20]
 800828e:	6103      	str	r3, [r0, #16]
 8008290:	bd10      	pop	{r4, pc}
 8008292:	bf00      	nop
 8008294:	0800a5f7 	.word	0x0800a5f7
 8008298:	0800a59b 	.word	0x0800a59b

0800829c <__multiply>:
 800829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a0:	4691      	mov	r9, r2
 80082a2:	690a      	ldr	r2, [r1, #16]
 80082a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	bfb8      	it	lt
 80082ac:	460b      	movlt	r3, r1
 80082ae:	460c      	mov	r4, r1
 80082b0:	bfbc      	itt	lt
 80082b2:	464c      	movlt	r4, r9
 80082b4:	4699      	movlt	r9, r3
 80082b6:	6927      	ldr	r7, [r4, #16]
 80082b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082bc:	68a3      	ldr	r3, [r4, #8]
 80082be:	6861      	ldr	r1, [r4, #4]
 80082c0:	eb07 060a 	add.w	r6, r7, sl
 80082c4:	42b3      	cmp	r3, r6
 80082c6:	b085      	sub	sp, #20
 80082c8:	bfb8      	it	lt
 80082ca:	3101      	addlt	r1, #1
 80082cc:	f7ff fed8 	bl	8008080 <_Balloc>
 80082d0:	b930      	cbnz	r0, 80082e0 <__multiply+0x44>
 80082d2:	4602      	mov	r2, r0
 80082d4:	4b44      	ldr	r3, [pc, #272]	; (80083e8 <__multiply+0x14c>)
 80082d6:	4845      	ldr	r0, [pc, #276]	; (80083ec <__multiply+0x150>)
 80082d8:	f240 115d 	movw	r1, #349	; 0x15d
 80082dc:	f000 fb34 	bl	8008948 <__assert_func>
 80082e0:	f100 0514 	add.w	r5, r0, #20
 80082e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082e8:	462b      	mov	r3, r5
 80082ea:	2200      	movs	r2, #0
 80082ec:	4543      	cmp	r3, r8
 80082ee:	d321      	bcc.n	8008334 <__multiply+0x98>
 80082f0:	f104 0314 	add.w	r3, r4, #20
 80082f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082f8:	f109 0314 	add.w	r3, r9, #20
 80082fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008300:	9202      	str	r2, [sp, #8]
 8008302:	1b3a      	subs	r2, r7, r4
 8008304:	3a15      	subs	r2, #21
 8008306:	f022 0203 	bic.w	r2, r2, #3
 800830a:	3204      	adds	r2, #4
 800830c:	f104 0115 	add.w	r1, r4, #21
 8008310:	428f      	cmp	r7, r1
 8008312:	bf38      	it	cc
 8008314:	2204      	movcc	r2, #4
 8008316:	9201      	str	r2, [sp, #4]
 8008318:	9a02      	ldr	r2, [sp, #8]
 800831a:	9303      	str	r3, [sp, #12]
 800831c:	429a      	cmp	r2, r3
 800831e:	d80c      	bhi.n	800833a <__multiply+0x9e>
 8008320:	2e00      	cmp	r6, #0
 8008322:	dd03      	ble.n	800832c <__multiply+0x90>
 8008324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008328:	2b00      	cmp	r3, #0
 800832a:	d05a      	beq.n	80083e2 <__multiply+0x146>
 800832c:	6106      	str	r6, [r0, #16]
 800832e:	b005      	add	sp, #20
 8008330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008334:	f843 2b04 	str.w	r2, [r3], #4
 8008338:	e7d8      	b.n	80082ec <__multiply+0x50>
 800833a:	f8b3 a000 	ldrh.w	sl, [r3]
 800833e:	f1ba 0f00 	cmp.w	sl, #0
 8008342:	d024      	beq.n	800838e <__multiply+0xf2>
 8008344:	f104 0e14 	add.w	lr, r4, #20
 8008348:	46a9      	mov	r9, r5
 800834a:	f04f 0c00 	mov.w	ip, #0
 800834e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008352:	f8d9 1000 	ldr.w	r1, [r9]
 8008356:	fa1f fb82 	uxth.w	fp, r2
 800835a:	b289      	uxth	r1, r1
 800835c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008360:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008364:	f8d9 2000 	ldr.w	r2, [r9]
 8008368:	4461      	add	r1, ip
 800836a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800836e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008372:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008376:	b289      	uxth	r1, r1
 8008378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800837c:	4577      	cmp	r7, lr
 800837e:	f849 1b04 	str.w	r1, [r9], #4
 8008382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008386:	d8e2      	bhi.n	800834e <__multiply+0xb2>
 8008388:	9a01      	ldr	r2, [sp, #4]
 800838a:	f845 c002 	str.w	ip, [r5, r2]
 800838e:	9a03      	ldr	r2, [sp, #12]
 8008390:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008394:	3304      	adds	r3, #4
 8008396:	f1b9 0f00 	cmp.w	r9, #0
 800839a:	d020      	beq.n	80083de <__multiply+0x142>
 800839c:	6829      	ldr	r1, [r5, #0]
 800839e:	f104 0c14 	add.w	ip, r4, #20
 80083a2:	46ae      	mov	lr, r5
 80083a4:	f04f 0a00 	mov.w	sl, #0
 80083a8:	f8bc b000 	ldrh.w	fp, [ip]
 80083ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083b0:	fb09 220b 	mla	r2, r9, fp, r2
 80083b4:	4492      	add	sl, r2
 80083b6:	b289      	uxth	r1, r1
 80083b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80083bc:	f84e 1b04 	str.w	r1, [lr], #4
 80083c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80083c4:	f8be 1000 	ldrh.w	r1, [lr]
 80083c8:	0c12      	lsrs	r2, r2, #16
 80083ca:	fb09 1102 	mla	r1, r9, r2, r1
 80083ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80083d2:	4567      	cmp	r7, ip
 80083d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083d8:	d8e6      	bhi.n	80083a8 <__multiply+0x10c>
 80083da:	9a01      	ldr	r2, [sp, #4]
 80083dc:	50a9      	str	r1, [r5, r2]
 80083de:	3504      	adds	r5, #4
 80083e0:	e79a      	b.n	8008318 <__multiply+0x7c>
 80083e2:	3e01      	subs	r6, #1
 80083e4:	e79c      	b.n	8008320 <__multiply+0x84>
 80083e6:	bf00      	nop
 80083e8:	0800a5f7 	.word	0x0800a5f7
 80083ec:	0800a59b 	.word	0x0800a59b

080083f0 <__pow5mult>:
 80083f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f4:	4615      	mov	r5, r2
 80083f6:	f012 0203 	ands.w	r2, r2, #3
 80083fa:	4606      	mov	r6, r0
 80083fc:	460f      	mov	r7, r1
 80083fe:	d007      	beq.n	8008410 <__pow5mult+0x20>
 8008400:	4c25      	ldr	r4, [pc, #148]	; (8008498 <__pow5mult+0xa8>)
 8008402:	3a01      	subs	r2, #1
 8008404:	2300      	movs	r3, #0
 8008406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800840a:	f7ff fe9b 	bl	8008144 <__multadd>
 800840e:	4607      	mov	r7, r0
 8008410:	10ad      	asrs	r5, r5, #2
 8008412:	d03d      	beq.n	8008490 <__pow5mult+0xa0>
 8008414:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008416:	b97c      	cbnz	r4, 8008438 <__pow5mult+0x48>
 8008418:	2010      	movs	r0, #16
 800841a:	f001 f941 	bl	80096a0 <malloc>
 800841e:	4602      	mov	r2, r0
 8008420:	6270      	str	r0, [r6, #36]	; 0x24
 8008422:	b928      	cbnz	r0, 8008430 <__pow5mult+0x40>
 8008424:	4b1d      	ldr	r3, [pc, #116]	; (800849c <__pow5mult+0xac>)
 8008426:	481e      	ldr	r0, [pc, #120]	; (80084a0 <__pow5mult+0xb0>)
 8008428:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800842c:	f000 fa8c 	bl	8008948 <__assert_func>
 8008430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008434:	6004      	str	r4, [r0, #0]
 8008436:	60c4      	str	r4, [r0, #12]
 8008438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800843c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008440:	b94c      	cbnz	r4, 8008456 <__pow5mult+0x66>
 8008442:	f240 2171 	movw	r1, #625	; 0x271
 8008446:	4630      	mov	r0, r6
 8008448:	f7ff ff12 	bl	8008270 <__i2b>
 800844c:	2300      	movs	r3, #0
 800844e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008452:	4604      	mov	r4, r0
 8008454:	6003      	str	r3, [r0, #0]
 8008456:	f04f 0900 	mov.w	r9, #0
 800845a:	07eb      	lsls	r3, r5, #31
 800845c:	d50a      	bpl.n	8008474 <__pow5mult+0x84>
 800845e:	4639      	mov	r1, r7
 8008460:	4622      	mov	r2, r4
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff ff1a 	bl	800829c <__multiply>
 8008468:	4639      	mov	r1, r7
 800846a:	4680      	mov	r8, r0
 800846c:	4630      	mov	r0, r6
 800846e:	f7ff fe47 	bl	8008100 <_Bfree>
 8008472:	4647      	mov	r7, r8
 8008474:	106d      	asrs	r5, r5, #1
 8008476:	d00b      	beq.n	8008490 <__pow5mult+0xa0>
 8008478:	6820      	ldr	r0, [r4, #0]
 800847a:	b938      	cbnz	r0, 800848c <__pow5mult+0x9c>
 800847c:	4622      	mov	r2, r4
 800847e:	4621      	mov	r1, r4
 8008480:	4630      	mov	r0, r6
 8008482:	f7ff ff0b 	bl	800829c <__multiply>
 8008486:	6020      	str	r0, [r4, #0]
 8008488:	f8c0 9000 	str.w	r9, [r0]
 800848c:	4604      	mov	r4, r0
 800848e:	e7e4      	b.n	800845a <__pow5mult+0x6a>
 8008490:	4638      	mov	r0, r7
 8008492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008496:	bf00      	nop
 8008498:	0800a6f8 	.word	0x0800a6f8
 800849c:	0800a584 	.word	0x0800a584
 80084a0:	0800a59b 	.word	0x0800a59b

080084a4 <__lshift>:
 80084a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a8:	460c      	mov	r4, r1
 80084aa:	6849      	ldr	r1, [r1, #4]
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084b2:	68a3      	ldr	r3, [r4, #8]
 80084b4:	4607      	mov	r7, r0
 80084b6:	4691      	mov	r9, r2
 80084b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084bc:	f108 0601 	add.w	r6, r8, #1
 80084c0:	42b3      	cmp	r3, r6
 80084c2:	db0b      	blt.n	80084dc <__lshift+0x38>
 80084c4:	4638      	mov	r0, r7
 80084c6:	f7ff fddb 	bl	8008080 <_Balloc>
 80084ca:	4605      	mov	r5, r0
 80084cc:	b948      	cbnz	r0, 80084e2 <__lshift+0x3e>
 80084ce:	4602      	mov	r2, r0
 80084d0:	4b2a      	ldr	r3, [pc, #168]	; (800857c <__lshift+0xd8>)
 80084d2:	482b      	ldr	r0, [pc, #172]	; (8008580 <__lshift+0xdc>)
 80084d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084d8:	f000 fa36 	bl	8008948 <__assert_func>
 80084dc:	3101      	adds	r1, #1
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	e7ee      	b.n	80084c0 <__lshift+0x1c>
 80084e2:	2300      	movs	r3, #0
 80084e4:	f100 0114 	add.w	r1, r0, #20
 80084e8:	f100 0210 	add.w	r2, r0, #16
 80084ec:	4618      	mov	r0, r3
 80084ee:	4553      	cmp	r3, sl
 80084f0:	db37      	blt.n	8008562 <__lshift+0xbe>
 80084f2:	6920      	ldr	r0, [r4, #16]
 80084f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084f8:	f104 0314 	add.w	r3, r4, #20
 80084fc:	f019 091f 	ands.w	r9, r9, #31
 8008500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008504:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008508:	d02f      	beq.n	800856a <__lshift+0xc6>
 800850a:	f1c9 0e20 	rsb	lr, r9, #32
 800850e:	468a      	mov	sl, r1
 8008510:	f04f 0c00 	mov.w	ip, #0
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	fa02 f209 	lsl.w	r2, r2, r9
 800851a:	ea42 020c 	orr.w	r2, r2, ip
 800851e:	f84a 2b04 	str.w	r2, [sl], #4
 8008522:	f853 2b04 	ldr.w	r2, [r3], #4
 8008526:	4298      	cmp	r0, r3
 8008528:	fa22 fc0e 	lsr.w	ip, r2, lr
 800852c:	d8f2      	bhi.n	8008514 <__lshift+0x70>
 800852e:	1b03      	subs	r3, r0, r4
 8008530:	3b15      	subs	r3, #21
 8008532:	f023 0303 	bic.w	r3, r3, #3
 8008536:	3304      	adds	r3, #4
 8008538:	f104 0215 	add.w	r2, r4, #21
 800853c:	4290      	cmp	r0, r2
 800853e:	bf38      	it	cc
 8008540:	2304      	movcc	r3, #4
 8008542:	f841 c003 	str.w	ip, [r1, r3]
 8008546:	f1bc 0f00 	cmp.w	ip, #0
 800854a:	d001      	beq.n	8008550 <__lshift+0xac>
 800854c:	f108 0602 	add.w	r6, r8, #2
 8008550:	3e01      	subs	r6, #1
 8008552:	4638      	mov	r0, r7
 8008554:	612e      	str	r6, [r5, #16]
 8008556:	4621      	mov	r1, r4
 8008558:	f7ff fdd2 	bl	8008100 <_Bfree>
 800855c:	4628      	mov	r0, r5
 800855e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008562:	f842 0f04 	str.w	r0, [r2, #4]!
 8008566:	3301      	adds	r3, #1
 8008568:	e7c1      	b.n	80084ee <__lshift+0x4a>
 800856a:	3904      	subs	r1, #4
 800856c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008570:	f841 2f04 	str.w	r2, [r1, #4]!
 8008574:	4298      	cmp	r0, r3
 8008576:	d8f9      	bhi.n	800856c <__lshift+0xc8>
 8008578:	e7ea      	b.n	8008550 <__lshift+0xac>
 800857a:	bf00      	nop
 800857c:	0800a5f7 	.word	0x0800a5f7
 8008580:	0800a59b 	.word	0x0800a59b

08008584 <__mcmp>:
 8008584:	b530      	push	{r4, r5, lr}
 8008586:	6902      	ldr	r2, [r0, #16]
 8008588:	690c      	ldr	r4, [r1, #16]
 800858a:	1b12      	subs	r2, r2, r4
 800858c:	d10e      	bne.n	80085ac <__mcmp+0x28>
 800858e:	f100 0314 	add.w	r3, r0, #20
 8008592:	3114      	adds	r1, #20
 8008594:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008598:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800859c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085a4:	42a5      	cmp	r5, r4
 80085a6:	d003      	beq.n	80085b0 <__mcmp+0x2c>
 80085a8:	d305      	bcc.n	80085b6 <__mcmp+0x32>
 80085aa:	2201      	movs	r2, #1
 80085ac:	4610      	mov	r0, r2
 80085ae:	bd30      	pop	{r4, r5, pc}
 80085b0:	4283      	cmp	r3, r0
 80085b2:	d3f3      	bcc.n	800859c <__mcmp+0x18>
 80085b4:	e7fa      	b.n	80085ac <__mcmp+0x28>
 80085b6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ba:	e7f7      	b.n	80085ac <__mcmp+0x28>

080085bc <__mdiff>:
 80085bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	460c      	mov	r4, r1
 80085c2:	4606      	mov	r6, r0
 80085c4:	4611      	mov	r1, r2
 80085c6:	4620      	mov	r0, r4
 80085c8:	4690      	mov	r8, r2
 80085ca:	f7ff ffdb 	bl	8008584 <__mcmp>
 80085ce:	1e05      	subs	r5, r0, #0
 80085d0:	d110      	bne.n	80085f4 <__mdiff+0x38>
 80085d2:	4629      	mov	r1, r5
 80085d4:	4630      	mov	r0, r6
 80085d6:	f7ff fd53 	bl	8008080 <_Balloc>
 80085da:	b930      	cbnz	r0, 80085ea <__mdiff+0x2e>
 80085dc:	4b3a      	ldr	r3, [pc, #232]	; (80086c8 <__mdiff+0x10c>)
 80085de:	4602      	mov	r2, r0
 80085e0:	f240 2132 	movw	r1, #562	; 0x232
 80085e4:	4839      	ldr	r0, [pc, #228]	; (80086cc <__mdiff+0x110>)
 80085e6:	f000 f9af 	bl	8008948 <__assert_func>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f4:	bfa4      	itt	ge
 80085f6:	4643      	movge	r3, r8
 80085f8:	46a0      	movge	r8, r4
 80085fa:	4630      	mov	r0, r6
 80085fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008600:	bfa6      	itte	ge
 8008602:	461c      	movge	r4, r3
 8008604:	2500      	movge	r5, #0
 8008606:	2501      	movlt	r5, #1
 8008608:	f7ff fd3a 	bl	8008080 <_Balloc>
 800860c:	b920      	cbnz	r0, 8008618 <__mdiff+0x5c>
 800860e:	4b2e      	ldr	r3, [pc, #184]	; (80086c8 <__mdiff+0x10c>)
 8008610:	4602      	mov	r2, r0
 8008612:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008616:	e7e5      	b.n	80085e4 <__mdiff+0x28>
 8008618:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800861c:	6926      	ldr	r6, [r4, #16]
 800861e:	60c5      	str	r5, [r0, #12]
 8008620:	f104 0914 	add.w	r9, r4, #20
 8008624:	f108 0514 	add.w	r5, r8, #20
 8008628:	f100 0e14 	add.w	lr, r0, #20
 800862c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008630:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008634:	f108 0210 	add.w	r2, r8, #16
 8008638:	46f2      	mov	sl, lr
 800863a:	2100      	movs	r1, #0
 800863c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008640:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008644:	fa1f f883 	uxth.w	r8, r3
 8008648:	fa11 f18b 	uxtah	r1, r1, fp
 800864c:	0c1b      	lsrs	r3, r3, #16
 800864e:	eba1 0808 	sub.w	r8, r1, r8
 8008652:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008656:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800865a:	fa1f f888 	uxth.w	r8, r8
 800865e:	1419      	asrs	r1, r3, #16
 8008660:	454e      	cmp	r6, r9
 8008662:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008666:	f84a 3b04 	str.w	r3, [sl], #4
 800866a:	d8e7      	bhi.n	800863c <__mdiff+0x80>
 800866c:	1b33      	subs	r3, r6, r4
 800866e:	3b15      	subs	r3, #21
 8008670:	f023 0303 	bic.w	r3, r3, #3
 8008674:	3304      	adds	r3, #4
 8008676:	3415      	adds	r4, #21
 8008678:	42a6      	cmp	r6, r4
 800867a:	bf38      	it	cc
 800867c:	2304      	movcc	r3, #4
 800867e:	441d      	add	r5, r3
 8008680:	4473      	add	r3, lr
 8008682:	469e      	mov	lr, r3
 8008684:	462e      	mov	r6, r5
 8008686:	4566      	cmp	r6, ip
 8008688:	d30e      	bcc.n	80086a8 <__mdiff+0xec>
 800868a:	f10c 0203 	add.w	r2, ip, #3
 800868e:	1b52      	subs	r2, r2, r5
 8008690:	f022 0203 	bic.w	r2, r2, #3
 8008694:	3d03      	subs	r5, #3
 8008696:	45ac      	cmp	ip, r5
 8008698:	bf38      	it	cc
 800869a:	2200      	movcc	r2, #0
 800869c:	441a      	add	r2, r3
 800869e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80086a2:	b17b      	cbz	r3, 80086c4 <__mdiff+0x108>
 80086a4:	6107      	str	r7, [r0, #16]
 80086a6:	e7a3      	b.n	80085f0 <__mdiff+0x34>
 80086a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80086ac:	fa11 f288 	uxtah	r2, r1, r8
 80086b0:	1414      	asrs	r4, r2, #16
 80086b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086b6:	b292      	uxth	r2, r2
 80086b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80086bc:	f84e 2b04 	str.w	r2, [lr], #4
 80086c0:	1421      	asrs	r1, r4, #16
 80086c2:	e7e0      	b.n	8008686 <__mdiff+0xca>
 80086c4:	3f01      	subs	r7, #1
 80086c6:	e7ea      	b.n	800869e <__mdiff+0xe2>
 80086c8:	0800a5f7 	.word	0x0800a5f7
 80086cc:	0800a59b 	.word	0x0800a59b

080086d0 <__d2b>:
 80086d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086d4:	4689      	mov	r9, r1
 80086d6:	2101      	movs	r1, #1
 80086d8:	ec57 6b10 	vmov	r6, r7, d0
 80086dc:	4690      	mov	r8, r2
 80086de:	f7ff fccf 	bl	8008080 <_Balloc>
 80086e2:	4604      	mov	r4, r0
 80086e4:	b930      	cbnz	r0, 80086f4 <__d2b+0x24>
 80086e6:	4602      	mov	r2, r0
 80086e8:	4b25      	ldr	r3, [pc, #148]	; (8008780 <__d2b+0xb0>)
 80086ea:	4826      	ldr	r0, [pc, #152]	; (8008784 <__d2b+0xb4>)
 80086ec:	f240 310a 	movw	r1, #778	; 0x30a
 80086f0:	f000 f92a 	bl	8008948 <__assert_func>
 80086f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086fc:	bb35      	cbnz	r5, 800874c <__d2b+0x7c>
 80086fe:	2e00      	cmp	r6, #0
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	d028      	beq.n	8008756 <__d2b+0x86>
 8008704:	4668      	mov	r0, sp
 8008706:	9600      	str	r6, [sp, #0]
 8008708:	f7ff fd82 	bl	8008210 <__lo0bits>
 800870c:	9900      	ldr	r1, [sp, #0]
 800870e:	b300      	cbz	r0, 8008752 <__d2b+0x82>
 8008710:	9a01      	ldr	r2, [sp, #4]
 8008712:	f1c0 0320 	rsb	r3, r0, #32
 8008716:	fa02 f303 	lsl.w	r3, r2, r3
 800871a:	430b      	orrs	r3, r1
 800871c:	40c2      	lsrs	r2, r0
 800871e:	6163      	str	r3, [r4, #20]
 8008720:	9201      	str	r2, [sp, #4]
 8008722:	9b01      	ldr	r3, [sp, #4]
 8008724:	61a3      	str	r3, [r4, #24]
 8008726:	2b00      	cmp	r3, #0
 8008728:	bf14      	ite	ne
 800872a:	2202      	movne	r2, #2
 800872c:	2201      	moveq	r2, #1
 800872e:	6122      	str	r2, [r4, #16]
 8008730:	b1d5      	cbz	r5, 8008768 <__d2b+0x98>
 8008732:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008736:	4405      	add	r5, r0
 8008738:	f8c9 5000 	str.w	r5, [r9]
 800873c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008740:	f8c8 0000 	str.w	r0, [r8]
 8008744:	4620      	mov	r0, r4
 8008746:	b003      	add	sp, #12
 8008748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800874c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008750:	e7d5      	b.n	80086fe <__d2b+0x2e>
 8008752:	6161      	str	r1, [r4, #20]
 8008754:	e7e5      	b.n	8008722 <__d2b+0x52>
 8008756:	a801      	add	r0, sp, #4
 8008758:	f7ff fd5a 	bl	8008210 <__lo0bits>
 800875c:	9b01      	ldr	r3, [sp, #4]
 800875e:	6163      	str	r3, [r4, #20]
 8008760:	2201      	movs	r2, #1
 8008762:	6122      	str	r2, [r4, #16]
 8008764:	3020      	adds	r0, #32
 8008766:	e7e3      	b.n	8008730 <__d2b+0x60>
 8008768:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800876c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008770:	f8c9 0000 	str.w	r0, [r9]
 8008774:	6918      	ldr	r0, [r3, #16]
 8008776:	f7ff fd2b 	bl	80081d0 <__hi0bits>
 800877a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800877e:	e7df      	b.n	8008740 <__d2b+0x70>
 8008780:	0800a5f7 	.word	0x0800a5f7
 8008784:	0800a59b 	.word	0x0800a59b

08008788 <_mprec_log10>:
 8008788:	2817      	cmp	r0, #23
 800878a:	b5d0      	push	{r4, r6, r7, lr}
 800878c:	4604      	mov	r4, r0
 800878e:	dc07      	bgt.n	80087a0 <_mprec_log10+0x18>
 8008790:	4809      	ldr	r0, [pc, #36]	; (80087b8 <_mprec_log10+0x30>)
 8008792:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8008796:	e9d4 0100 	ldrd	r0, r1, [r4]
 800879a:	ec41 0b10 	vmov	d0, r0, r1
 800879e:	bdd0      	pop	{r4, r6, r7, pc}
 80087a0:	4906      	ldr	r1, [pc, #24]	; (80087bc <_mprec_log10+0x34>)
 80087a2:	4f07      	ldr	r7, [pc, #28]	; (80087c0 <_mprec_log10+0x38>)
 80087a4:	2000      	movs	r0, #0
 80087a6:	2600      	movs	r6, #0
 80087a8:	4632      	mov	r2, r6
 80087aa:	463b      	mov	r3, r7
 80087ac:	f7f7 ff24 	bl	80005f8 <__aeabi_dmul>
 80087b0:	3c01      	subs	r4, #1
 80087b2:	d1f9      	bne.n	80087a8 <_mprec_log10+0x20>
 80087b4:	e7f1      	b.n	800879a <_mprec_log10+0x12>
 80087b6:	bf00      	nop
 80087b8:	0800a630 	.word	0x0800a630
 80087bc:	3ff00000 	.word	0x3ff00000
 80087c0:	40240000 	.word	0x40240000

080087c4 <_calloc_r>:
 80087c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087c6:	fba1 2402 	umull	r2, r4, r1, r2
 80087ca:	b94c      	cbnz	r4, 80087e0 <_calloc_r+0x1c>
 80087cc:	4611      	mov	r1, r2
 80087ce:	9201      	str	r2, [sp, #4]
 80087d0:	f000 f82e 	bl	8008830 <_malloc_r>
 80087d4:	9a01      	ldr	r2, [sp, #4]
 80087d6:	4605      	mov	r5, r0
 80087d8:	b930      	cbnz	r0, 80087e8 <_calloc_r+0x24>
 80087da:	4628      	mov	r0, r5
 80087dc:	b003      	add	sp, #12
 80087de:	bd30      	pop	{r4, r5, pc}
 80087e0:	220c      	movs	r2, #12
 80087e2:	6002      	str	r2, [r0, #0]
 80087e4:	2500      	movs	r5, #0
 80087e6:	e7f8      	b.n	80087da <_calloc_r+0x16>
 80087e8:	4621      	mov	r1, r4
 80087ea:	f7ff faf9 	bl	8007de0 <memset>
 80087ee:	e7f4      	b.n	80087da <_calloc_r+0x16>

080087f0 <sbrk_aligned>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	4e0e      	ldr	r6, [pc, #56]	; (800882c <sbrk_aligned+0x3c>)
 80087f4:	460c      	mov	r4, r1
 80087f6:	6831      	ldr	r1, [r6, #0]
 80087f8:	4605      	mov	r5, r0
 80087fa:	b911      	cbnz	r1, 8008802 <sbrk_aligned+0x12>
 80087fc:	f000 f88c 	bl	8008918 <_sbrk_r>
 8008800:	6030      	str	r0, [r6, #0]
 8008802:	4621      	mov	r1, r4
 8008804:	4628      	mov	r0, r5
 8008806:	f000 f887 	bl	8008918 <_sbrk_r>
 800880a:	1c43      	adds	r3, r0, #1
 800880c:	d00a      	beq.n	8008824 <sbrk_aligned+0x34>
 800880e:	1cc4      	adds	r4, r0, #3
 8008810:	f024 0403 	bic.w	r4, r4, #3
 8008814:	42a0      	cmp	r0, r4
 8008816:	d007      	beq.n	8008828 <sbrk_aligned+0x38>
 8008818:	1a21      	subs	r1, r4, r0
 800881a:	4628      	mov	r0, r5
 800881c:	f000 f87c 	bl	8008918 <_sbrk_r>
 8008820:	3001      	adds	r0, #1
 8008822:	d101      	bne.n	8008828 <sbrk_aligned+0x38>
 8008824:	f04f 34ff 	mov.w	r4, #4294967295
 8008828:	4620      	mov	r0, r4
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	200025b4 	.word	0x200025b4

08008830 <_malloc_r>:
 8008830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008834:	1ccd      	adds	r5, r1, #3
 8008836:	f025 0503 	bic.w	r5, r5, #3
 800883a:	3508      	adds	r5, #8
 800883c:	2d0c      	cmp	r5, #12
 800883e:	bf38      	it	cc
 8008840:	250c      	movcc	r5, #12
 8008842:	2d00      	cmp	r5, #0
 8008844:	4607      	mov	r7, r0
 8008846:	db01      	blt.n	800884c <_malloc_r+0x1c>
 8008848:	42a9      	cmp	r1, r5
 800884a:	d905      	bls.n	8008858 <_malloc_r+0x28>
 800884c:	230c      	movs	r3, #12
 800884e:	603b      	str	r3, [r7, #0]
 8008850:	2600      	movs	r6, #0
 8008852:	4630      	mov	r0, r6
 8008854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008858:	4e2e      	ldr	r6, [pc, #184]	; (8008914 <_malloc_r+0xe4>)
 800885a:	f000 ff37 	bl	80096cc <__malloc_lock>
 800885e:	6833      	ldr	r3, [r6, #0]
 8008860:	461c      	mov	r4, r3
 8008862:	bb34      	cbnz	r4, 80088b2 <_malloc_r+0x82>
 8008864:	4629      	mov	r1, r5
 8008866:	4638      	mov	r0, r7
 8008868:	f7ff ffc2 	bl	80087f0 <sbrk_aligned>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	4604      	mov	r4, r0
 8008870:	d14d      	bne.n	800890e <_malloc_r+0xde>
 8008872:	6834      	ldr	r4, [r6, #0]
 8008874:	4626      	mov	r6, r4
 8008876:	2e00      	cmp	r6, #0
 8008878:	d140      	bne.n	80088fc <_malloc_r+0xcc>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	4631      	mov	r1, r6
 800887e:	4638      	mov	r0, r7
 8008880:	eb04 0803 	add.w	r8, r4, r3
 8008884:	f000 f848 	bl	8008918 <_sbrk_r>
 8008888:	4580      	cmp	r8, r0
 800888a:	d13a      	bne.n	8008902 <_malloc_r+0xd2>
 800888c:	6821      	ldr	r1, [r4, #0]
 800888e:	3503      	adds	r5, #3
 8008890:	1a6d      	subs	r5, r5, r1
 8008892:	f025 0503 	bic.w	r5, r5, #3
 8008896:	3508      	adds	r5, #8
 8008898:	2d0c      	cmp	r5, #12
 800889a:	bf38      	it	cc
 800889c:	250c      	movcc	r5, #12
 800889e:	4629      	mov	r1, r5
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7ff ffa5 	bl	80087f0 <sbrk_aligned>
 80088a6:	3001      	adds	r0, #1
 80088a8:	d02b      	beq.n	8008902 <_malloc_r+0xd2>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	442b      	add	r3, r5
 80088ae:	6023      	str	r3, [r4, #0]
 80088b0:	e00e      	b.n	80088d0 <_malloc_r+0xa0>
 80088b2:	6822      	ldr	r2, [r4, #0]
 80088b4:	1b52      	subs	r2, r2, r5
 80088b6:	d41e      	bmi.n	80088f6 <_malloc_r+0xc6>
 80088b8:	2a0b      	cmp	r2, #11
 80088ba:	d916      	bls.n	80088ea <_malloc_r+0xba>
 80088bc:	1961      	adds	r1, r4, r5
 80088be:	42a3      	cmp	r3, r4
 80088c0:	6025      	str	r5, [r4, #0]
 80088c2:	bf18      	it	ne
 80088c4:	6059      	strne	r1, [r3, #4]
 80088c6:	6863      	ldr	r3, [r4, #4]
 80088c8:	bf08      	it	eq
 80088ca:	6031      	streq	r1, [r6, #0]
 80088cc:	5162      	str	r2, [r4, r5]
 80088ce:	604b      	str	r3, [r1, #4]
 80088d0:	4638      	mov	r0, r7
 80088d2:	f104 060b 	add.w	r6, r4, #11
 80088d6:	f000 feff 	bl	80096d8 <__malloc_unlock>
 80088da:	f026 0607 	bic.w	r6, r6, #7
 80088de:	1d23      	adds	r3, r4, #4
 80088e0:	1af2      	subs	r2, r6, r3
 80088e2:	d0b6      	beq.n	8008852 <_malloc_r+0x22>
 80088e4:	1b9b      	subs	r3, r3, r6
 80088e6:	50a3      	str	r3, [r4, r2]
 80088e8:	e7b3      	b.n	8008852 <_malloc_r+0x22>
 80088ea:	6862      	ldr	r2, [r4, #4]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	bf0c      	ite	eq
 80088f0:	6032      	streq	r2, [r6, #0]
 80088f2:	605a      	strne	r2, [r3, #4]
 80088f4:	e7ec      	b.n	80088d0 <_malloc_r+0xa0>
 80088f6:	4623      	mov	r3, r4
 80088f8:	6864      	ldr	r4, [r4, #4]
 80088fa:	e7b2      	b.n	8008862 <_malloc_r+0x32>
 80088fc:	4634      	mov	r4, r6
 80088fe:	6876      	ldr	r6, [r6, #4]
 8008900:	e7b9      	b.n	8008876 <_malloc_r+0x46>
 8008902:	230c      	movs	r3, #12
 8008904:	603b      	str	r3, [r7, #0]
 8008906:	4638      	mov	r0, r7
 8008908:	f000 fee6 	bl	80096d8 <__malloc_unlock>
 800890c:	e7a1      	b.n	8008852 <_malloc_r+0x22>
 800890e:	6025      	str	r5, [r4, #0]
 8008910:	e7de      	b.n	80088d0 <_malloc_r+0xa0>
 8008912:	bf00      	nop
 8008914:	200025b0 	.word	0x200025b0

08008918 <_sbrk_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d06      	ldr	r5, [pc, #24]	; (8008934 <_sbrk_r+0x1c>)
 800891c:	2300      	movs	r3, #0
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	602b      	str	r3, [r5, #0]
 8008924:	f7f8 fc9c 	bl	8001260 <_sbrk>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_sbrk_r+0x1a>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_sbrk_r+0x1a>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	200025b8 	.word	0x200025b8

08008938 <strcpy>:
 8008938:	4603      	mov	r3, r0
 800893a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800893e:	f803 2b01 	strb.w	r2, [r3], #1
 8008942:	2a00      	cmp	r2, #0
 8008944:	d1f9      	bne.n	800893a <strcpy+0x2>
 8008946:	4770      	bx	lr

08008948 <__assert_func>:
 8008948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800894a:	4614      	mov	r4, r2
 800894c:	461a      	mov	r2, r3
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <__assert_func+0x2c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4605      	mov	r5, r0
 8008954:	68d8      	ldr	r0, [r3, #12]
 8008956:	b14c      	cbz	r4, 800896c <__assert_func+0x24>
 8008958:	4b07      	ldr	r3, [pc, #28]	; (8008978 <__assert_func+0x30>)
 800895a:	9100      	str	r1, [sp, #0]
 800895c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008960:	4906      	ldr	r1, [pc, #24]	; (800897c <__assert_func+0x34>)
 8008962:	462b      	mov	r3, r5
 8008964:	f000 fe8a 	bl	800967c <fiprintf>
 8008968:	f001 fab6 	bl	8009ed8 <abort>
 800896c:	4b04      	ldr	r3, [pc, #16]	; (8008980 <__assert_func+0x38>)
 800896e:	461c      	mov	r4, r3
 8008970:	e7f3      	b.n	800895a <__assert_func+0x12>
 8008972:	bf00      	nop
 8008974:	20000100 	.word	0x20000100
 8008978:	0800a704 	.word	0x0800a704
 800897c:	0800a711 	.word	0x0800a711
 8008980:	0800a73f 	.word	0x0800a73f

08008984 <quorem>:
 8008984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	6903      	ldr	r3, [r0, #16]
 800898a:	690c      	ldr	r4, [r1, #16]
 800898c:	42a3      	cmp	r3, r4
 800898e:	4607      	mov	r7, r0
 8008990:	f2c0 8081 	blt.w	8008a96 <quorem+0x112>
 8008994:	3c01      	subs	r4, #1
 8008996:	f101 0814 	add.w	r8, r1, #20
 800899a:	f100 0514 	add.w	r5, r0, #20
 800899e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089ac:	3301      	adds	r3, #1
 80089ae:	429a      	cmp	r2, r3
 80089b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80089bc:	d331      	bcc.n	8008a22 <quorem+0x9e>
 80089be:	f04f 0e00 	mov.w	lr, #0
 80089c2:	4640      	mov	r0, r8
 80089c4:	46ac      	mov	ip, r5
 80089c6:	46f2      	mov	sl, lr
 80089c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80089cc:	b293      	uxth	r3, r2
 80089ce:	fb06 e303 	mla	r3, r6, r3, lr
 80089d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	ebaa 0303 	sub.w	r3, sl, r3
 80089dc:	f8dc a000 	ldr.w	sl, [ip]
 80089e0:	0c12      	lsrs	r2, r2, #16
 80089e2:	fa13 f38a 	uxtah	r3, r3, sl
 80089e6:	fb06 e202 	mla	r2, r6, r2, lr
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	9b00      	ldr	r3, [sp, #0]
 80089ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089f2:	b292      	uxth	r2, r2
 80089f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80089f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a00:	4581      	cmp	r9, r0
 8008a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a06:	f84c 3b04 	str.w	r3, [ip], #4
 8008a0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a0e:	d2db      	bcs.n	80089c8 <quorem+0x44>
 8008a10:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a14:	b92b      	cbnz	r3, 8008a22 <quorem+0x9e>
 8008a16:	9b01      	ldr	r3, [sp, #4]
 8008a18:	3b04      	subs	r3, #4
 8008a1a:	429d      	cmp	r5, r3
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	d32e      	bcc.n	8008a7e <quorem+0xfa>
 8008a20:	613c      	str	r4, [r7, #16]
 8008a22:	4638      	mov	r0, r7
 8008a24:	f7ff fdae 	bl	8008584 <__mcmp>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	db24      	blt.n	8008a76 <quorem+0xf2>
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f04f 0c00 	mov.w	ip, #0
 8008a34:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a38:	f8d0 e000 	ldr.w	lr, [r0]
 8008a3c:	b293      	uxth	r3, r2
 8008a3e:	ebac 0303 	sub.w	r3, ip, r3
 8008a42:	0c12      	lsrs	r2, r2, #16
 8008a44:	fa13 f38e 	uxtah	r3, r3, lr
 8008a48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a56:	45c1      	cmp	r9, r8
 8008a58:	f840 3b04 	str.w	r3, [r0], #4
 8008a5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a60:	d2e8      	bcs.n	8008a34 <quorem+0xb0>
 8008a62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a6a:	b922      	cbnz	r2, 8008a76 <quorem+0xf2>
 8008a6c:	3b04      	subs	r3, #4
 8008a6e:	429d      	cmp	r5, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	d30a      	bcc.n	8008a8a <quorem+0x106>
 8008a74:	613c      	str	r4, [r7, #16]
 8008a76:	4630      	mov	r0, r6
 8008a78:	b003      	add	sp, #12
 8008a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7e:	6812      	ldr	r2, [r2, #0]
 8008a80:	3b04      	subs	r3, #4
 8008a82:	2a00      	cmp	r2, #0
 8008a84:	d1cc      	bne.n	8008a20 <quorem+0x9c>
 8008a86:	3c01      	subs	r4, #1
 8008a88:	e7c7      	b.n	8008a1a <quorem+0x96>
 8008a8a:	6812      	ldr	r2, [r2, #0]
 8008a8c:	3b04      	subs	r3, #4
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	d1f0      	bne.n	8008a74 <quorem+0xf0>
 8008a92:	3c01      	subs	r4, #1
 8008a94:	e7eb      	b.n	8008a6e <quorem+0xea>
 8008a96:	2000      	movs	r0, #0
 8008a98:	e7ee      	b.n	8008a78 <quorem+0xf4>
 8008a9a:	0000      	movs	r0, r0
 8008a9c:	0000      	movs	r0, r0
	...

08008aa0 <_dtoa_r>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	ed2d 8b04 	vpush	{d8-d9}
 8008aa8:	ec57 6b10 	vmov	r6, r7, d0
 8008aac:	b093      	sub	sp, #76	; 0x4c
 8008aae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ab0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ab4:	9106      	str	r1, [sp, #24]
 8008ab6:	ee10 aa10 	vmov	sl, s0
 8008aba:	4604      	mov	r4, r0
 8008abc:	9209      	str	r2, [sp, #36]	; 0x24
 8008abe:	930c      	str	r3, [sp, #48]	; 0x30
 8008ac0:	46bb      	mov	fp, r7
 8008ac2:	b975      	cbnz	r5, 8008ae2 <_dtoa_r+0x42>
 8008ac4:	2010      	movs	r0, #16
 8008ac6:	f000 fdeb 	bl	80096a0 <malloc>
 8008aca:	4602      	mov	r2, r0
 8008acc:	6260      	str	r0, [r4, #36]	; 0x24
 8008ace:	b920      	cbnz	r0, 8008ada <_dtoa_r+0x3a>
 8008ad0:	4ba7      	ldr	r3, [pc, #668]	; (8008d70 <_dtoa_r+0x2d0>)
 8008ad2:	21ea      	movs	r1, #234	; 0xea
 8008ad4:	48a7      	ldr	r0, [pc, #668]	; (8008d74 <_dtoa_r+0x2d4>)
 8008ad6:	f7ff ff37 	bl	8008948 <__assert_func>
 8008ada:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ade:	6005      	str	r5, [r0, #0]
 8008ae0:	60c5      	str	r5, [r0, #12]
 8008ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ae4:	6819      	ldr	r1, [r3, #0]
 8008ae6:	b151      	cbz	r1, 8008afe <_dtoa_r+0x5e>
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	604a      	str	r2, [r1, #4]
 8008aec:	2301      	movs	r3, #1
 8008aee:	4093      	lsls	r3, r2
 8008af0:	608b      	str	r3, [r1, #8]
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7ff fb04 	bl	8008100 <_Bfree>
 8008af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008afa:	2200      	movs	r2, #0
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	1e3b      	subs	r3, r7, #0
 8008b00:	bfaa      	itet	ge
 8008b02:	2300      	movge	r3, #0
 8008b04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008b08:	f8c8 3000 	strge.w	r3, [r8]
 8008b0c:	4b9a      	ldr	r3, [pc, #616]	; (8008d78 <_dtoa_r+0x2d8>)
 8008b0e:	bfbc      	itt	lt
 8008b10:	2201      	movlt	r2, #1
 8008b12:	f8c8 2000 	strlt.w	r2, [r8]
 8008b16:	ea33 030b 	bics.w	r3, r3, fp
 8008b1a:	d11b      	bne.n	8008b54 <_dtoa_r+0xb4>
 8008b1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b28:	4333      	orrs	r3, r6
 8008b2a:	f000 8592 	beq.w	8009652 <_dtoa_r+0xbb2>
 8008b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b30:	b963      	cbnz	r3, 8008b4c <_dtoa_r+0xac>
 8008b32:	4b92      	ldr	r3, [pc, #584]	; (8008d7c <_dtoa_r+0x2dc>)
 8008b34:	e022      	b.n	8008b7c <_dtoa_r+0xdc>
 8008b36:	4b92      	ldr	r3, [pc, #584]	; (8008d80 <_dtoa_r+0x2e0>)
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	9801      	ldr	r0, [sp, #4]
 8008b42:	b013      	add	sp, #76	; 0x4c
 8008b44:	ecbd 8b04 	vpop	{d8-d9}
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4c:	4b8b      	ldr	r3, [pc, #556]	; (8008d7c <_dtoa_r+0x2dc>)
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	3303      	adds	r3, #3
 8008b52:	e7f3      	b.n	8008b3c <_dtoa_r+0x9c>
 8008b54:	2200      	movs	r2, #0
 8008b56:	2300      	movs	r3, #0
 8008b58:	4650      	mov	r0, sl
 8008b5a:	4659      	mov	r1, fp
 8008b5c:	f7f7 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b60:	ec4b ab19 	vmov	d9, sl, fp
 8008b64:	4680      	mov	r8, r0
 8008b66:	b158      	cbz	r0, 8008b80 <_dtoa_r+0xe0>
 8008b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 856b 	beq.w	800964c <_dtoa_r+0xbac>
 8008b76:	4883      	ldr	r0, [pc, #524]	; (8008d84 <_dtoa_r+0x2e4>)
 8008b78:	6018      	str	r0, [r3, #0]
 8008b7a:	1e43      	subs	r3, r0, #1
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	e7df      	b.n	8008b40 <_dtoa_r+0xa0>
 8008b80:	ec4b ab10 	vmov	d0, sl, fp
 8008b84:	aa10      	add	r2, sp, #64	; 0x40
 8008b86:	a911      	add	r1, sp, #68	; 0x44
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7ff fda1 	bl	80086d0 <__d2b>
 8008b8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008b92:	ee08 0a10 	vmov	s16, r0
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	f000 8084 	beq.w	8008ca4 <_dtoa_r+0x204>
 8008b9c:	ee19 3a90 	vmov	r3, s19
 8008ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ba4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ba8:	4656      	mov	r6, sl
 8008baa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008bb6:	4b74      	ldr	r3, [pc, #464]	; (8008d88 <_dtoa_r+0x2e8>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4630      	mov	r0, r6
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	f7f7 fb63 	bl	8000288 <__aeabi_dsub>
 8008bc2:	a365      	add	r3, pc, #404	; (adr r3, 8008d58 <_dtoa_r+0x2b8>)
 8008bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc8:	f7f7 fd16 	bl	80005f8 <__aeabi_dmul>
 8008bcc:	a364      	add	r3, pc, #400	; (adr r3, 8008d60 <_dtoa_r+0x2c0>)
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	f7f7 fb5b 	bl	800028c <__adddf3>
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	4628      	mov	r0, r5
 8008bda:	460f      	mov	r7, r1
 8008bdc:	f7f7 fca2 	bl	8000524 <__aeabi_i2d>
 8008be0:	a361      	add	r3, pc, #388	; (adr r3, 8008d68 <_dtoa_r+0x2c8>)
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	f7f7 fd07 	bl	80005f8 <__aeabi_dmul>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	4630      	mov	r0, r6
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	f7f7 fb4b 	bl	800028c <__adddf3>
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	460f      	mov	r7, r1
 8008bfa:	f7f7 ff97 	bl	8000b2c <__aeabi_d2iz>
 8008bfe:	2200      	movs	r2, #0
 8008c00:	9000      	str	r0, [sp, #0]
 8008c02:	2300      	movs	r3, #0
 8008c04:	4630      	mov	r0, r6
 8008c06:	4639      	mov	r1, r7
 8008c08:	f7f7 ff68 	bl	8000adc <__aeabi_dcmplt>
 8008c0c:	b150      	cbz	r0, 8008c24 <_dtoa_r+0x184>
 8008c0e:	9800      	ldr	r0, [sp, #0]
 8008c10:	f7f7 fc88 	bl	8000524 <__aeabi_i2d>
 8008c14:	4632      	mov	r2, r6
 8008c16:	463b      	mov	r3, r7
 8008c18:	f7f7 ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c1c:	b910      	cbnz	r0, 8008c24 <_dtoa_r+0x184>
 8008c1e:	9b00      	ldr	r3, [sp, #0]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	9b00      	ldr	r3, [sp, #0]
 8008c26:	2b16      	cmp	r3, #22
 8008c28:	d85a      	bhi.n	8008ce0 <_dtoa_r+0x240>
 8008c2a:	9a00      	ldr	r2, [sp, #0]
 8008c2c:	4b57      	ldr	r3, [pc, #348]	; (8008d8c <_dtoa_r+0x2ec>)
 8008c2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	ec51 0b19 	vmov	r0, r1, d9
 8008c3a:	f7f7 ff4f 	bl	8000adc <__aeabi_dcmplt>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d050      	beq.n	8008ce4 <_dtoa_r+0x244>
 8008c42:	9b00      	ldr	r3, [sp, #0]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c4e:	1b5d      	subs	r5, r3, r5
 8008c50:	1e6b      	subs	r3, r5, #1
 8008c52:	9305      	str	r3, [sp, #20]
 8008c54:	bf45      	ittet	mi
 8008c56:	f1c5 0301 	rsbmi	r3, r5, #1
 8008c5a:	9304      	strmi	r3, [sp, #16]
 8008c5c:	2300      	movpl	r3, #0
 8008c5e:	2300      	movmi	r3, #0
 8008c60:	bf4c      	ite	mi
 8008c62:	9305      	strmi	r3, [sp, #20]
 8008c64:	9304      	strpl	r3, [sp, #16]
 8008c66:	9b00      	ldr	r3, [sp, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	db3d      	blt.n	8008ce8 <_dtoa_r+0x248>
 8008c6c:	9b05      	ldr	r3, [sp, #20]
 8008c6e:	9a00      	ldr	r2, [sp, #0]
 8008c70:	920a      	str	r2, [sp, #40]	; 0x28
 8008c72:	4413      	add	r3, r2
 8008c74:	9305      	str	r3, [sp, #20]
 8008c76:	2300      	movs	r3, #0
 8008c78:	9307      	str	r3, [sp, #28]
 8008c7a:	9b06      	ldr	r3, [sp, #24]
 8008c7c:	2b09      	cmp	r3, #9
 8008c7e:	f200 8089 	bhi.w	8008d94 <_dtoa_r+0x2f4>
 8008c82:	2b05      	cmp	r3, #5
 8008c84:	bfc4      	itt	gt
 8008c86:	3b04      	subgt	r3, #4
 8008c88:	9306      	strgt	r3, [sp, #24]
 8008c8a:	9b06      	ldr	r3, [sp, #24]
 8008c8c:	f1a3 0302 	sub.w	r3, r3, #2
 8008c90:	bfcc      	ite	gt
 8008c92:	2500      	movgt	r5, #0
 8008c94:	2501      	movle	r5, #1
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	f200 8087 	bhi.w	8008daa <_dtoa_r+0x30a>
 8008c9c:	e8df f003 	tbb	[pc, r3]
 8008ca0:	59383a2d 	.word	0x59383a2d
 8008ca4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ca8:	441d      	add	r5, r3
 8008caa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008cae:	2b20      	cmp	r3, #32
 8008cb0:	bfc1      	itttt	gt
 8008cb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cb6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008cba:	fa0b f303 	lslgt.w	r3, fp, r3
 8008cbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008cc2:	bfda      	itte	le
 8008cc4:	f1c3 0320 	rsble	r3, r3, #32
 8008cc8:	fa06 f003 	lslle.w	r0, r6, r3
 8008ccc:	4318      	orrgt	r0, r3
 8008cce:	f7f7 fc19 	bl	8000504 <__aeabi_ui2d>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008cda:	3d01      	subs	r5, #1
 8008cdc:	930e      	str	r3, [sp, #56]	; 0x38
 8008cde:	e76a      	b.n	8008bb6 <_dtoa_r+0x116>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e7b2      	b.n	8008c4a <_dtoa_r+0x1aa>
 8008ce4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ce6:	e7b1      	b.n	8008c4c <_dtoa_r+0x1ac>
 8008ce8:	9b04      	ldr	r3, [sp, #16]
 8008cea:	9a00      	ldr	r2, [sp, #0]
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	9304      	str	r3, [sp, #16]
 8008cf0:	4253      	negs	r3, r2
 8008cf2:	9307      	str	r3, [sp, #28]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf8:	e7bf      	b.n	8008c7a <_dtoa_r+0x1da>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9308      	str	r3, [sp, #32]
 8008cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	dc55      	bgt.n	8008db0 <_dtoa_r+0x310>
 8008d04:	2301      	movs	r3, #1
 8008d06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d0e:	e00c      	b.n	8008d2a <_dtoa_r+0x28a>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e7f3      	b.n	8008cfc <_dtoa_r+0x25c>
 8008d14:	2300      	movs	r3, #0
 8008d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d18:	9308      	str	r3, [sp, #32]
 8008d1a:	9b00      	ldr	r3, [sp, #0]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	9302      	str	r3, [sp, #8]
 8008d20:	3301      	adds	r3, #1
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	9303      	str	r3, [sp, #12]
 8008d26:	bfb8      	it	lt
 8008d28:	2301      	movlt	r3, #1
 8008d2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	6042      	str	r2, [r0, #4]
 8008d30:	2204      	movs	r2, #4
 8008d32:	f102 0614 	add.w	r6, r2, #20
 8008d36:	429e      	cmp	r6, r3
 8008d38:	6841      	ldr	r1, [r0, #4]
 8008d3a:	d93d      	bls.n	8008db8 <_dtoa_r+0x318>
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f7ff f99f 	bl	8008080 <_Balloc>
 8008d42:	9001      	str	r0, [sp, #4]
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d13b      	bne.n	8008dc0 <_dtoa_r+0x320>
 8008d48:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <_dtoa_r+0x2f0>)
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d50:	e6c0      	b.n	8008ad4 <_dtoa_r+0x34>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e7df      	b.n	8008d16 <_dtoa_r+0x276>
 8008d56:	bf00      	nop
 8008d58:	636f4361 	.word	0x636f4361
 8008d5c:	3fd287a7 	.word	0x3fd287a7
 8008d60:	8b60c8b3 	.word	0x8b60c8b3
 8008d64:	3fc68a28 	.word	0x3fc68a28
 8008d68:	509f79fb 	.word	0x509f79fb
 8008d6c:	3fd34413 	.word	0x3fd34413
 8008d70:	0800a584 	.word	0x0800a584
 8008d74:	0800a74f 	.word	0x0800a74f
 8008d78:	7ff00000 	.word	0x7ff00000
 8008d7c:	0800a749 	.word	0x0800a749
 8008d80:	0800a740 	.word	0x0800a740
 8008d84:	0800a74e 	.word	0x0800a74e
 8008d88:	3ff80000 	.word	0x3ff80000
 8008d8c:	0800a630 	.word	0x0800a630
 8008d90:	0800a5f7 	.word	0x0800a5f7
 8008d94:	2501      	movs	r5, #1
 8008d96:	2300      	movs	r3, #0
 8008d98:	9306      	str	r3, [sp, #24]
 8008d9a:	9508      	str	r5, [sp, #32]
 8008d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008da0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008da4:	2200      	movs	r2, #0
 8008da6:	2312      	movs	r3, #18
 8008da8:	e7b0      	b.n	8008d0c <_dtoa_r+0x26c>
 8008daa:	2301      	movs	r3, #1
 8008dac:	9308      	str	r3, [sp, #32]
 8008dae:	e7f5      	b.n	8008d9c <_dtoa_r+0x2fc>
 8008db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008db6:	e7b8      	b.n	8008d2a <_dtoa_r+0x28a>
 8008db8:	3101      	adds	r1, #1
 8008dba:	6041      	str	r1, [r0, #4]
 8008dbc:	0052      	lsls	r2, r2, #1
 8008dbe:	e7b8      	b.n	8008d32 <_dtoa_r+0x292>
 8008dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dc2:	9a01      	ldr	r2, [sp, #4]
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	2b0e      	cmp	r3, #14
 8008dca:	f200 809d 	bhi.w	8008f08 <_dtoa_r+0x468>
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	f000 809a 	beq.w	8008f08 <_dtoa_r+0x468>
 8008dd4:	9b00      	ldr	r3, [sp, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	dd32      	ble.n	8008e40 <_dtoa_r+0x3a0>
 8008dda:	4ab7      	ldr	r2, [pc, #732]	; (80090b8 <_dtoa_r+0x618>)
 8008ddc:	f003 030f 	and.w	r3, r3, #15
 8008de0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008de8:	9b00      	ldr	r3, [sp, #0]
 8008dea:	05d8      	lsls	r0, r3, #23
 8008dec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008df0:	d516      	bpl.n	8008e20 <_dtoa_r+0x380>
 8008df2:	4bb2      	ldr	r3, [pc, #712]	; (80090bc <_dtoa_r+0x61c>)
 8008df4:	ec51 0b19 	vmov	r0, r1, d9
 8008df8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dfc:	f7f7 fd26 	bl	800084c <__aeabi_ddiv>
 8008e00:	f007 070f 	and.w	r7, r7, #15
 8008e04:	4682      	mov	sl, r0
 8008e06:	468b      	mov	fp, r1
 8008e08:	2503      	movs	r5, #3
 8008e0a:	4eac      	ldr	r6, [pc, #688]	; (80090bc <_dtoa_r+0x61c>)
 8008e0c:	b957      	cbnz	r7, 8008e24 <_dtoa_r+0x384>
 8008e0e:	4642      	mov	r2, r8
 8008e10:	464b      	mov	r3, r9
 8008e12:	4650      	mov	r0, sl
 8008e14:	4659      	mov	r1, fp
 8008e16:	f7f7 fd19 	bl	800084c <__aeabi_ddiv>
 8008e1a:	4682      	mov	sl, r0
 8008e1c:	468b      	mov	fp, r1
 8008e1e:	e028      	b.n	8008e72 <_dtoa_r+0x3d2>
 8008e20:	2502      	movs	r5, #2
 8008e22:	e7f2      	b.n	8008e0a <_dtoa_r+0x36a>
 8008e24:	07f9      	lsls	r1, r7, #31
 8008e26:	d508      	bpl.n	8008e3a <_dtoa_r+0x39a>
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e30:	f7f7 fbe2 	bl	80005f8 <__aeabi_dmul>
 8008e34:	3501      	adds	r5, #1
 8008e36:	4680      	mov	r8, r0
 8008e38:	4689      	mov	r9, r1
 8008e3a:	107f      	asrs	r7, r7, #1
 8008e3c:	3608      	adds	r6, #8
 8008e3e:	e7e5      	b.n	8008e0c <_dtoa_r+0x36c>
 8008e40:	f000 809b 	beq.w	8008f7a <_dtoa_r+0x4da>
 8008e44:	9b00      	ldr	r3, [sp, #0]
 8008e46:	4f9d      	ldr	r7, [pc, #628]	; (80090bc <_dtoa_r+0x61c>)
 8008e48:	425e      	negs	r6, r3
 8008e4a:	4b9b      	ldr	r3, [pc, #620]	; (80090b8 <_dtoa_r+0x618>)
 8008e4c:	f006 020f 	and.w	r2, r6, #15
 8008e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	ec51 0b19 	vmov	r0, r1, d9
 8008e5c:	f7f7 fbcc 	bl	80005f8 <__aeabi_dmul>
 8008e60:	1136      	asrs	r6, r6, #4
 8008e62:	4682      	mov	sl, r0
 8008e64:	468b      	mov	fp, r1
 8008e66:	2300      	movs	r3, #0
 8008e68:	2502      	movs	r5, #2
 8008e6a:	2e00      	cmp	r6, #0
 8008e6c:	d17a      	bne.n	8008f64 <_dtoa_r+0x4c4>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1d3      	bne.n	8008e1a <_dtoa_r+0x37a>
 8008e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 8082 	beq.w	8008f7e <_dtoa_r+0x4de>
 8008e7a:	4b91      	ldr	r3, [pc, #580]	; (80090c0 <_dtoa_r+0x620>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4650      	mov	r0, sl
 8008e80:	4659      	mov	r1, fp
 8008e82:	f7f7 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d079      	beq.n	8008f7e <_dtoa_r+0x4de>
 8008e8a:	9b03      	ldr	r3, [sp, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d076      	beq.n	8008f7e <_dtoa_r+0x4de>
 8008e90:	9b02      	ldr	r3, [sp, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	dd36      	ble.n	8008f04 <_dtoa_r+0x464>
 8008e96:	9b00      	ldr	r3, [sp, #0]
 8008e98:	4650      	mov	r0, sl
 8008e9a:	4659      	mov	r1, fp
 8008e9c:	1e5f      	subs	r7, r3, #1
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	4b88      	ldr	r3, [pc, #544]	; (80090c4 <_dtoa_r+0x624>)
 8008ea2:	f7f7 fba9 	bl	80005f8 <__aeabi_dmul>
 8008ea6:	9e02      	ldr	r6, [sp, #8]
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	468b      	mov	fp, r1
 8008eac:	3501      	adds	r5, #1
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f7f7 fb38 	bl	8000524 <__aeabi_i2d>
 8008eb4:	4652      	mov	r2, sl
 8008eb6:	465b      	mov	r3, fp
 8008eb8:	f7f7 fb9e 	bl	80005f8 <__aeabi_dmul>
 8008ebc:	4b82      	ldr	r3, [pc, #520]	; (80090c8 <_dtoa_r+0x628>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f7f7 f9e4 	bl	800028c <__adddf3>
 8008ec4:	46d0      	mov	r8, sl
 8008ec6:	46d9      	mov	r9, fp
 8008ec8:	4682      	mov	sl, r0
 8008eca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008ece:	2e00      	cmp	r6, #0
 8008ed0:	d158      	bne.n	8008f84 <_dtoa_r+0x4e4>
 8008ed2:	4b7e      	ldr	r3, [pc, #504]	; (80090cc <_dtoa_r+0x62c>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	4649      	mov	r1, r9
 8008eda:	f7f7 f9d5 	bl	8000288 <__aeabi_dsub>
 8008ede:	4652      	mov	r2, sl
 8008ee0:	465b      	mov	r3, fp
 8008ee2:	4680      	mov	r8, r0
 8008ee4:	4689      	mov	r9, r1
 8008ee6:	f7f7 fe17 	bl	8000b18 <__aeabi_dcmpgt>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f040 8295 	bne.w	800941a <_dtoa_r+0x97a>
 8008ef0:	4652      	mov	r2, sl
 8008ef2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	4649      	mov	r1, r9
 8008efa:	f7f7 fdef 	bl	8000adc <__aeabi_dcmplt>
 8008efe:	2800      	cmp	r0, #0
 8008f00:	f040 8289 	bne.w	8009416 <_dtoa_r+0x976>
 8008f04:	ec5b ab19 	vmov	sl, fp, d9
 8008f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f2c0 8148 	blt.w	80091a0 <_dtoa_r+0x700>
 8008f10:	9a00      	ldr	r2, [sp, #0]
 8008f12:	2a0e      	cmp	r2, #14
 8008f14:	f300 8144 	bgt.w	80091a0 <_dtoa_r+0x700>
 8008f18:	4b67      	ldr	r3, [pc, #412]	; (80090b8 <_dtoa_r+0x618>)
 8008f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f280 80d5 	bge.w	80090d4 <_dtoa_r+0x634>
 8008f2a:	9b03      	ldr	r3, [sp, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f300 80d1 	bgt.w	80090d4 <_dtoa_r+0x634>
 8008f32:	f040 826f 	bne.w	8009414 <_dtoa_r+0x974>
 8008f36:	4b65      	ldr	r3, [pc, #404]	; (80090cc <_dtoa_r+0x62c>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	f7f7 fb5b 	bl	80005f8 <__aeabi_dmul>
 8008f42:	4652      	mov	r2, sl
 8008f44:	465b      	mov	r3, fp
 8008f46:	f7f7 fddd 	bl	8000b04 <__aeabi_dcmpge>
 8008f4a:	9e03      	ldr	r6, [sp, #12]
 8008f4c:	4637      	mov	r7, r6
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f040 8245 	bne.w	80093de <_dtoa_r+0x93e>
 8008f54:	9d01      	ldr	r5, [sp, #4]
 8008f56:	2331      	movs	r3, #49	; 0x31
 8008f58:	f805 3b01 	strb.w	r3, [r5], #1
 8008f5c:	9b00      	ldr	r3, [sp, #0]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	e240      	b.n	80093e6 <_dtoa_r+0x946>
 8008f64:	07f2      	lsls	r2, r6, #31
 8008f66:	d505      	bpl.n	8008f74 <_dtoa_r+0x4d4>
 8008f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f6c:	f7f7 fb44 	bl	80005f8 <__aeabi_dmul>
 8008f70:	3501      	adds	r5, #1
 8008f72:	2301      	movs	r3, #1
 8008f74:	1076      	asrs	r6, r6, #1
 8008f76:	3708      	adds	r7, #8
 8008f78:	e777      	b.n	8008e6a <_dtoa_r+0x3ca>
 8008f7a:	2502      	movs	r5, #2
 8008f7c:	e779      	b.n	8008e72 <_dtoa_r+0x3d2>
 8008f7e:	9f00      	ldr	r7, [sp, #0]
 8008f80:	9e03      	ldr	r6, [sp, #12]
 8008f82:	e794      	b.n	8008eae <_dtoa_r+0x40e>
 8008f84:	9901      	ldr	r1, [sp, #4]
 8008f86:	4b4c      	ldr	r3, [pc, #304]	; (80090b8 <_dtoa_r+0x618>)
 8008f88:	4431      	add	r1, r6
 8008f8a:	910d      	str	r1, [sp, #52]	; 0x34
 8008f8c:	9908      	ldr	r1, [sp, #32]
 8008f8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f96:	2900      	cmp	r1, #0
 8008f98:	d043      	beq.n	8009022 <_dtoa_r+0x582>
 8008f9a:	494d      	ldr	r1, [pc, #308]	; (80090d0 <_dtoa_r+0x630>)
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	f7f7 fc55 	bl	800084c <__aeabi_ddiv>
 8008fa2:	4652      	mov	r2, sl
 8008fa4:	465b      	mov	r3, fp
 8008fa6:	f7f7 f96f 	bl	8000288 <__aeabi_dsub>
 8008faa:	9d01      	ldr	r5, [sp, #4]
 8008fac:	4682      	mov	sl, r0
 8008fae:	468b      	mov	fp, r1
 8008fb0:	4649      	mov	r1, r9
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	f7f7 fdba 	bl	8000b2c <__aeabi_d2iz>
 8008fb8:	4606      	mov	r6, r0
 8008fba:	f7f7 fab3 	bl	8000524 <__aeabi_i2d>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	f7f7 f95f 	bl	8000288 <__aeabi_dsub>
 8008fca:	3630      	adds	r6, #48	; 0x30
 8008fcc:	f805 6b01 	strb.w	r6, [r5], #1
 8008fd0:	4652      	mov	r2, sl
 8008fd2:	465b      	mov	r3, fp
 8008fd4:	4680      	mov	r8, r0
 8008fd6:	4689      	mov	r9, r1
 8008fd8:	f7f7 fd80 	bl	8000adc <__aeabi_dcmplt>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d163      	bne.n	80090a8 <_dtoa_r+0x608>
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	464b      	mov	r3, r9
 8008fe4:	4936      	ldr	r1, [pc, #216]	; (80090c0 <_dtoa_r+0x620>)
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	f7f7 f94e 	bl	8000288 <__aeabi_dsub>
 8008fec:	4652      	mov	r2, sl
 8008fee:	465b      	mov	r3, fp
 8008ff0:	f7f7 fd74 	bl	8000adc <__aeabi_dcmplt>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f040 80b5 	bne.w	8009164 <_dtoa_r+0x6c4>
 8008ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ffc:	429d      	cmp	r5, r3
 8008ffe:	d081      	beq.n	8008f04 <_dtoa_r+0x464>
 8009000:	4b30      	ldr	r3, [pc, #192]	; (80090c4 <_dtoa_r+0x624>)
 8009002:	2200      	movs	r2, #0
 8009004:	4650      	mov	r0, sl
 8009006:	4659      	mov	r1, fp
 8009008:	f7f7 faf6 	bl	80005f8 <__aeabi_dmul>
 800900c:	4b2d      	ldr	r3, [pc, #180]	; (80090c4 <_dtoa_r+0x624>)
 800900e:	4682      	mov	sl, r0
 8009010:	468b      	mov	fp, r1
 8009012:	4640      	mov	r0, r8
 8009014:	4649      	mov	r1, r9
 8009016:	2200      	movs	r2, #0
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	4680      	mov	r8, r0
 800901e:	4689      	mov	r9, r1
 8009020:	e7c6      	b.n	8008fb0 <_dtoa_r+0x510>
 8009022:	4650      	mov	r0, sl
 8009024:	4659      	mov	r1, fp
 8009026:	f7f7 fae7 	bl	80005f8 <__aeabi_dmul>
 800902a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800902c:	9d01      	ldr	r5, [sp, #4]
 800902e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009030:	4682      	mov	sl, r0
 8009032:	468b      	mov	fp, r1
 8009034:	4649      	mov	r1, r9
 8009036:	4640      	mov	r0, r8
 8009038:	f7f7 fd78 	bl	8000b2c <__aeabi_d2iz>
 800903c:	4606      	mov	r6, r0
 800903e:	f7f7 fa71 	bl	8000524 <__aeabi_i2d>
 8009042:	3630      	adds	r6, #48	; 0x30
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4640      	mov	r0, r8
 800904a:	4649      	mov	r1, r9
 800904c:	f7f7 f91c 	bl	8000288 <__aeabi_dsub>
 8009050:	f805 6b01 	strb.w	r6, [r5], #1
 8009054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009056:	429d      	cmp	r5, r3
 8009058:	4680      	mov	r8, r0
 800905a:	4689      	mov	r9, r1
 800905c:	f04f 0200 	mov.w	r2, #0
 8009060:	d124      	bne.n	80090ac <_dtoa_r+0x60c>
 8009062:	4b1b      	ldr	r3, [pc, #108]	; (80090d0 <_dtoa_r+0x630>)
 8009064:	4650      	mov	r0, sl
 8009066:	4659      	mov	r1, fp
 8009068:	f7f7 f910 	bl	800028c <__adddf3>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4640      	mov	r0, r8
 8009072:	4649      	mov	r1, r9
 8009074:	f7f7 fd50 	bl	8000b18 <__aeabi_dcmpgt>
 8009078:	2800      	cmp	r0, #0
 800907a:	d173      	bne.n	8009164 <_dtoa_r+0x6c4>
 800907c:	4652      	mov	r2, sl
 800907e:	465b      	mov	r3, fp
 8009080:	4913      	ldr	r1, [pc, #76]	; (80090d0 <_dtoa_r+0x630>)
 8009082:	2000      	movs	r0, #0
 8009084:	f7f7 f900 	bl	8000288 <__aeabi_dsub>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	4640      	mov	r0, r8
 800908e:	4649      	mov	r1, r9
 8009090:	f7f7 fd24 	bl	8000adc <__aeabi_dcmplt>
 8009094:	2800      	cmp	r0, #0
 8009096:	f43f af35 	beq.w	8008f04 <_dtoa_r+0x464>
 800909a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800909c:	1e6b      	subs	r3, r5, #1
 800909e:	930f      	str	r3, [sp, #60]	; 0x3c
 80090a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090a4:	2b30      	cmp	r3, #48	; 0x30
 80090a6:	d0f8      	beq.n	800909a <_dtoa_r+0x5fa>
 80090a8:	9700      	str	r7, [sp, #0]
 80090aa:	e049      	b.n	8009140 <_dtoa_r+0x6a0>
 80090ac:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <_dtoa_r+0x624>)
 80090ae:	f7f7 faa3 	bl	80005f8 <__aeabi_dmul>
 80090b2:	4680      	mov	r8, r0
 80090b4:	4689      	mov	r9, r1
 80090b6:	e7bd      	b.n	8009034 <_dtoa_r+0x594>
 80090b8:	0800a630 	.word	0x0800a630
 80090bc:	0800a608 	.word	0x0800a608
 80090c0:	3ff00000 	.word	0x3ff00000
 80090c4:	40240000 	.word	0x40240000
 80090c8:	401c0000 	.word	0x401c0000
 80090cc:	40140000 	.word	0x40140000
 80090d0:	3fe00000 	.word	0x3fe00000
 80090d4:	9d01      	ldr	r5, [sp, #4]
 80090d6:	4656      	mov	r6, sl
 80090d8:	465f      	mov	r7, fp
 80090da:	4642      	mov	r2, r8
 80090dc:	464b      	mov	r3, r9
 80090de:	4630      	mov	r0, r6
 80090e0:	4639      	mov	r1, r7
 80090e2:	f7f7 fbb3 	bl	800084c <__aeabi_ddiv>
 80090e6:	f7f7 fd21 	bl	8000b2c <__aeabi_d2iz>
 80090ea:	4682      	mov	sl, r0
 80090ec:	f7f7 fa1a 	bl	8000524 <__aeabi_i2d>
 80090f0:	4642      	mov	r2, r8
 80090f2:	464b      	mov	r3, r9
 80090f4:	f7f7 fa80 	bl	80005f8 <__aeabi_dmul>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4630      	mov	r0, r6
 80090fe:	4639      	mov	r1, r7
 8009100:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009104:	f7f7 f8c0 	bl	8000288 <__aeabi_dsub>
 8009108:	f805 6b01 	strb.w	r6, [r5], #1
 800910c:	9e01      	ldr	r6, [sp, #4]
 800910e:	9f03      	ldr	r7, [sp, #12]
 8009110:	1bae      	subs	r6, r5, r6
 8009112:	42b7      	cmp	r7, r6
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	d135      	bne.n	8009186 <_dtoa_r+0x6e6>
 800911a:	f7f7 f8b7 	bl	800028c <__adddf3>
 800911e:	4642      	mov	r2, r8
 8009120:	464b      	mov	r3, r9
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	f7f7 fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 800912a:	b9d0      	cbnz	r0, 8009162 <_dtoa_r+0x6c2>
 800912c:	4642      	mov	r2, r8
 800912e:	464b      	mov	r3, r9
 8009130:	4630      	mov	r0, r6
 8009132:	4639      	mov	r1, r7
 8009134:	f7f7 fcc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009138:	b110      	cbz	r0, 8009140 <_dtoa_r+0x6a0>
 800913a:	f01a 0f01 	tst.w	sl, #1
 800913e:	d110      	bne.n	8009162 <_dtoa_r+0x6c2>
 8009140:	4620      	mov	r0, r4
 8009142:	ee18 1a10 	vmov	r1, s16
 8009146:	f7fe ffdb 	bl	8008100 <_Bfree>
 800914a:	2300      	movs	r3, #0
 800914c:	9800      	ldr	r0, [sp, #0]
 800914e:	702b      	strb	r3, [r5, #0]
 8009150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009152:	3001      	adds	r0, #1
 8009154:	6018      	str	r0, [r3, #0]
 8009156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009158:	2b00      	cmp	r3, #0
 800915a:	f43f acf1 	beq.w	8008b40 <_dtoa_r+0xa0>
 800915e:	601d      	str	r5, [r3, #0]
 8009160:	e4ee      	b.n	8008b40 <_dtoa_r+0xa0>
 8009162:	9f00      	ldr	r7, [sp, #0]
 8009164:	462b      	mov	r3, r5
 8009166:	461d      	mov	r5, r3
 8009168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800916c:	2a39      	cmp	r2, #57	; 0x39
 800916e:	d106      	bne.n	800917e <_dtoa_r+0x6de>
 8009170:	9a01      	ldr	r2, [sp, #4]
 8009172:	429a      	cmp	r2, r3
 8009174:	d1f7      	bne.n	8009166 <_dtoa_r+0x6c6>
 8009176:	9901      	ldr	r1, [sp, #4]
 8009178:	2230      	movs	r2, #48	; 0x30
 800917a:	3701      	adds	r7, #1
 800917c:	700a      	strb	r2, [r1, #0]
 800917e:	781a      	ldrb	r2, [r3, #0]
 8009180:	3201      	adds	r2, #1
 8009182:	701a      	strb	r2, [r3, #0]
 8009184:	e790      	b.n	80090a8 <_dtoa_r+0x608>
 8009186:	4ba6      	ldr	r3, [pc, #664]	; (8009420 <_dtoa_r+0x980>)
 8009188:	2200      	movs	r2, #0
 800918a:	f7f7 fa35 	bl	80005f8 <__aeabi_dmul>
 800918e:	2200      	movs	r2, #0
 8009190:	2300      	movs	r3, #0
 8009192:	4606      	mov	r6, r0
 8009194:	460f      	mov	r7, r1
 8009196:	f7f7 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800919a:	2800      	cmp	r0, #0
 800919c:	d09d      	beq.n	80090da <_dtoa_r+0x63a>
 800919e:	e7cf      	b.n	8009140 <_dtoa_r+0x6a0>
 80091a0:	9a08      	ldr	r2, [sp, #32]
 80091a2:	2a00      	cmp	r2, #0
 80091a4:	f000 80d7 	beq.w	8009356 <_dtoa_r+0x8b6>
 80091a8:	9a06      	ldr	r2, [sp, #24]
 80091aa:	2a01      	cmp	r2, #1
 80091ac:	f300 80ba 	bgt.w	8009324 <_dtoa_r+0x884>
 80091b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091b2:	2a00      	cmp	r2, #0
 80091b4:	f000 80b2 	beq.w	800931c <_dtoa_r+0x87c>
 80091b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091bc:	9e07      	ldr	r6, [sp, #28]
 80091be:	9d04      	ldr	r5, [sp, #16]
 80091c0:	9a04      	ldr	r2, [sp, #16]
 80091c2:	441a      	add	r2, r3
 80091c4:	9204      	str	r2, [sp, #16]
 80091c6:	9a05      	ldr	r2, [sp, #20]
 80091c8:	2101      	movs	r1, #1
 80091ca:	441a      	add	r2, r3
 80091cc:	4620      	mov	r0, r4
 80091ce:	9205      	str	r2, [sp, #20]
 80091d0:	f7ff f84e 	bl	8008270 <__i2b>
 80091d4:	4607      	mov	r7, r0
 80091d6:	2d00      	cmp	r5, #0
 80091d8:	dd0c      	ble.n	80091f4 <_dtoa_r+0x754>
 80091da:	9b05      	ldr	r3, [sp, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	dd09      	ble.n	80091f4 <_dtoa_r+0x754>
 80091e0:	42ab      	cmp	r3, r5
 80091e2:	9a04      	ldr	r2, [sp, #16]
 80091e4:	bfa8      	it	ge
 80091e6:	462b      	movge	r3, r5
 80091e8:	1ad2      	subs	r2, r2, r3
 80091ea:	9204      	str	r2, [sp, #16]
 80091ec:	9a05      	ldr	r2, [sp, #20]
 80091ee:	1aed      	subs	r5, r5, r3
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	9305      	str	r3, [sp, #20]
 80091f4:	9b07      	ldr	r3, [sp, #28]
 80091f6:	b31b      	cbz	r3, 8009240 <_dtoa_r+0x7a0>
 80091f8:	9b08      	ldr	r3, [sp, #32]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 80af 	beq.w	800935e <_dtoa_r+0x8be>
 8009200:	2e00      	cmp	r6, #0
 8009202:	dd13      	ble.n	800922c <_dtoa_r+0x78c>
 8009204:	4639      	mov	r1, r7
 8009206:	4632      	mov	r2, r6
 8009208:	4620      	mov	r0, r4
 800920a:	f7ff f8f1 	bl	80083f0 <__pow5mult>
 800920e:	ee18 2a10 	vmov	r2, s16
 8009212:	4601      	mov	r1, r0
 8009214:	4607      	mov	r7, r0
 8009216:	4620      	mov	r0, r4
 8009218:	f7ff f840 	bl	800829c <__multiply>
 800921c:	ee18 1a10 	vmov	r1, s16
 8009220:	4680      	mov	r8, r0
 8009222:	4620      	mov	r0, r4
 8009224:	f7fe ff6c 	bl	8008100 <_Bfree>
 8009228:	ee08 8a10 	vmov	s16, r8
 800922c:	9b07      	ldr	r3, [sp, #28]
 800922e:	1b9a      	subs	r2, r3, r6
 8009230:	d006      	beq.n	8009240 <_dtoa_r+0x7a0>
 8009232:	ee18 1a10 	vmov	r1, s16
 8009236:	4620      	mov	r0, r4
 8009238:	f7ff f8da 	bl	80083f0 <__pow5mult>
 800923c:	ee08 0a10 	vmov	s16, r0
 8009240:	2101      	movs	r1, #1
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff f814 	bl	8008270 <__i2b>
 8009248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924a:	2b00      	cmp	r3, #0
 800924c:	4606      	mov	r6, r0
 800924e:	f340 8088 	ble.w	8009362 <_dtoa_r+0x8c2>
 8009252:	461a      	mov	r2, r3
 8009254:	4601      	mov	r1, r0
 8009256:	4620      	mov	r0, r4
 8009258:	f7ff f8ca 	bl	80083f0 <__pow5mult>
 800925c:	9b06      	ldr	r3, [sp, #24]
 800925e:	2b01      	cmp	r3, #1
 8009260:	4606      	mov	r6, r0
 8009262:	f340 8081 	ble.w	8009368 <_dtoa_r+0x8c8>
 8009266:	f04f 0800 	mov.w	r8, #0
 800926a:	6933      	ldr	r3, [r6, #16]
 800926c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009270:	6918      	ldr	r0, [r3, #16]
 8009272:	f7fe ffad 	bl	80081d0 <__hi0bits>
 8009276:	f1c0 0020 	rsb	r0, r0, #32
 800927a:	9b05      	ldr	r3, [sp, #20]
 800927c:	4418      	add	r0, r3
 800927e:	f010 001f 	ands.w	r0, r0, #31
 8009282:	f000 8092 	beq.w	80093aa <_dtoa_r+0x90a>
 8009286:	f1c0 0320 	rsb	r3, r0, #32
 800928a:	2b04      	cmp	r3, #4
 800928c:	f340 808a 	ble.w	80093a4 <_dtoa_r+0x904>
 8009290:	f1c0 001c 	rsb	r0, r0, #28
 8009294:	9b04      	ldr	r3, [sp, #16]
 8009296:	4403      	add	r3, r0
 8009298:	9304      	str	r3, [sp, #16]
 800929a:	9b05      	ldr	r3, [sp, #20]
 800929c:	4403      	add	r3, r0
 800929e:	4405      	add	r5, r0
 80092a0:	9305      	str	r3, [sp, #20]
 80092a2:	9b04      	ldr	r3, [sp, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dd07      	ble.n	80092b8 <_dtoa_r+0x818>
 80092a8:	ee18 1a10 	vmov	r1, s16
 80092ac:	461a      	mov	r2, r3
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7ff f8f8 	bl	80084a4 <__lshift>
 80092b4:	ee08 0a10 	vmov	s16, r0
 80092b8:	9b05      	ldr	r3, [sp, #20]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dd05      	ble.n	80092ca <_dtoa_r+0x82a>
 80092be:	4631      	mov	r1, r6
 80092c0:	461a      	mov	r2, r3
 80092c2:	4620      	mov	r0, r4
 80092c4:	f7ff f8ee 	bl	80084a4 <__lshift>
 80092c8:	4606      	mov	r6, r0
 80092ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d06e      	beq.n	80093ae <_dtoa_r+0x90e>
 80092d0:	ee18 0a10 	vmov	r0, s16
 80092d4:	4631      	mov	r1, r6
 80092d6:	f7ff f955 	bl	8008584 <__mcmp>
 80092da:	2800      	cmp	r0, #0
 80092dc:	da67      	bge.n	80093ae <_dtoa_r+0x90e>
 80092de:	9b00      	ldr	r3, [sp, #0]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	ee18 1a10 	vmov	r1, s16
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	220a      	movs	r2, #10
 80092ea:	2300      	movs	r3, #0
 80092ec:	4620      	mov	r0, r4
 80092ee:	f7fe ff29 	bl	8008144 <__multadd>
 80092f2:	9b08      	ldr	r3, [sp, #32]
 80092f4:	ee08 0a10 	vmov	s16, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 81b1 	beq.w	8009660 <_dtoa_r+0xbc0>
 80092fe:	2300      	movs	r3, #0
 8009300:	4639      	mov	r1, r7
 8009302:	220a      	movs	r2, #10
 8009304:	4620      	mov	r0, r4
 8009306:	f7fe ff1d 	bl	8008144 <__multadd>
 800930a:	9b02      	ldr	r3, [sp, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	4607      	mov	r7, r0
 8009310:	f300 808e 	bgt.w	8009430 <_dtoa_r+0x990>
 8009314:	9b06      	ldr	r3, [sp, #24]
 8009316:	2b02      	cmp	r3, #2
 8009318:	dc51      	bgt.n	80093be <_dtoa_r+0x91e>
 800931a:	e089      	b.n	8009430 <_dtoa_r+0x990>
 800931c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800931e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009322:	e74b      	b.n	80091bc <_dtoa_r+0x71c>
 8009324:	9b03      	ldr	r3, [sp, #12]
 8009326:	1e5e      	subs	r6, r3, #1
 8009328:	9b07      	ldr	r3, [sp, #28]
 800932a:	42b3      	cmp	r3, r6
 800932c:	bfbf      	itttt	lt
 800932e:	9b07      	ldrlt	r3, [sp, #28]
 8009330:	9607      	strlt	r6, [sp, #28]
 8009332:	1af2      	sublt	r2, r6, r3
 8009334:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009336:	bfb6      	itet	lt
 8009338:	189b      	addlt	r3, r3, r2
 800933a:	1b9e      	subge	r6, r3, r6
 800933c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	bfb8      	it	lt
 8009342:	2600      	movlt	r6, #0
 8009344:	2b00      	cmp	r3, #0
 8009346:	bfb7      	itett	lt
 8009348:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800934c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009350:	1a9d      	sublt	r5, r3, r2
 8009352:	2300      	movlt	r3, #0
 8009354:	e734      	b.n	80091c0 <_dtoa_r+0x720>
 8009356:	9e07      	ldr	r6, [sp, #28]
 8009358:	9d04      	ldr	r5, [sp, #16]
 800935a:	9f08      	ldr	r7, [sp, #32]
 800935c:	e73b      	b.n	80091d6 <_dtoa_r+0x736>
 800935e:	9a07      	ldr	r2, [sp, #28]
 8009360:	e767      	b.n	8009232 <_dtoa_r+0x792>
 8009362:	9b06      	ldr	r3, [sp, #24]
 8009364:	2b01      	cmp	r3, #1
 8009366:	dc18      	bgt.n	800939a <_dtoa_r+0x8fa>
 8009368:	f1ba 0f00 	cmp.w	sl, #0
 800936c:	d115      	bne.n	800939a <_dtoa_r+0x8fa>
 800936e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009372:	b993      	cbnz	r3, 800939a <_dtoa_r+0x8fa>
 8009374:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009378:	0d1b      	lsrs	r3, r3, #20
 800937a:	051b      	lsls	r3, r3, #20
 800937c:	b183      	cbz	r3, 80093a0 <_dtoa_r+0x900>
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	3301      	adds	r3, #1
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	9b05      	ldr	r3, [sp, #20]
 8009386:	3301      	adds	r3, #1
 8009388:	9305      	str	r3, [sp, #20]
 800938a:	f04f 0801 	mov.w	r8, #1
 800938e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009390:	2b00      	cmp	r3, #0
 8009392:	f47f af6a 	bne.w	800926a <_dtoa_r+0x7ca>
 8009396:	2001      	movs	r0, #1
 8009398:	e76f      	b.n	800927a <_dtoa_r+0x7da>
 800939a:	f04f 0800 	mov.w	r8, #0
 800939e:	e7f6      	b.n	800938e <_dtoa_r+0x8ee>
 80093a0:	4698      	mov	r8, r3
 80093a2:	e7f4      	b.n	800938e <_dtoa_r+0x8ee>
 80093a4:	f43f af7d 	beq.w	80092a2 <_dtoa_r+0x802>
 80093a8:	4618      	mov	r0, r3
 80093aa:	301c      	adds	r0, #28
 80093ac:	e772      	b.n	8009294 <_dtoa_r+0x7f4>
 80093ae:	9b03      	ldr	r3, [sp, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dc37      	bgt.n	8009424 <_dtoa_r+0x984>
 80093b4:	9b06      	ldr	r3, [sp, #24]
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	dd34      	ble.n	8009424 <_dtoa_r+0x984>
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	9302      	str	r3, [sp, #8]
 80093be:	9b02      	ldr	r3, [sp, #8]
 80093c0:	b96b      	cbnz	r3, 80093de <_dtoa_r+0x93e>
 80093c2:	4631      	mov	r1, r6
 80093c4:	2205      	movs	r2, #5
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7fe febc 	bl	8008144 <__multadd>
 80093cc:	4601      	mov	r1, r0
 80093ce:	4606      	mov	r6, r0
 80093d0:	ee18 0a10 	vmov	r0, s16
 80093d4:	f7ff f8d6 	bl	8008584 <__mcmp>
 80093d8:	2800      	cmp	r0, #0
 80093da:	f73f adbb 	bgt.w	8008f54 <_dtoa_r+0x4b4>
 80093de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e0:	9d01      	ldr	r5, [sp, #4]
 80093e2:	43db      	mvns	r3, r3
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	f04f 0800 	mov.w	r8, #0
 80093ea:	4631      	mov	r1, r6
 80093ec:	4620      	mov	r0, r4
 80093ee:	f7fe fe87 	bl	8008100 <_Bfree>
 80093f2:	2f00      	cmp	r7, #0
 80093f4:	f43f aea4 	beq.w	8009140 <_dtoa_r+0x6a0>
 80093f8:	f1b8 0f00 	cmp.w	r8, #0
 80093fc:	d005      	beq.n	800940a <_dtoa_r+0x96a>
 80093fe:	45b8      	cmp	r8, r7
 8009400:	d003      	beq.n	800940a <_dtoa_r+0x96a>
 8009402:	4641      	mov	r1, r8
 8009404:	4620      	mov	r0, r4
 8009406:	f7fe fe7b 	bl	8008100 <_Bfree>
 800940a:	4639      	mov	r1, r7
 800940c:	4620      	mov	r0, r4
 800940e:	f7fe fe77 	bl	8008100 <_Bfree>
 8009412:	e695      	b.n	8009140 <_dtoa_r+0x6a0>
 8009414:	2600      	movs	r6, #0
 8009416:	4637      	mov	r7, r6
 8009418:	e7e1      	b.n	80093de <_dtoa_r+0x93e>
 800941a:	9700      	str	r7, [sp, #0]
 800941c:	4637      	mov	r7, r6
 800941e:	e599      	b.n	8008f54 <_dtoa_r+0x4b4>
 8009420:	40240000 	.word	0x40240000
 8009424:	9b08      	ldr	r3, [sp, #32]
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 80ca 	beq.w	80095c0 <_dtoa_r+0xb20>
 800942c:	9b03      	ldr	r3, [sp, #12]
 800942e:	9302      	str	r3, [sp, #8]
 8009430:	2d00      	cmp	r5, #0
 8009432:	dd05      	ble.n	8009440 <_dtoa_r+0x9a0>
 8009434:	4639      	mov	r1, r7
 8009436:	462a      	mov	r2, r5
 8009438:	4620      	mov	r0, r4
 800943a:	f7ff f833 	bl	80084a4 <__lshift>
 800943e:	4607      	mov	r7, r0
 8009440:	f1b8 0f00 	cmp.w	r8, #0
 8009444:	d05b      	beq.n	80094fe <_dtoa_r+0xa5e>
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	4620      	mov	r0, r4
 800944a:	f7fe fe19 	bl	8008080 <_Balloc>
 800944e:	4605      	mov	r5, r0
 8009450:	b928      	cbnz	r0, 800945e <_dtoa_r+0x9be>
 8009452:	4b87      	ldr	r3, [pc, #540]	; (8009670 <_dtoa_r+0xbd0>)
 8009454:	4602      	mov	r2, r0
 8009456:	f240 21ea 	movw	r1, #746	; 0x2ea
 800945a:	f7ff bb3b 	b.w	8008ad4 <_dtoa_r+0x34>
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	3202      	adds	r2, #2
 8009462:	0092      	lsls	r2, r2, #2
 8009464:	f107 010c 	add.w	r1, r7, #12
 8009468:	300c      	adds	r0, #12
 800946a:	f000 f921 	bl	80096b0 <memcpy>
 800946e:	2201      	movs	r2, #1
 8009470:	4629      	mov	r1, r5
 8009472:	4620      	mov	r0, r4
 8009474:	f7ff f816 	bl	80084a4 <__lshift>
 8009478:	9b01      	ldr	r3, [sp, #4]
 800947a:	f103 0901 	add.w	r9, r3, #1
 800947e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009482:	4413      	add	r3, r2
 8009484:	9305      	str	r3, [sp, #20]
 8009486:	f00a 0301 	and.w	r3, sl, #1
 800948a:	46b8      	mov	r8, r7
 800948c:	9304      	str	r3, [sp, #16]
 800948e:	4607      	mov	r7, r0
 8009490:	4631      	mov	r1, r6
 8009492:	ee18 0a10 	vmov	r0, s16
 8009496:	f7ff fa75 	bl	8008984 <quorem>
 800949a:	4641      	mov	r1, r8
 800949c:	9002      	str	r0, [sp, #8]
 800949e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80094a2:	ee18 0a10 	vmov	r0, s16
 80094a6:	f7ff f86d 	bl	8008584 <__mcmp>
 80094aa:	463a      	mov	r2, r7
 80094ac:	9003      	str	r0, [sp, #12]
 80094ae:	4631      	mov	r1, r6
 80094b0:	4620      	mov	r0, r4
 80094b2:	f7ff f883 	bl	80085bc <__mdiff>
 80094b6:	68c2      	ldr	r2, [r0, #12]
 80094b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80094bc:	4605      	mov	r5, r0
 80094be:	bb02      	cbnz	r2, 8009502 <_dtoa_r+0xa62>
 80094c0:	4601      	mov	r1, r0
 80094c2:	ee18 0a10 	vmov	r0, s16
 80094c6:	f7ff f85d 	bl	8008584 <__mcmp>
 80094ca:	4602      	mov	r2, r0
 80094cc:	4629      	mov	r1, r5
 80094ce:	4620      	mov	r0, r4
 80094d0:	9207      	str	r2, [sp, #28]
 80094d2:	f7fe fe15 	bl	8008100 <_Bfree>
 80094d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80094da:	ea43 0102 	orr.w	r1, r3, r2
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	430b      	orrs	r3, r1
 80094e2:	464d      	mov	r5, r9
 80094e4:	d10f      	bne.n	8009506 <_dtoa_r+0xa66>
 80094e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094ea:	d02a      	beq.n	8009542 <_dtoa_r+0xaa2>
 80094ec:	9b03      	ldr	r3, [sp, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dd02      	ble.n	80094f8 <_dtoa_r+0xa58>
 80094f2:	9b02      	ldr	r3, [sp, #8]
 80094f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80094f8:	f88b a000 	strb.w	sl, [fp]
 80094fc:	e775      	b.n	80093ea <_dtoa_r+0x94a>
 80094fe:	4638      	mov	r0, r7
 8009500:	e7ba      	b.n	8009478 <_dtoa_r+0x9d8>
 8009502:	2201      	movs	r2, #1
 8009504:	e7e2      	b.n	80094cc <_dtoa_r+0xa2c>
 8009506:	9b03      	ldr	r3, [sp, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	db04      	blt.n	8009516 <_dtoa_r+0xa76>
 800950c:	9906      	ldr	r1, [sp, #24]
 800950e:	430b      	orrs	r3, r1
 8009510:	9904      	ldr	r1, [sp, #16]
 8009512:	430b      	orrs	r3, r1
 8009514:	d122      	bne.n	800955c <_dtoa_r+0xabc>
 8009516:	2a00      	cmp	r2, #0
 8009518:	ddee      	ble.n	80094f8 <_dtoa_r+0xa58>
 800951a:	ee18 1a10 	vmov	r1, s16
 800951e:	2201      	movs	r2, #1
 8009520:	4620      	mov	r0, r4
 8009522:	f7fe ffbf 	bl	80084a4 <__lshift>
 8009526:	4631      	mov	r1, r6
 8009528:	ee08 0a10 	vmov	s16, r0
 800952c:	f7ff f82a 	bl	8008584 <__mcmp>
 8009530:	2800      	cmp	r0, #0
 8009532:	dc03      	bgt.n	800953c <_dtoa_r+0xa9c>
 8009534:	d1e0      	bne.n	80094f8 <_dtoa_r+0xa58>
 8009536:	f01a 0f01 	tst.w	sl, #1
 800953a:	d0dd      	beq.n	80094f8 <_dtoa_r+0xa58>
 800953c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009540:	d1d7      	bne.n	80094f2 <_dtoa_r+0xa52>
 8009542:	2339      	movs	r3, #57	; 0x39
 8009544:	f88b 3000 	strb.w	r3, [fp]
 8009548:	462b      	mov	r3, r5
 800954a:	461d      	mov	r5, r3
 800954c:	3b01      	subs	r3, #1
 800954e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009552:	2a39      	cmp	r2, #57	; 0x39
 8009554:	d071      	beq.n	800963a <_dtoa_r+0xb9a>
 8009556:	3201      	adds	r2, #1
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	e746      	b.n	80093ea <_dtoa_r+0x94a>
 800955c:	2a00      	cmp	r2, #0
 800955e:	dd07      	ble.n	8009570 <_dtoa_r+0xad0>
 8009560:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009564:	d0ed      	beq.n	8009542 <_dtoa_r+0xaa2>
 8009566:	f10a 0301 	add.w	r3, sl, #1
 800956a:	f88b 3000 	strb.w	r3, [fp]
 800956e:	e73c      	b.n	80093ea <_dtoa_r+0x94a>
 8009570:	9b05      	ldr	r3, [sp, #20]
 8009572:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009576:	4599      	cmp	r9, r3
 8009578:	d047      	beq.n	800960a <_dtoa_r+0xb6a>
 800957a:	ee18 1a10 	vmov	r1, s16
 800957e:	2300      	movs	r3, #0
 8009580:	220a      	movs	r2, #10
 8009582:	4620      	mov	r0, r4
 8009584:	f7fe fdde 	bl	8008144 <__multadd>
 8009588:	45b8      	cmp	r8, r7
 800958a:	ee08 0a10 	vmov	s16, r0
 800958e:	f04f 0300 	mov.w	r3, #0
 8009592:	f04f 020a 	mov.w	r2, #10
 8009596:	4641      	mov	r1, r8
 8009598:	4620      	mov	r0, r4
 800959a:	d106      	bne.n	80095aa <_dtoa_r+0xb0a>
 800959c:	f7fe fdd2 	bl	8008144 <__multadd>
 80095a0:	4680      	mov	r8, r0
 80095a2:	4607      	mov	r7, r0
 80095a4:	f109 0901 	add.w	r9, r9, #1
 80095a8:	e772      	b.n	8009490 <_dtoa_r+0x9f0>
 80095aa:	f7fe fdcb 	bl	8008144 <__multadd>
 80095ae:	4639      	mov	r1, r7
 80095b0:	4680      	mov	r8, r0
 80095b2:	2300      	movs	r3, #0
 80095b4:	220a      	movs	r2, #10
 80095b6:	4620      	mov	r0, r4
 80095b8:	f7fe fdc4 	bl	8008144 <__multadd>
 80095bc:	4607      	mov	r7, r0
 80095be:	e7f1      	b.n	80095a4 <_dtoa_r+0xb04>
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	9302      	str	r3, [sp, #8]
 80095c4:	9d01      	ldr	r5, [sp, #4]
 80095c6:	ee18 0a10 	vmov	r0, s16
 80095ca:	4631      	mov	r1, r6
 80095cc:	f7ff f9da 	bl	8008984 <quorem>
 80095d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095d4:	9b01      	ldr	r3, [sp, #4]
 80095d6:	f805 ab01 	strb.w	sl, [r5], #1
 80095da:	1aea      	subs	r2, r5, r3
 80095dc:	9b02      	ldr	r3, [sp, #8]
 80095de:	4293      	cmp	r3, r2
 80095e0:	dd09      	ble.n	80095f6 <_dtoa_r+0xb56>
 80095e2:	ee18 1a10 	vmov	r1, s16
 80095e6:	2300      	movs	r3, #0
 80095e8:	220a      	movs	r2, #10
 80095ea:	4620      	mov	r0, r4
 80095ec:	f7fe fdaa 	bl	8008144 <__multadd>
 80095f0:	ee08 0a10 	vmov	s16, r0
 80095f4:	e7e7      	b.n	80095c6 <_dtoa_r+0xb26>
 80095f6:	9b02      	ldr	r3, [sp, #8]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	bfc8      	it	gt
 80095fc:	461d      	movgt	r5, r3
 80095fe:	9b01      	ldr	r3, [sp, #4]
 8009600:	bfd8      	it	le
 8009602:	2501      	movle	r5, #1
 8009604:	441d      	add	r5, r3
 8009606:	f04f 0800 	mov.w	r8, #0
 800960a:	ee18 1a10 	vmov	r1, s16
 800960e:	2201      	movs	r2, #1
 8009610:	4620      	mov	r0, r4
 8009612:	f7fe ff47 	bl	80084a4 <__lshift>
 8009616:	4631      	mov	r1, r6
 8009618:	ee08 0a10 	vmov	s16, r0
 800961c:	f7fe ffb2 	bl	8008584 <__mcmp>
 8009620:	2800      	cmp	r0, #0
 8009622:	dc91      	bgt.n	8009548 <_dtoa_r+0xaa8>
 8009624:	d102      	bne.n	800962c <_dtoa_r+0xb8c>
 8009626:	f01a 0f01 	tst.w	sl, #1
 800962a:	d18d      	bne.n	8009548 <_dtoa_r+0xaa8>
 800962c:	462b      	mov	r3, r5
 800962e:	461d      	mov	r5, r3
 8009630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009634:	2a30      	cmp	r2, #48	; 0x30
 8009636:	d0fa      	beq.n	800962e <_dtoa_r+0xb8e>
 8009638:	e6d7      	b.n	80093ea <_dtoa_r+0x94a>
 800963a:	9a01      	ldr	r2, [sp, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	d184      	bne.n	800954a <_dtoa_r+0xaaa>
 8009640:	9b00      	ldr	r3, [sp, #0]
 8009642:	3301      	adds	r3, #1
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	2331      	movs	r3, #49	; 0x31
 8009648:	7013      	strb	r3, [r2, #0]
 800964a:	e6ce      	b.n	80093ea <_dtoa_r+0x94a>
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <_dtoa_r+0xbd4>)
 800964e:	f7ff ba95 	b.w	8008b7c <_dtoa_r+0xdc>
 8009652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009654:	2b00      	cmp	r3, #0
 8009656:	f47f aa6e 	bne.w	8008b36 <_dtoa_r+0x96>
 800965a:	4b07      	ldr	r3, [pc, #28]	; (8009678 <_dtoa_r+0xbd8>)
 800965c:	f7ff ba8e 	b.w	8008b7c <_dtoa_r+0xdc>
 8009660:	9b02      	ldr	r3, [sp, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	dcae      	bgt.n	80095c4 <_dtoa_r+0xb24>
 8009666:	9b06      	ldr	r3, [sp, #24]
 8009668:	2b02      	cmp	r3, #2
 800966a:	f73f aea8 	bgt.w	80093be <_dtoa_r+0x91e>
 800966e:	e7a9      	b.n	80095c4 <_dtoa_r+0xb24>
 8009670:	0800a5f7 	.word	0x0800a5f7
 8009674:	0800a74d 	.word	0x0800a74d
 8009678:	0800a740 	.word	0x0800a740

0800967c <fiprintf>:
 800967c:	b40e      	push	{r1, r2, r3}
 800967e:	b503      	push	{r0, r1, lr}
 8009680:	4601      	mov	r1, r0
 8009682:	ab03      	add	r3, sp, #12
 8009684:	4805      	ldr	r0, [pc, #20]	; (800969c <fiprintf+0x20>)
 8009686:	f853 2b04 	ldr.w	r2, [r3], #4
 800968a:	6800      	ldr	r0, [r0, #0]
 800968c:	9301      	str	r3, [sp, #4]
 800968e:	f000 f89f 	bl	80097d0 <_vfiprintf_r>
 8009692:	b002      	add	sp, #8
 8009694:	f85d eb04 	ldr.w	lr, [sp], #4
 8009698:	b003      	add	sp, #12
 800969a:	4770      	bx	lr
 800969c:	20000100 	.word	0x20000100

080096a0 <malloc>:
 80096a0:	4b02      	ldr	r3, [pc, #8]	; (80096ac <malloc+0xc>)
 80096a2:	4601      	mov	r1, r0
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	f7ff b8c3 	b.w	8008830 <_malloc_r>
 80096aa:	bf00      	nop
 80096ac:	20000100 	.word	0x20000100

080096b0 <memcpy>:
 80096b0:	440a      	add	r2, r1
 80096b2:	4291      	cmp	r1, r2
 80096b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096b8:	d100      	bne.n	80096bc <memcpy+0xc>
 80096ba:	4770      	bx	lr
 80096bc:	b510      	push	{r4, lr}
 80096be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096c6:	4291      	cmp	r1, r2
 80096c8:	d1f9      	bne.n	80096be <memcpy+0xe>
 80096ca:	bd10      	pop	{r4, pc}

080096cc <__malloc_lock>:
 80096cc:	4801      	ldr	r0, [pc, #4]	; (80096d4 <__malloc_lock+0x8>)
 80096ce:	f000 bdc3 	b.w	800a258 <__retarget_lock_acquire_recursive>
 80096d2:	bf00      	nop
 80096d4:	200025bc 	.word	0x200025bc

080096d8 <__malloc_unlock>:
 80096d8:	4801      	ldr	r0, [pc, #4]	; (80096e0 <__malloc_unlock+0x8>)
 80096da:	f000 bdbe 	b.w	800a25a <__retarget_lock_release_recursive>
 80096de:	bf00      	nop
 80096e0:	200025bc 	.word	0x200025bc

080096e4 <_free_r>:
 80096e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096e6:	2900      	cmp	r1, #0
 80096e8:	d044      	beq.n	8009774 <_free_r+0x90>
 80096ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ee:	9001      	str	r0, [sp, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f1a1 0404 	sub.w	r4, r1, #4
 80096f6:	bfb8      	it	lt
 80096f8:	18e4      	addlt	r4, r4, r3
 80096fa:	f7ff ffe7 	bl	80096cc <__malloc_lock>
 80096fe:	4a1e      	ldr	r2, [pc, #120]	; (8009778 <_free_r+0x94>)
 8009700:	9801      	ldr	r0, [sp, #4]
 8009702:	6813      	ldr	r3, [r2, #0]
 8009704:	b933      	cbnz	r3, 8009714 <_free_r+0x30>
 8009706:	6063      	str	r3, [r4, #4]
 8009708:	6014      	str	r4, [r2, #0]
 800970a:	b003      	add	sp, #12
 800970c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009710:	f7ff bfe2 	b.w	80096d8 <__malloc_unlock>
 8009714:	42a3      	cmp	r3, r4
 8009716:	d908      	bls.n	800972a <_free_r+0x46>
 8009718:	6825      	ldr	r5, [r4, #0]
 800971a:	1961      	adds	r1, r4, r5
 800971c:	428b      	cmp	r3, r1
 800971e:	bf01      	itttt	eq
 8009720:	6819      	ldreq	r1, [r3, #0]
 8009722:	685b      	ldreq	r3, [r3, #4]
 8009724:	1949      	addeq	r1, r1, r5
 8009726:	6021      	streq	r1, [r4, #0]
 8009728:	e7ed      	b.n	8009706 <_free_r+0x22>
 800972a:	461a      	mov	r2, r3
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	b10b      	cbz	r3, 8009734 <_free_r+0x50>
 8009730:	42a3      	cmp	r3, r4
 8009732:	d9fa      	bls.n	800972a <_free_r+0x46>
 8009734:	6811      	ldr	r1, [r2, #0]
 8009736:	1855      	adds	r5, r2, r1
 8009738:	42a5      	cmp	r5, r4
 800973a:	d10b      	bne.n	8009754 <_free_r+0x70>
 800973c:	6824      	ldr	r4, [r4, #0]
 800973e:	4421      	add	r1, r4
 8009740:	1854      	adds	r4, r2, r1
 8009742:	42a3      	cmp	r3, r4
 8009744:	6011      	str	r1, [r2, #0]
 8009746:	d1e0      	bne.n	800970a <_free_r+0x26>
 8009748:	681c      	ldr	r4, [r3, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	6053      	str	r3, [r2, #4]
 800974e:	4421      	add	r1, r4
 8009750:	6011      	str	r1, [r2, #0]
 8009752:	e7da      	b.n	800970a <_free_r+0x26>
 8009754:	d902      	bls.n	800975c <_free_r+0x78>
 8009756:	230c      	movs	r3, #12
 8009758:	6003      	str	r3, [r0, #0]
 800975a:	e7d6      	b.n	800970a <_free_r+0x26>
 800975c:	6825      	ldr	r5, [r4, #0]
 800975e:	1961      	adds	r1, r4, r5
 8009760:	428b      	cmp	r3, r1
 8009762:	bf04      	itt	eq
 8009764:	6819      	ldreq	r1, [r3, #0]
 8009766:	685b      	ldreq	r3, [r3, #4]
 8009768:	6063      	str	r3, [r4, #4]
 800976a:	bf04      	itt	eq
 800976c:	1949      	addeq	r1, r1, r5
 800976e:	6021      	streq	r1, [r4, #0]
 8009770:	6054      	str	r4, [r2, #4]
 8009772:	e7ca      	b.n	800970a <_free_r+0x26>
 8009774:	b003      	add	sp, #12
 8009776:	bd30      	pop	{r4, r5, pc}
 8009778:	200025b0 	.word	0x200025b0

0800977c <__sfputc_r>:
 800977c:	6893      	ldr	r3, [r2, #8]
 800977e:	3b01      	subs	r3, #1
 8009780:	2b00      	cmp	r3, #0
 8009782:	b410      	push	{r4}
 8009784:	6093      	str	r3, [r2, #8]
 8009786:	da08      	bge.n	800979a <__sfputc_r+0x1e>
 8009788:	6994      	ldr	r4, [r2, #24]
 800978a:	42a3      	cmp	r3, r4
 800978c:	db01      	blt.n	8009792 <__sfputc_r+0x16>
 800978e:	290a      	cmp	r1, #10
 8009790:	d103      	bne.n	800979a <__sfputc_r+0x1e>
 8009792:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009796:	f000 badf 	b.w	8009d58 <__swbuf_r>
 800979a:	6813      	ldr	r3, [r2, #0]
 800979c:	1c58      	adds	r0, r3, #1
 800979e:	6010      	str	r0, [r2, #0]
 80097a0:	7019      	strb	r1, [r3, #0]
 80097a2:	4608      	mov	r0, r1
 80097a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <__sfputs_r>:
 80097aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ac:	4606      	mov	r6, r0
 80097ae:	460f      	mov	r7, r1
 80097b0:	4614      	mov	r4, r2
 80097b2:	18d5      	adds	r5, r2, r3
 80097b4:	42ac      	cmp	r4, r5
 80097b6:	d101      	bne.n	80097bc <__sfputs_r+0x12>
 80097b8:	2000      	movs	r0, #0
 80097ba:	e007      	b.n	80097cc <__sfputs_r+0x22>
 80097bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c0:	463a      	mov	r2, r7
 80097c2:	4630      	mov	r0, r6
 80097c4:	f7ff ffda 	bl	800977c <__sfputc_r>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d1f3      	bne.n	80097b4 <__sfputs_r+0xa>
 80097cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097d0 <_vfiprintf_r>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	460d      	mov	r5, r1
 80097d6:	b09d      	sub	sp, #116	; 0x74
 80097d8:	4614      	mov	r4, r2
 80097da:	4698      	mov	r8, r3
 80097dc:	4606      	mov	r6, r0
 80097de:	b118      	cbz	r0, 80097e8 <_vfiprintf_r+0x18>
 80097e0:	6983      	ldr	r3, [r0, #24]
 80097e2:	b90b      	cbnz	r3, 80097e8 <_vfiprintf_r+0x18>
 80097e4:	f000 fc9a 	bl	800a11c <__sinit>
 80097e8:	4b89      	ldr	r3, [pc, #548]	; (8009a10 <_vfiprintf_r+0x240>)
 80097ea:	429d      	cmp	r5, r3
 80097ec:	d11b      	bne.n	8009826 <_vfiprintf_r+0x56>
 80097ee:	6875      	ldr	r5, [r6, #4]
 80097f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f2:	07d9      	lsls	r1, r3, #31
 80097f4:	d405      	bmi.n	8009802 <_vfiprintf_r+0x32>
 80097f6:	89ab      	ldrh	r3, [r5, #12]
 80097f8:	059a      	lsls	r2, r3, #22
 80097fa:	d402      	bmi.n	8009802 <_vfiprintf_r+0x32>
 80097fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097fe:	f000 fd2b 	bl	800a258 <__retarget_lock_acquire_recursive>
 8009802:	89ab      	ldrh	r3, [r5, #12]
 8009804:	071b      	lsls	r3, r3, #28
 8009806:	d501      	bpl.n	800980c <_vfiprintf_r+0x3c>
 8009808:	692b      	ldr	r3, [r5, #16]
 800980a:	b9eb      	cbnz	r3, 8009848 <_vfiprintf_r+0x78>
 800980c:	4629      	mov	r1, r5
 800980e:	4630      	mov	r0, r6
 8009810:	f000 faf4 	bl	8009dfc <__swsetup_r>
 8009814:	b1c0      	cbz	r0, 8009848 <_vfiprintf_r+0x78>
 8009816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009818:	07dc      	lsls	r4, r3, #31
 800981a:	d50e      	bpl.n	800983a <_vfiprintf_r+0x6a>
 800981c:	f04f 30ff 	mov.w	r0, #4294967295
 8009820:	b01d      	add	sp, #116	; 0x74
 8009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009826:	4b7b      	ldr	r3, [pc, #492]	; (8009a14 <_vfiprintf_r+0x244>)
 8009828:	429d      	cmp	r5, r3
 800982a:	d101      	bne.n	8009830 <_vfiprintf_r+0x60>
 800982c:	68b5      	ldr	r5, [r6, #8]
 800982e:	e7df      	b.n	80097f0 <_vfiprintf_r+0x20>
 8009830:	4b79      	ldr	r3, [pc, #484]	; (8009a18 <_vfiprintf_r+0x248>)
 8009832:	429d      	cmp	r5, r3
 8009834:	bf08      	it	eq
 8009836:	68f5      	ldreq	r5, [r6, #12]
 8009838:	e7da      	b.n	80097f0 <_vfiprintf_r+0x20>
 800983a:	89ab      	ldrh	r3, [r5, #12]
 800983c:	0598      	lsls	r0, r3, #22
 800983e:	d4ed      	bmi.n	800981c <_vfiprintf_r+0x4c>
 8009840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009842:	f000 fd0a 	bl	800a25a <__retarget_lock_release_recursive>
 8009846:	e7e9      	b.n	800981c <_vfiprintf_r+0x4c>
 8009848:	2300      	movs	r3, #0
 800984a:	9309      	str	r3, [sp, #36]	; 0x24
 800984c:	2320      	movs	r3, #32
 800984e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009852:	f8cd 800c 	str.w	r8, [sp, #12]
 8009856:	2330      	movs	r3, #48	; 0x30
 8009858:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a1c <_vfiprintf_r+0x24c>
 800985c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009860:	f04f 0901 	mov.w	r9, #1
 8009864:	4623      	mov	r3, r4
 8009866:	469a      	mov	sl, r3
 8009868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800986c:	b10a      	cbz	r2, 8009872 <_vfiprintf_r+0xa2>
 800986e:	2a25      	cmp	r2, #37	; 0x25
 8009870:	d1f9      	bne.n	8009866 <_vfiprintf_r+0x96>
 8009872:	ebba 0b04 	subs.w	fp, sl, r4
 8009876:	d00b      	beq.n	8009890 <_vfiprintf_r+0xc0>
 8009878:	465b      	mov	r3, fp
 800987a:	4622      	mov	r2, r4
 800987c:	4629      	mov	r1, r5
 800987e:	4630      	mov	r0, r6
 8009880:	f7ff ff93 	bl	80097aa <__sfputs_r>
 8009884:	3001      	adds	r0, #1
 8009886:	f000 80aa 	beq.w	80099de <_vfiprintf_r+0x20e>
 800988a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800988c:	445a      	add	r2, fp
 800988e:	9209      	str	r2, [sp, #36]	; 0x24
 8009890:	f89a 3000 	ldrb.w	r3, [sl]
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 80a2 	beq.w	80099de <_vfiprintf_r+0x20e>
 800989a:	2300      	movs	r3, #0
 800989c:	f04f 32ff 	mov.w	r2, #4294967295
 80098a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098a4:	f10a 0a01 	add.w	sl, sl, #1
 80098a8:	9304      	str	r3, [sp, #16]
 80098aa:	9307      	str	r3, [sp, #28]
 80098ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098b0:	931a      	str	r3, [sp, #104]	; 0x68
 80098b2:	4654      	mov	r4, sl
 80098b4:	2205      	movs	r2, #5
 80098b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ba:	4858      	ldr	r0, [pc, #352]	; (8009a1c <_vfiprintf_r+0x24c>)
 80098bc:	f7f6 fc90 	bl	80001e0 <memchr>
 80098c0:	9a04      	ldr	r2, [sp, #16]
 80098c2:	b9d8      	cbnz	r0, 80098fc <_vfiprintf_r+0x12c>
 80098c4:	06d1      	lsls	r1, r2, #27
 80098c6:	bf44      	itt	mi
 80098c8:	2320      	movmi	r3, #32
 80098ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ce:	0713      	lsls	r3, r2, #28
 80098d0:	bf44      	itt	mi
 80098d2:	232b      	movmi	r3, #43	; 0x2b
 80098d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098d8:	f89a 3000 	ldrb.w	r3, [sl]
 80098dc:	2b2a      	cmp	r3, #42	; 0x2a
 80098de:	d015      	beq.n	800990c <_vfiprintf_r+0x13c>
 80098e0:	9a07      	ldr	r2, [sp, #28]
 80098e2:	4654      	mov	r4, sl
 80098e4:	2000      	movs	r0, #0
 80098e6:	f04f 0c0a 	mov.w	ip, #10
 80098ea:	4621      	mov	r1, r4
 80098ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f0:	3b30      	subs	r3, #48	; 0x30
 80098f2:	2b09      	cmp	r3, #9
 80098f4:	d94e      	bls.n	8009994 <_vfiprintf_r+0x1c4>
 80098f6:	b1b0      	cbz	r0, 8009926 <_vfiprintf_r+0x156>
 80098f8:	9207      	str	r2, [sp, #28]
 80098fa:	e014      	b.n	8009926 <_vfiprintf_r+0x156>
 80098fc:	eba0 0308 	sub.w	r3, r0, r8
 8009900:	fa09 f303 	lsl.w	r3, r9, r3
 8009904:	4313      	orrs	r3, r2
 8009906:	9304      	str	r3, [sp, #16]
 8009908:	46a2      	mov	sl, r4
 800990a:	e7d2      	b.n	80098b2 <_vfiprintf_r+0xe2>
 800990c:	9b03      	ldr	r3, [sp, #12]
 800990e:	1d19      	adds	r1, r3, #4
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	9103      	str	r1, [sp, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	bfbb      	ittet	lt
 8009918:	425b      	neglt	r3, r3
 800991a:	f042 0202 	orrlt.w	r2, r2, #2
 800991e:	9307      	strge	r3, [sp, #28]
 8009920:	9307      	strlt	r3, [sp, #28]
 8009922:	bfb8      	it	lt
 8009924:	9204      	strlt	r2, [sp, #16]
 8009926:	7823      	ldrb	r3, [r4, #0]
 8009928:	2b2e      	cmp	r3, #46	; 0x2e
 800992a:	d10c      	bne.n	8009946 <_vfiprintf_r+0x176>
 800992c:	7863      	ldrb	r3, [r4, #1]
 800992e:	2b2a      	cmp	r3, #42	; 0x2a
 8009930:	d135      	bne.n	800999e <_vfiprintf_r+0x1ce>
 8009932:	9b03      	ldr	r3, [sp, #12]
 8009934:	1d1a      	adds	r2, r3, #4
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	9203      	str	r2, [sp, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	bfb8      	it	lt
 800993e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009942:	3402      	adds	r4, #2
 8009944:	9305      	str	r3, [sp, #20]
 8009946:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a2c <_vfiprintf_r+0x25c>
 800994a:	7821      	ldrb	r1, [r4, #0]
 800994c:	2203      	movs	r2, #3
 800994e:	4650      	mov	r0, sl
 8009950:	f7f6 fc46 	bl	80001e0 <memchr>
 8009954:	b140      	cbz	r0, 8009968 <_vfiprintf_r+0x198>
 8009956:	2340      	movs	r3, #64	; 0x40
 8009958:	eba0 000a 	sub.w	r0, r0, sl
 800995c:	fa03 f000 	lsl.w	r0, r3, r0
 8009960:	9b04      	ldr	r3, [sp, #16]
 8009962:	4303      	orrs	r3, r0
 8009964:	3401      	adds	r4, #1
 8009966:	9304      	str	r3, [sp, #16]
 8009968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800996c:	482c      	ldr	r0, [pc, #176]	; (8009a20 <_vfiprintf_r+0x250>)
 800996e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009972:	2206      	movs	r2, #6
 8009974:	f7f6 fc34 	bl	80001e0 <memchr>
 8009978:	2800      	cmp	r0, #0
 800997a:	d03f      	beq.n	80099fc <_vfiprintf_r+0x22c>
 800997c:	4b29      	ldr	r3, [pc, #164]	; (8009a24 <_vfiprintf_r+0x254>)
 800997e:	bb1b      	cbnz	r3, 80099c8 <_vfiprintf_r+0x1f8>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	3307      	adds	r3, #7
 8009984:	f023 0307 	bic.w	r3, r3, #7
 8009988:	3308      	adds	r3, #8
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800998e:	443b      	add	r3, r7
 8009990:	9309      	str	r3, [sp, #36]	; 0x24
 8009992:	e767      	b.n	8009864 <_vfiprintf_r+0x94>
 8009994:	fb0c 3202 	mla	r2, ip, r2, r3
 8009998:	460c      	mov	r4, r1
 800999a:	2001      	movs	r0, #1
 800999c:	e7a5      	b.n	80098ea <_vfiprintf_r+0x11a>
 800999e:	2300      	movs	r3, #0
 80099a0:	3401      	adds	r4, #1
 80099a2:	9305      	str	r3, [sp, #20]
 80099a4:	4619      	mov	r1, r3
 80099a6:	f04f 0c0a 	mov.w	ip, #10
 80099aa:	4620      	mov	r0, r4
 80099ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b0:	3a30      	subs	r2, #48	; 0x30
 80099b2:	2a09      	cmp	r2, #9
 80099b4:	d903      	bls.n	80099be <_vfiprintf_r+0x1ee>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0c5      	beq.n	8009946 <_vfiprintf_r+0x176>
 80099ba:	9105      	str	r1, [sp, #20]
 80099bc:	e7c3      	b.n	8009946 <_vfiprintf_r+0x176>
 80099be:	fb0c 2101 	mla	r1, ip, r1, r2
 80099c2:	4604      	mov	r4, r0
 80099c4:	2301      	movs	r3, #1
 80099c6:	e7f0      	b.n	80099aa <_vfiprintf_r+0x1da>
 80099c8:	ab03      	add	r3, sp, #12
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	462a      	mov	r2, r5
 80099ce:	4b16      	ldr	r3, [pc, #88]	; (8009a28 <_vfiprintf_r+0x258>)
 80099d0:	a904      	add	r1, sp, #16
 80099d2:	4630      	mov	r0, r6
 80099d4:	f3af 8000 	nop.w
 80099d8:	4607      	mov	r7, r0
 80099da:	1c78      	adds	r0, r7, #1
 80099dc:	d1d6      	bne.n	800998c <_vfiprintf_r+0x1bc>
 80099de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099e0:	07d9      	lsls	r1, r3, #31
 80099e2:	d405      	bmi.n	80099f0 <_vfiprintf_r+0x220>
 80099e4:	89ab      	ldrh	r3, [r5, #12]
 80099e6:	059a      	lsls	r2, r3, #22
 80099e8:	d402      	bmi.n	80099f0 <_vfiprintf_r+0x220>
 80099ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ec:	f000 fc35 	bl	800a25a <__retarget_lock_release_recursive>
 80099f0:	89ab      	ldrh	r3, [r5, #12]
 80099f2:	065b      	lsls	r3, r3, #25
 80099f4:	f53f af12 	bmi.w	800981c <_vfiprintf_r+0x4c>
 80099f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099fa:	e711      	b.n	8009820 <_vfiprintf_r+0x50>
 80099fc:	ab03      	add	r3, sp, #12
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	462a      	mov	r2, r5
 8009a02:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <_vfiprintf_r+0x258>)
 8009a04:	a904      	add	r1, sp, #16
 8009a06:	4630      	mov	r0, r6
 8009a08:	f000 f880 	bl	8009b0c <_printf_i>
 8009a0c:	e7e4      	b.n	80099d8 <_vfiprintf_r+0x208>
 8009a0e:	bf00      	nop
 8009a10:	0800a800 	.word	0x0800a800
 8009a14:	0800a820 	.word	0x0800a820
 8009a18:	0800a7e0 	.word	0x0800a7e0
 8009a1c:	0800a7aa 	.word	0x0800a7aa
 8009a20:	0800a7b4 	.word	0x0800a7b4
 8009a24:	00000000 	.word	0x00000000
 8009a28:	080097ab 	.word	0x080097ab
 8009a2c:	0800a7b0 	.word	0x0800a7b0

08009a30 <_printf_common>:
 8009a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a34:	4616      	mov	r6, r2
 8009a36:	4699      	mov	r9, r3
 8009a38:	688a      	ldr	r2, [r1, #8]
 8009a3a:	690b      	ldr	r3, [r1, #16]
 8009a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a40:	4293      	cmp	r3, r2
 8009a42:	bfb8      	it	lt
 8009a44:	4613      	movlt	r3, r2
 8009a46:	6033      	str	r3, [r6, #0]
 8009a48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a4c:	4607      	mov	r7, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	b10a      	cbz	r2, 8009a56 <_printf_common+0x26>
 8009a52:	3301      	adds	r3, #1
 8009a54:	6033      	str	r3, [r6, #0]
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	0699      	lsls	r1, r3, #26
 8009a5a:	bf42      	ittt	mi
 8009a5c:	6833      	ldrmi	r3, [r6, #0]
 8009a5e:	3302      	addmi	r3, #2
 8009a60:	6033      	strmi	r3, [r6, #0]
 8009a62:	6825      	ldr	r5, [r4, #0]
 8009a64:	f015 0506 	ands.w	r5, r5, #6
 8009a68:	d106      	bne.n	8009a78 <_printf_common+0x48>
 8009a6a:	f104 0a19 	add.w	sl, r4, #25
 8009a6e:	68e3      	ldr	r3, [r4, #12]
 8009a70:	6832      	ldr	r2, [r6, #0]
 8009a72:	1a9b      	subs	r3, r3, r2
 8009a74:	42ab      	cmp	r3, r5
 8009a76:	dc26      	bgt.n	8009ac6 <_printf_common+0x96>
 8009a78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a7c:	1e13      	subs	r3, r2, #0
 8009a7e:	6822      	ldr	r2, [r4, #0]
 8009a80:	bf18      	it	ne
 8009a82:	2301      	movne	r3, #1
 8009a84:	0692      	lsls	r2, r2, #26
 8009a86:	d42b      	bmi.n	8009ae0 <_printf_common+0xb0>
 8009a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a8c:	4649      	mov	r1, r9
 8009a8e:	4638      	mov	r0, r7
 8009a90:	47c0      	blx	r8
 8009a92:	3001      	adds	r0, #1
 8009a94:	d01e      	beq.n	8009ad4 <_printf_common+0xa4>
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	68e5      	ldr	r5, [r4, #12]
 8009a9a:	6832      	ldr	r2, [r6, #0]
 8009a9c:	f003 0306 	and.w	r3, r3, #6
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	bf08      	it	eq
 8009aa4:	1aad      	subeq	r5, r5, r2
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	6922      	ldr	r2, [r4, #16]
 8009aaa:	bf0c      	ite	eq
 8009aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab0:	2500      	movne	r5, #0
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	bfc4      	itt	gt
 8009ab6:	1a9b      	subgt	r3, r3, r2
 8009ab8:	18ed      	addgt	r5, r5, r3
 8009aba:	2600      	movs	r6, #0
 8009abc:	341a      	adds	r4, #26
 8009abe:	42b5      	cmp	r5, r6
 8009ac0:	d11a      	bne.n	8009af8 <_printf_common+0xc8>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	e008      	b.n	8009ad8 <_printf_common+0xa8>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	4652      	mov	r2, sl
 8009aca:	4649      	mov	r1, r9
 8009acc:	4638      	mov	r0, r7
 8009ace:	47c0      	blx	r8
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d103      	bne.n	8009adc <_printf_common+0xac>
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009adc:	3501      	adds	r5, #1
 8009ade:	e7c6      	b.n	8009a6e <_printf_common+0x3e>
 8009ae0:	18e1      	adds	r1, r4, r3
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	2030      	movs	r0, #48	; 0x30
 8009ae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aea:	4422      	add	r2, r4
 8009aec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009af4:	3302      	adds	r3, #2
 8009af6:	e7c7      	b.n	8009a88 <_printf_common+0x58>
 8009af8:	2301      	movs	r3, #1
 8009afa:	4622      	mov	r2, r4
 8009afc:	4649      	mov	r1, r9
 8009afe:	4638      	mov	r0, r7
 8009b00:	47c0      	blx	r8
 8009b02:	3001      	adds	r0, #1
 8009b04:	d0e6      	beq.n	8009ad4 <_printf_common+0xa4>
 8009b06:	3601      	adds	r6, #1
 8009b08:	e7d9      	b.n	8009abe <_printf_common+0x8e>
	...

08009b0c <_printf_i>:
 8009b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b10:	7e0f      	ldrb	r7, [r1, #24]
 8009b12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b14:	2f78      	cmp	r7, #120	; 0x78
 8009b16:	4691      	mov	r9, r2
 8009b18:	4680      	mov	r8, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	469a      	mov	sl, r3
 8009b1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b22:	d807      	bhi.n	8009b34 <_printf_i+0x28>
 8009b24:	2f62      	cmp	r7, #98	; 0x62
 8009b26:	d80a      	bhi.n	8009b3e <_printf_i+0x32>
 8009b28:	2f00      	cmp	r7, #0
 8009b2a:	f000 80d8 	beq.w	8009cde <_printf_i+0x1d2>
 8009b2e:	2f58      	cmp	r7, #88	; 0x58
 8009b30:	f000 80a3 	beq.w	8009c7a <_printf_i+0x16e>
 8009b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b3c:	e03a      	b.n	8009bb4 <_printf_i+0xa8>
 8009b3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b42:	2b15      	cmp	r3, #21
 8009b44:	d8f6      	bhi.n	8009b34 <_printf_i+0x28>
 8009b46:	a101      	add	r1, pc, #4	; (adr r1, 8009b4c <_printf_i+0x40>)
 8009b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b4c:	08009ba5 	.word	0x08009ba5
 8009b50:	08009bb9 	.word	0x08009bb9
 8009b54:	08009b35 	.word	0x08009b35
 8009b58:	08009b35 	.word	0x08009b35
 8009b5c:	08009b35 	.word	0x08009b35
 8009b60:	08009b35 	.word	0x08009b35
 8009b64:	08009bb9 	.word	0x08009bb9
 8009b68:	08009b35 	.word	0x08009b35
 8009b6c:	08009b35 	.word	0x08009b35
 8009b70:	08009b35 	.word	0x08009b35
 8009b74:	08009b35 	.word	0x08009b35
 8009b78:	08009cc5 	.word	0x08009cc5
 8009b7c:	08009be9 	.word	0x08009be9
 8009b80:	08009ca7 	.word	0x08009ca7
 8009b84:	08009b35 	.word	0x08009b35
 8009b88:	08009b35 	.word	0x08009b35
 8009b8c:	08009ce7 	.word	0x08009ce7
 8009b90:	08009b35 	.word	0x08009b35
 8009b94:	08009be9 	.word	0x08009be9
 8009b98:	08009b35 	.word	0x08009b35
 8009b9c:	08009b35 	.word	0x08009b35
 8009ba0:	08009caf 	.word	0x08009caf
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	1d1a      	adds	r2, r3, #4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	602a      	str	r2, [r5, #0]
 8009bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e0a3      	b.n	8009d00 <_printf_i+0x1f4>
 8009bb8:	6820      	ldr	r0, [r4, #0]
 8009bba:	6829      	ldr	r1, [r5, #0]
 8009bbc:	0606      	lsls	r6, r0, #24
 8009bbe:	f101 0304 	add.w	r3, r1, #4
 8009bc2:	d50a      	bpl.n	8009bda <_printf_i+0xce>
 8009bc4:	680e      	ldr	r6, [r1, #0]
 8009bc6:	602b      	str	r3, [r5, #0]
 8009bc8:	2e00      	cmp	r6, #0
 8009bca:	da03      	bge.n	8009bd4 <_printf_i+0xc8>
 8009bcc:	232d      	movs	r3, #45	; 0x2d
 8009bce:	4276      	negs	r6, r6
 8009bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bd4:	485e      	ldr	r0, [pc, #376]	; (8009d50 <_printf_i+0x244>)
 8009bd6:	230a      	movs	r3, #10
 8009bd8:	e019      	b.n	8009c0e <_printf_i+0x102>
 8009bda:	680e      	ldr	r6, [r1, #0]
 8009bdc:	602b      	str	r3, [r5, #0]
 8009bde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009be2:	bf18      	it	ne
 8009be4:	b236      	sxthne	r6, r6
 8009be6:	e7ef      	b.n	8009bc8 <_printf_i+0xbc>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	6820      	ldr	r0, [r4, #0]
 8009bec:	1d19      	adds	r1, r3, #4
 8009bee:	6029      	str	r1, [r5, #0]
 8009bf0:	0601      	lsls	r1, r0, #24
 8009bf2:	d501      	bpl.n	8009bf8 <_printf_i+0xec>
 8009bf4:	681e      	ldr	r6, [r3, #0]
 8009bf6:	e002      	b.n	8009bfe <_printf_i+0xf2>
 8009bf8:	0646      	lsls	r6, r0, #25
 8009bfa:	d5fb      	bpl.n	8009bf4 <_printf_i+0xe8>
 8009bfc:	881e      	ldrh	r6, [r3, #0]
 8009bfe:	4854      	ldr	r0, [pc, #336]	; (8009d50 <_printf_i+0x244>)
 8009c00:	2f6f      	cmp	r7, #111	; 0x6f
 8009c02:	bf0c      	ite	eq
 8009c04:	2308      	moveq	r3, #8
 8009c06:	230a      	movne	r3, #10
 8009c08:	2100      	movs	r1, #0
 8009c0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c0e:	6865      	ldr	r5, [r4, #4]
 8009c10:	60a5      	str	r5, [r4, #8]
 8009c12:	2d00      	cmp	r5, #0
 8009c14:	bfa2      	ittt	ge
 8009c16:	6821      	ldrge	r1, [r4, #0]
 8009c18:	f021 0104 	bicge.w	r1, r1, #4
 8009c1c:	6021      	strge	r1, [r4, #0]
 8009c1e:	b90e      	cbnz	r6, 8009c24 <_printf_i+0x118>
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	d04d      	beq.n	8009cc0 <_printf_i+0x1b4>
 8009c24:	4615      	mov	r5, r2
 8009c26:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c2a:	fb03 6711 	mls	r7, r3, r1, r6
 8009c2e:	5dc7      	ldrb	r7, [r0, r7]
 8009c30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c34:	4637      	mov	r7, r6
 8009c36:	42bb      	cmp	r3, r7
 8009c38:	460e      	mov	r6, r1
 8009c3a:	d9f4      	bls.n	8009c26 <_printf_i+0x11a>
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	d10b      	bne.n	8009c58 <_printf_i+0x14c>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	07de      	lsls	r6, r3, #31
 8009c44:	d508      	bpl.n	8009c58 <_printf_i+0x14c>
 8009c46:	6923      	ldr	r3, [r4, #16]
 8009c48:	6861      	ldr	r1, [r4, #4]
 8009c4a:	4299      	cmp	r1, r3
 8009c4c:	bfde      	ittt	le
 8009c4e:	2330      	movle	r3, #48	; 0x30
 8009c50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c58:	1b52      	subs	r2, r2, r5
 8009c5a:	6122      	str	r2, [r4, #16]
 8009c5c:	f8cd a000 	str.w	sl, [sp]
 8009c60:	464b      	mov	r3, r9
 8009c62:	aa03      	add	r2, sp, #12
 8009c64:	4621      	mov	r1, r4
 8009c66:	4640      	mov	r0, r8
 8009c68:	f7ff fee2 	bl	8009a30 <_printf_common>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d14c      	bne.n	8009d0a <_printf_i+0x1fe>
 8009c70:	f04f 30ff 	mov.w	r0, #4294967295
 8009c74:	b004      	add	sp, #16
 8009c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7a:	4835      	ldr	r0, [pc, #212]	; (8009d50 <_printf_i+0x244>)
 8009c7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c80:	6829      	ldr	r1, [r5, #0]
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c88:	6029      	str	r1, [r5, #0]
 8009c8a:	061d      	lsls	r5, r3, #24
 8009c8c:	d514      	bpl.n	8009cb8 <_printf_i+0x1ac>
 8009c8e:	07df      	lsls	r7, r3, #31
 8009c90:	bf44      	itt	mi
 8009c92:	f043 0320 	orrmi.w	r3, r3, #32
 8009c96:	6023      	strmi	r3, [r4, #0]
 8009c98:	b91e      	cbnz	r6, 8009ca2 <_printf_i+0x196>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	f023 0320 	bic.w	r3, r3, #32
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	2310      	movs	r3, #16
 8009ca4:	e7b0      	b.n	8009c08 <_printf_i+0xfc>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	f043 0320 	orr.w	r3, r3, #32
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	2378      	movs	r3, #120	; 0x78
 8009cb0:	4828      	ldr	r0, [pc, #160]	; (8009d54 <_printf_i+0x248>)
 8009cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cb6:	e7e3      	b.n	8009c80 <_printf_i+0x174>
 8009cb8:	0659      	lsls	r1, r3, #25
 8009cba:	bf48      	it	mi
 8009cbc:	b2b6      	uxthmi	r6, r6
 8009cbe:	e7e6      	b.n	8009c8e <_printf_i+0x182>
 8009cc0:	4615      	mov	r5, r2
 8009cc2:	e7bb      	b.n	8009c3c <_printf_i+0x130>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	6826      	ldr	r6, [r4, #0]
 8009cc8:	6961      	ldr	r1, [r4, #20]
 8009cca:	1d18      	adds	r0, r3, #4
 8009ccc:	6028      	str	r0, [r5, #0]
 8009cce:	0635      	lsls	r5, r6, #24
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	d501      	bpl.n	8009cd8 <_printf_i+0x1cc>
 8009cd4:	6019      	str	r1, [r3, #0]
 8009cd6:	e002      	b.n	8009cde <_printf_i+0x1d2>
 8009cd8:	0670      	lsls	r0, r6, #25
 8009cda:	d5fb      	bpl.n	8009cd4 <_printf_i+0x1c8>
 8009cdc:	8019      	strh	r1, [r3, #0]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	6123      	str	r3, [r4, #16]
 8009ce2:	4615      	mov	r5, r2
 8009ce4:	e7ba      	b.n	8009c5c <_printf_i+0x150>
 8009ce6:	682b      	ldr	r3, [r5, #0]
 8009ce8:	1d1a      	adds	r2, r3, #4
 8009cea:	602a      	str	r2, [r5, #0]
 8009cec:	681d      	ldr	r5, [r3, #0]
 8009cee:	6862      	ldr	r2, [r4, #4]
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f7f6 fa74 	bl	80001e0 <memchr>
 8009cf8:	b108      	cbz	r0, 8009cfe <_printf_i+0x1f2>
 8009cfa:	1b40      	subs	r0, r0, r5
 8009cfc:	6060      	str	r0, [r4, #4]
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	6123      	str	r3, [r4, #16]
 8009d02:	2300      	movs	r3, #0
 8009d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d08:	e7a8      	b.n	8009c5c <_printf_i+0x150>
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	462a      	mov	r2, r5
 8009d0e:	4649      	mov	r1, r9
 8009d10:	4640      	mov	r0, r8
 8009d12:	47d0      	blx	sl
 8009d14:	3001      	adds	r0, #1
 8009d16:	d0ab      	beq.n	8009c70 <_printf_i+0x164>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	079b      	lsls	r3, r3, #30
 8009d1c:	d413      	bmi.n	8009d46 <_printf_i+0x23a>
 8009d1e:	68e0      	ldr	r0, [r4, #12]
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	4298      	cmp	r0, r3
 8009d24:	bfb8      	it	lt
 8009d26:	4618      	movlt	r0, r3
 8009d28:	e7a4      	b.n	8009c74 <_printf_i+0x168>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4632      	mov	r2, r6
 8009d2e:	4649      	mov	r1, r9
 8009d30:	4640      	mov	r0, r8
 8009d32:	47d0      	blx	sl
 8009d34:	3001      	adds	r0, #1
 8009d36:	d09b      	beq.n	8009c70 <_printf_i+0x164>
 8009d38:	3501      	adds	r5, #1
 8009d3a:	68e3      	ldr	r3, [r4, #12]
 8009d3c:	9903      	ldr	r1, [sp, #12]
 8009d3e:	1a5b      	subs	r3, r3, r1
 8009d40:	42ab      	cmp	r3, r5
 8009d42:	dcf2      	bgt.n	8009d2a <_printf_i+0x21e>
 8009d44:	e7eb      	b.n	8009d1e <_printf_i+0x212>
 8009d46:	2500      	movs	r5, #0
 8009d48:	f104 0619 	add.w	r6, r4, #25
 8009d4c:	e7f5      	b.n	8009d3a <_printf_i+0x22e>
 8009d4e:	bf00      	nop
 8009d50:	0800a7bb 	.word	0x0800a7bb
 8009d54:	0800a7cc 	.word	0x0800a7cc

08009d58 <__swbuf_r>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	460e      	mov	r6, r1
 8009d5c:	4614      	mov	r4, r2
 8009d5e:	4605      	mov	r5, r0
 8009d60:	b118      	cbz	r0, 8009d6a <__swbuf_r+0x12>
 8009d62:	6983      	ldr	r3, [r0, #24]
 8009d64:	b90b      	cbnz	r3, 8009d6a <__swbuf_r+0x12>
 8009d66:	f000 f9d9 	bl	800a11c <__sinit>
 8009d6a:	4b21      	ldr	r3, [pc, #132]	; (8009df0 <__swbuf_r+0x98>)
 8009d6c:	429c      	cmp	r4, r3
 8009d6e:	d12b      	bne.n	8009dc8 <__swbuf_r+0x70>
 8009d70:	686c      	ldr	r4, [r5, #4]
 8009d72:	69a3      	ldr	r3, [r4, #24]
 8009d74:	60a3      	str	r3, [r4, #8]
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	071a      	lsls	r2, r3, #28
 8009d7a:	d52f      	bpl.n	8009ddc <__swbuf_r+0x84>
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	b36b      	cbz	r3, 8009ddc <__swbuf_r+0x84>
 8009d80:	6923      	ldr	r3, [r4, #16]
 8009d82:	6820      	ldr	r0, [r4, #0]
 8009d84:	1ac0      	subs	r0, r0, r3
 8009d86:	6963      	ldr	r3, [r4, #20]
 8009d88:	b2f6      	uxtb	r6, r6
 8009d8a:	4283      	cmp	r3, r0
 8009d8c:	4637      	mov	r7, r6
 8009d8e:	dc04      	bgt.n	8009d9a <__swbuf_r+0x42>
 8009d90:	4621      	mov	r1, r4
 8009d92:	4628      	mov	r0, r5
 8009d94:	f000 f92e 	bl	8009ff4 <_fflush_r>
 8009d98:	bb30      	cbnz	r0, 8009de8 <__swbuf_r+0x90>
 8009d9a:	68a3      	ldr	r3, [r4, #8]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	60a3      	str	r3, [r4, #8]
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	6022      	str	r2, [r4, #0]
 8009da6:	701e      	strb	r6, [r3, #0]
 8009da8:	6963      	ldr	r3, [r4, #20]
 8009daa:	3001      	adds	r0, #1
 8009dac:	4283      	cmp	r3, r0
 8009dae:	d004      	beq.n	8009dba <__swbuf_r+0x62>
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	07db      	lsls	r3, r3, #31
 8009db4:	d506      	bpl.n	8009dc4 <__swbuf_r+0x6c>
 8009db6:	2e0a      	cmp	r6, #10
 8009db8:	d104      	bne.n	8009dc4 <__swbuf_r+0x6c>
 8009dba:	4621      	mov	r1, r4
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	f000 f919 	bl	8009ff4 <_fflush_r>
 8009dc2:	b988      	cbnz	r0, 8009de8 <__swbuf_r+0x90>
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dc8:	4b0a      	ldr	r3, [pc, #40]	; (8009df4 <__swbuf_r+0x9c>)
 8009dca:	429c      	cmp	r4, r3
 8009dcc:	d101      	bne.n	8009dd2 <__swbuf_r+0x7a>
 8009dce:	68ac      	ldr	r4, [r5, #8]
 8009dd0:	e7cf      	b.n	8009d72 <__swbuf_r+0x1a>
 8009dd2:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <__swbuf_r+0xa0>)
 8009dd4:	429c      	cmp	r4, r3
 8009dd6:	bf08      	it	eq
 8009dd8:	68ec      	ldreq	r4, [r5, #12]
 8009dda:	e7ca      	b.n	8009d72 <__swbuf_r+0x1a>
 8009ddc:	4621      	mov	r1, r4
 8009dde:	4628      	mov	r0, r5
 8009de0:	f000 f80c 	bl	8009dfc <__swsetup_r>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d0cb      	beq.n	8009d80 <__swbuf_r+0x28>
 8009de8:	f04f 37ff 	mov.w	r7, #4294967295
 8009dec:	e7ea      	b.n	8009dc4 <__swbuf_r+0x6c>
 8009dee:	bf00      	nop
 8009df0:	0800a800 	.word	0x0800a800
 8009df4:	0800a820 	.word	0x0800a820
 8009df8:	0800a7e0 	.word	0x0800a7e0

08009dfc <__swsetup_r>:
 8009dfc:	4b32      	ldr	r3, [pc, #200]	; (8009ec8 <__swsetup_r+0xcc>)
 8009dfe:	b570      	push	{r4, r5, r6, lr}
 8009e00:	681d      	ldr	r5, [r3, #0]
 8009e02:	4606      	mov	r6, r0
 8009e04:	460c      	mov	r4, r1
 8009e06:	b125      	cbz	r5, 8009e12 <__swsetup_r+0x16>
 8009e08:	69ab      	ldr	r3, [r5, #24]
 8009e0a:	b913      	cbnz	r3, 8009e12 <__swsetup_r+0x16>
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f000 f985 	bl	800a11c <__sinit>
 8009e12:	4b2e      	ldr	r3, [pc, #184]	; (8009ecc <__swsetup_r+0xd0>)
 8009e14:	429c      	cmp	r4, r3
 8009e16:	d10f      	bne.n	8009e38 <__swsetup_r+0x3c>
 8009e18:	686c      	ldr	r4, [r5, #4]
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e20:	0719      	lsls	r1, r3, #28
 8009e22:	d42c      	bmi.n	8009e7e <__swsetup_r+0x82>
 8009e24:	06dd      	lsls	r5, r3, #27
 8009e26:	d411      	bmi.n	8009e4c <__swsetup_r+0x50>
 8009e28:	2309      	movs	r3, #9
 8009e2a:	6033      	str	r3, [r6, #0]
 8009e2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	f04f 30ff 	mov.w	r0, #4294967295
 8009e36:	e03e      	b.n	8009eb6 <__swsetup_r+0xba>
 8009e38:	4b25      	ldr	r3, [pc, #148]	; (8009ed0 <__swsetup_r+0xd4>)
 8009e3a:	429c      	cmp	r4, r3
 8009e3c:	d101      	bne.n	8009e42 <__swsetup_r+0x46>
 8009e3e:	68ac      	ldr	r4, [r5, #8]
 8009e40:	e7eb      	b.n	8009e1a <__swsetup_r+0x1e>
 8009e42:	4b24      	ldr	r3, [pc, #144]	; (8009ed4 <__swsetup_r+0xd8>)
 8009e44:	429c      	cmp	r4, r3
 8009e46:	bf08      	it	eq
 8009e48:	68ec      	ldreq	r4, [r5, #12]
 8009e4a:	e7e6      	b.n	8009e1a <__swsetup_r+0x1e>
 8009e4c:	0758      	lsls	r0, r3, #29
 8009e4e:	d512      	bpl.n	8009e76 <__swsetup_r+0x7a>
 8009e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e52:	b141      	cbz	r1, 8009e66 <__swsetup_r+0x6a>
 8009e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e58:	4299      	cmp	r1, r3
 8009e5a:	d002      	beq.n	8009e62 <__swsetup_r+0x66>
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	f7ff fc41 	bl	80096e4 <_free_r>
 8009e62:	2300      	movs	r3, #0
 8009e64:	6363      	str	r3, [r4, #52]	; 0x34
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e6c:	81a3      	strh	r3, [r4, #12]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6063      	str	r3, [r4, #4]
 8009e72:	6923      	ldr	r3, [r4, #16]
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	f043 0308 	orr.w	r3, r3, #8
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	6923      	ldr	r3, [r4, #16]
 8009e80:	b94b      	cbnz	r3, 8009e96 <__swsetup_r+0x9a>
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e8c:	d003      	beq.n	8009e96 <__swsetup_r+0x9a>
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4630      	mov	r0, r6
 8009e92:	f000 fa09 	bl	800a2a8 <__smakebuf_r>
 8009e96:	89a0      	ldrh	r0, [r4, #12]
 8009e98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e9c:	f010 0301 	ands.w	r3, r0, #1
 8009ea0:	d00a      	beq.n	8009eb8 <__swsetup_r+0xbc>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60a3      	str	r3, [r4, #8]
 8009ea6:	6963      	ldr	r3, [r4, #20]
 8009ea8:	425b      	negs	r3, r3
 8009eaa:	61a3      	str	r3, [r4, #24]
 8009eac:	6923      	ldr	r3, [r4, #16]
 8009eae:	b943      	cbnz	r3, 8009ec2 <__swsetup_r+0xc6>
 8009eb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009eb4:	d1ba      	bne.n	8009e2c <__swsetup_r+0x30>
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
 8009eb8:	0781      	lsls	r1, r0, #30
 8009eba:	bf58      	it	pl
 8009ebc:	6963      	ldrpl	r3, [r4, #20]
 8009ebe:	60a3      	str	r3, [r4, #8]
 8009ec0:	e7f4      	b.n	8009eac <__swsetup_r+0xb0>
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	e7f7      	b.n	8009eb6 <__swsetup_r+0xba>
 8009ec6:	bf00      	nop
 8009ec8:	20000100 	.word	0x20000100
 8009ecc:	0800a800 	.word	0x0800a800
 8009ed0:	0800a820 	.word	0x0800a820
 8009ed4:	0800a7e0 	.word	0x0800a7e0

08009ed8 <abort>:
 8009ed8:	b508      	push	{r3, lr}
 8009eda:	2006      	movs	r0, #6
 8009edc:	f000 fa4c 	bl	800a378 <raise>
 8009ee0:	2001      	movs	r0, #1
 8009ee2:	f7f7 f945 	bl	8001170 <_exit>
	...

08009ee8 <__sflush_r>:
 8009ee8:	898a      	ldrh	r2, [r1, #12]
 8009eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eee:	4605      	mov	r5, r0
 8009ef0:	0710      	lsls	r0, r2, #28
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	d458      	bmi.n	8009fa8 <__sflush_r+0xc0>
 8009ef6:	684b      	ldr	r3, [r1, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	dc05      	bgt.n	8009f08 <__sflush_r+0x20>
 8009efc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	dc02      	bgt.n	8009f08 <__sflush_r+0x20>
 8009f02:	2000      	movs	r0, #0
 8009f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f0a:	2e00      	cmp	r6, #0
 8009f0c:	d0f9      	beq.n	8009f02 <__sflush_r+0x1a>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f14:	682f      	ldr	r7, [r5, #0]
 8009f16:	602b      	str	r3, [r5, #0]
 8009f18:	d032      	beq.n	8009f80 <__sflush_r+0x98>
 8009f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	075a      	lsls	r2, r3, #29
 8009f20:	d505      	bpl.n	8009f2e <__sflush_r+0x46>
 8009f22:	6863      	ldr	r3, [r4, #4]
 8009f24:	1ac0      	subs	r0, r0, r3
 8009f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f28:	b10b      	cbz	r3, 8009f2e <__sflush_r+0x46>
 8009f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f2c:	1ac0      	subs	r0, r0, r3
 8009f2e:	2300      	movs	r3, #0
 8009f30:	4602      	mov	r2, r0
 8009f32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f34:	6a21      	ldr	r1, [r4, #32]
 8009f36:	4628      	mov	r0, r5
 8009f38:	47b0      	blx	r6
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	89a3      	ldrh	r3, [r4, #12]
 8009f3e:	d106      	bne.n	8009f4e <__sflush_r+0x66>
 8009f40:	6829      	ldr	r1, [r5, #0]
 8009f42:	291d      	cmp	r1, #29
 8009f44:	d82c      	bhi.n	8009fa0 <__sflush_r+0xb8>
 8009f46:	4a2a      	ldr	r2, [pc, #168]	; (8009ff0 <__sflush_r+0x108>)
 8009f48:	40ca      	lsrs	r2, r1
 8009f4a:	07d6      	lsls	r6, r2, #31
 8009f4c:	d528      	bpl.n	8009fa0 <__sflush_r+0xb8>
 8009f4e:	2200      	movs	r2, #0
 8009f50:	6062      	str	r2, [r4, #4]
 8009f52:	04d9      	lsls	r1, r3, #19
 8009f54:	6922      	ldr	r2, [r4, #16]
 8009f56:	6022      	str	r2, [r4, #0]
 8009f58:	d504      	bpl.n	8009f64 <__sflush_r+0x7c>
 8009f5a:	1c42      	adds	r2, r0, #1
 8009f5c:	d101      	bne.n	8009f62 <__sflush_r+0x7a>
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	b903      	cbnz	r3, 8009f64 <__sflush_r+0x7c>
 8009f62:	6560      	str	r0, [r4, #84]	; 0x54
 8009f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f66:	602f      	str	r7, [r5, #0]
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	d0ca      	beq.n	8009f02 <__sflush_r+0x1a>
 8009f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f70:	4299      	cmp	r1, r3
 8009f72:	d002      	beq.n	8009f7a <__sflush_r+0x92>
 8009f74:	4628      	mov	r0, r5
 8009f76:	f7ff fbb5 	bl	80096e4 <_free_r>
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	6360      	str	r0, [r4, #52]	; 0x34
 8009f7e:	e7c1      	b.n	8009f04 <__sflush_r+0x1c>
 8009f80:	6a21      	ldr	r1, [r4, #32]
 8009f82:	2301      	movs	r3, #1
 8009f84:	4628      	mov	r0, r5
 8009f86:	47b0      	blx	r6
 8009f88:	1c41      	adds	r1, r0, #1
 8009f8a:	d1c7      	bne.n	8009f1c <__sflush_r+0x34>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d0c4      	beq.n	8009f1c <__sflush_r+0x34>
 8009f92:	2b1d      	cmp	r3, #29
 8009f94:	d001      	beq.n	8009f9a <__sflush_r+0xb2>
 8009f96:	2b16      	cmp	r3, #22
 8009f98:	d101      	bne.n	8009f9e <__sflush_r+0xb6>
 8009f9a:	602f      	str	r7, [r5, #0]
 8009f9c:	e7b1      	b.n	8009f02 <__sflush_r+0x1a>
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	e7ad      	b.n	8009f04 <__sflush_r+0x1c>
 8009fa8:	690f      	ldr	r7, [r1, #16]
 8009faa:	2f00      	cmp	r7, #0
 8009fac:	d0a9      	beq.n	8009f02 <__sflush_r+0x1a>
 8009fae:	0793      	lsls	r3, r2, #30
 8009fb0:	680e      	ldr	r6, [r1, #0]
 8009fb2:	bf08      	it	eq
 8009fb4:	694b      	ldreq	r3, [r1, #20]
 8009fb6:	600f      	str	r7, [r1, #0]
 8009fb8:	bf18      	it	ne
 8009fba:	2300      	movne	r3, #0
 8009fbc:	eba6 0807 	sub.w	r8, r6, r7
 8009fc0:	608b      	str	r3, [r1, #8]
 8009fc2:	f1b8 0f00 	cmp.w	r8, #0
 8009fc6:	dd9c      	ble.n	8009f02 <__sflush_r+0x1a>
 8009fc8:	6a21      	ldr	r1, [r4, #32]
 8009fca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fcc:	4643      	mov	r3, r8
 8009fce:	463a      	mov	r2, r7
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b0      	blx	r6
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	dc06      	bgt.n	8009fe6 <__sflush_r+0xfe>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	e78e      	b.n	8009f04 <__sflush_r+0x1c>
 8009fe6:	4407      	add	r7, r0
 8009fe8:	eba8 0800 	sub.w	r8, r8, r0
 8009fec:	e7e9      	b.n	8009fc2 <__sflush_r+0xda>
 8009fee:	bf00      	nop
 8009ff0:	20400001 	.word	0x20400001

08009ff4 <_fflush_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	690b      	ldr	r3, [r1, #16]
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	b913      	cbnz	r3, 800a004 <_fflush_r+0x10>
 8009ffe:	2500      	movs	r5, #0
 800a000:	4628      	mov	r0, r5
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	b118      	cbz	r0, 800a00e <_fflush_r+0x1a>
 800a006:	6983      	ldr	r3, [r0, #24]
 800a008:	b90b      	cbnz	r3, 800a00e <_fflush_r+0x1a>
 800a00a:	f000 f887 	bl	800a11c <__sinit>
 800a00e:	4b14      	ldr	r3, [pc, #80]	; (800a060 <_fflush_r+0x6c>)
 800a010:	429c      	cmp	r4, r3
 800a012:	d11b      	bne.n	800a04c <_fflush_r+0x58>
 800a014:	686c      	ldr	r4, [r5, #4]
 800a016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0ef      	beq.n	8009ffe <_fflush_r+0xa>
 800a01e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a020:	07d0      	lsls	r0, r2, #31
 800a022:	d404      	bmi.n	800a02e <_fflush_r+0x3a>
 800a024:	0599      	lsls	r1, r3, #22
 800a026:	d402      	bmi.n	800a02e <_fflush_r+0x3a>
 800a028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a02a:	f000 f915 	bl	800a258 <__retarget_lock_acquire_recursive>
 800a02e:	4628      	mov	r0, r5
 800a030:	4621      	mov	r1, r4
 800a032:	f7ff ff59 	bl	8009ee8 <__sflush_r>
 800a036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a038:	07da      	lsls	r2, r3, #31
 800a03a:	4605      	mov	r5, r0
 800a03c:	d4e0      	bmi.n	800a000 <_fflush_r+0xc>
 800a03e:	89a3      	ldrh	r3, [r4, #12]
 800a040:	059b      	lsls	r3, r3, #22
 800a042:	d4dd      	bmi.n	800a000 <_fflush_r+0xc>
 800a044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a046:	f000 f908 	bl	800a25a <__retarget_lock_release_recursive>
 800a04a:	e7d9      	b.n	800a000 <_fflush_r+0xc>
 800a04c:	4b05      	ldr	r3, [pc, #20]	; (800a064 <_fflush_r+0x70>)
 800a04e:	429c      	cmp	r4, r3
 800a050:	d101      	bne.n	800a056 <_fflush_r+0x62>
 800a052:	68ac      	ldr	r4, [r5, #8]
 800a054:	e7df      	b.n	800a016 <_fflush_r+0x22>
 800a056:	4b04      	ldr	r3, [pc, #16]	; (800a068 <_fflush_r+0x74>)
 800a058:	429c      	cmp	r4, r3
 800a05a:	bf08      	it	eq
 800a05c:	68ec      	ldreq	r4, [r5, #12]
 800a05e:	e7da      	b.n	800a016 <_fflush_r+0x22>
 800a060:	0800a800 	.word	0x0800a800
 800a064:	0800a820 	.word	0x0800a820
 800a068:	0800a7e0 	.word	0x0800a7e0

0800a06c <std>:
 800a06c:	2300      	movs	r3, #0
 800a06e:	b510      	push	{r4, lr}
 800a070:	4604      	mov	r4, r0
 800a072:	e9c0 3300 	strd	r3, r3, [r0]
 800a076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a07a:	6083      	str	r3, [r0, #8]
 800a07c:	8181      	strh	r1, [r0, #12]
 800a07e:	6643      	str	r3, [r0, #100]	; 0x64
 800a080:	81c2      	strh	r2, [r0, #14]
 800a082:	6183      	str	r3, [r0, #24]
 800a084:	4619      	mov	r1, r3
 800a086:	2208      	movs	r2, #8
 800a088:	305c      	adds	r0, #92	; 0x5c
 800a08a:	f7fd fea9 	bl	8007de0 <memset>
 800a08e:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <std+0x38>)
 800a090:	6263      	str	r3, [r4, #36]	; 0x24
 800a092:	4b05      	ldr	r3, [pc, #20]	; (800a0a8 <std+0x3c>)
 800a094:	62a3      	str	r3, [r4, #40]	; 0x28
 800a096:	4b05      	ldr	r3, [pc, #20]	; (800a0ac <std+0x40>)
 800a098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a09a:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <std+0x44>)
 800a09c:	6224      	str	r4, [r4, #32]
 800a09e:	6323      	str	r3, [r4, #48]	; 0x30
 800a0a0:	bd10      	pop	{r4, pc}
 800a0a2:	bf00      	nop
 800a0a4:	0800a3b1 	.word	0x0800a3b1
 800a0a8:	0800a3d3 	.word	0x0800a3d3
 800a0ac:	0800a40b 	.word	0x0800a40b
 800a0b0:	0800a42f 	.word	0x0800a42f

0800a0b4 <_cleanup_r>:
 800a0b4:	4901      	ldr	r1, [pc, #4]	; (800a0bc <_cleanup_r+0x8>)
 800a0b6:	f000 b8af 	b.w	800a218 <_fwalk_reent>
 800a0ba:	bf00      	nop
 800a0bc:	08009ff5 	.word	0x08009ff5

0800a0c0 <__sfmoreglue>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	2268      	movs	r2, #104	; 0x68
 800a0c4:	1e4d      	subs	r5, r1, #1
 800a0c6:	4355      	muls	r5, r2
 800a0c8:	460e      	mov	r6, r1
 800a0ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0ce:	f7fe fbaf 	bl	8008830 <_malloc_r>
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	b140      	cbz	r0, 800a0e8 <__sfmoreglue+0x28>
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	e9c0 1600 	strd	r1, r6, [r0]
 800a0dc:	300c      	adds	r0, #12
 800a0de:	60a0      	str	r0, [r4, #8]
 800a0e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0e4:	f7fd fe7c 	bl	8007de0 <memset>
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}

0800a0ec <__sfp_lock_acquire>:
 800a0ec:	4801      	ldr	r0, [pc, #4]	; (800a0f4 <__sfp_lock_acquire+0x8>)
 800a0ee:	f000 b8b3 	b.w	800a258 <__retarget_lock_acquire_recursive>
 800a0f2:	bf00      	nop
 800a0f4:	200025bd 	.word	0x200025bd

0800a0f8 <__sfp_lock_release>:
 800a0f8:	4801      	ldr	r0, [pc, #4]	; (800a100 <__sfp_lock_release+0x8>)
 800a0fa:	f000 b8ae 	b.w	800a25a <__retarget_lock_release_recursive>
 800a0fe:	bf00      	nop
 800a100:	200025bd 	.word	0x200025bd

0800a104 <__sinit_lock_acquire>:
 800a104:	4801      	ldr	r0, [pc, #4]	; (800a10c <__sinit_lock_acquire+0x8>)
 800a106:	f000 b8a7 	b.w	800a258 <__retarget_lock_acquire_recursive>
 800a10a:	bf00      	nop
 800a10c:	200025be 	.word	0x200025be

0800a110 <__sinit_lock_release>:
 800a110:	4801      	ldr	r0, [pc, #4]	; (800a118 <__sinit_lock_release+0x8>)
 800a112:	f000 b8a2 	b.w	800a25a <__retarget_lock_release_recursive>
 800a116:	bf00      	nop
 800a118:	200025be 	.word	0x200025be

0800a11c <__sinit>:
 800a11c:	b510      	push	{r4, lr}
 800a11e:	4604      	mov	r4, r0
 800a120:	f7ff fff0 	bl	800a104 <__sinit_lock_acquire>
 800a124:	69a3      	ldr	r3, [r4, #24]
 800a126:	b11b      	cbz	r3, 800a130 <__sinit+0x14>
 800a128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a12c:	f7ff bff0 	b.w	800a110 <__sinit_lock_release>
 800a130:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a134:	6523      	str	r3, [r4, #80]	; 0x50
 800a136:	4b13      	ldr	r3, [pc, #76]	; (800a184 <__sinit+0x68>)
 800a138:	4a13      	ldr	r2, [pc, #76]	; (800a188 <__sinit+0x6c>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a13e:	42a3      	cmp	r3, r4
 800a140:	bf04      	itt	eq
 800a142:	2301      	moveq	r3, #1
 800a144:	61a3      	streq	r3, [r4, #24]
 800a146:	4620      	mov	r0, r4
 800a148:	f000 f820 	bl	800a18c <__sfp>
 800a14c:	6060      	str	r0, [r4, #4]
 800a14e:	4620      	mov	r0, r4
 800a150:	f000 f81c 	bl	800a18c <__sfp>
 800a154:	60a0      	str	r0, [r4, #8]
 800a156:	4620      	mov	r0, r4
 800a158:	f000 f818 	bl	800a18c <__sfp>
 800a15c:	2200      	movs	r2, #0
 800a15e:	60e0      	str	r0, [r4, #12]
 800a160:	2104      	movs	r1, #4
 800a162:	6860      	ldr	r0, [r4, #4]
 800a164:	f7ff ff82 	bl	800a06c <std>
 800a168:	68a0      	ldr	r0, [r4, #8]
 800a16a:	2201      	movs	r2, #1
 800a16c:	2109      	movs	r1, #9
 800a16e:	f7ff ff7d 	bl	800a06c <std>
 800a172:	68e0      	ldr	r0, [r4, #12]
 800a174:	2202      	movs	r2, #2
 800a176:	2112      	movs	r1, #18
 800a178:	f7ff ff78 	bl	800a06c <std>
 800a17c:	2301      	movs	r3, #1
 800a17e:	61a3      	str	r3, [r4, #24]
 800a180:	e7d2      	b.n	800a128 <__sinit+0xc>
 800a182:	bf00      	nop
 800a184:	0800a580 	.word	0x0800a580
 800a188:	0800a0b5 	.word	0x0800a0b5

0800a18c <__sfp>:
 800a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18e:	4607      	mov	r7, r0
 800a190:	f7ff ffac 	bl	800a0ec <__sfp_lock_acquire>
 800a194:	4b1e      	ldr	r3, [pc, #120]	; (800a210 <__sfp+0x84>)
 800a196:	681e      	ldr	r6, [r3, #0]
 800a198:	69b3      	ldr	r3, [r6, #24]
 800a19a:	b913      	cbnz	r3, 800a1a2 <__sfp+0x16>
 800a19c:	4630      	mov	r0, r6
 800a19e:	f7ff ffbd 	bl	800a11c <__sinit>
 800a1a2:	3648      	adds	r6, #72	; 0x48
 800a1a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	d503      	bpl.n	800a1b4 <__sfp+0x28>
 800a1ac:	6833      	ldr	r3, [r6, #0]
 800a1ae:	b30b      	cbz	r3, 800a1f4 <__sfp+0x68>
 800a1b0:	6836      	ldr	r6, [r6, #0]
 800a1b2:	e7f7      	b.n	800a1a4 <__sfp+0x18>
 800a1b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a1b8:	b9d5      	cbnz	r5, 800a1f0 <__sfp+0x64>
 800a1ba:	4b16      	ldr	r3, [pc, #88]	; (800a214 <__sfp+0x88>)
 800a1bc:	60e3      	str	r3, [r4, #12]
 800a1be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1c2:	6665      	str	r5, [r4, #100]	; 0x64
 800a1c4:	f000 f847 	bl	800a256 <__retarget_lock_init_recursive>
 800a1c8:	f7ff ff96 	bl	800a0f8 <__sfp_lock_release>
 800a1cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a1d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a1d4:	6025      	str	r5, [r4, #0]
 800a1d6:	61a5      	str	r5, [r4, #24]
 800a1d8:	2208      	movs	r2, #8
 800a1da:	4629      	mov	r1, r5
 800a1dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1e0:	f7fd fdfe 	bl	8007de0 <memset>
 800a1e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1f0:	3468      	adds	r4, #104	; 0x68
 800a1f2:	e7d9      	b.n	800a1a8 <__sfp+0x1c>
 800a1f4:	2104      	movs	r1, #4
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	f7ff ff62 	bl	800a0c0 <__sfmoreglue>
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	6030      	str	r0, [r6, #0]
 800a200:	2800      	cmp	r0, #0
 800a202:	d1d5      	bne.n	800a1b0 <__sfp+0x24>
 800a204:	f7ff ff78 	bl	800a0f8 <__sfp_lock_release>
 800a208:	230c      	movs	r3, #12
 800a20a:	603b      	str	r3, [r7, #0]
 800a20c:	e7ee      	b.n	800a1ec <__sfp+0x60>
 800a20e:	bf00      	nop
 800a210:	0800a580 	.word	0x0800a580
 800a214:	ffff0001 	.word	0xffff0001

0800a218 <_fwalk_reent>:
 800a218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a21c:	4606      	mov	r6, r0
 800a21e:	4688      	mov	r8, r1
 800a220:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a224:	2700      	movs	r7, #0
 800a226:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a22a:	f1b9 0901 	subs.w	r9, r9, #1
 800a22e:	d505      	bpl.n	800a23c <_fwalk_reent+0x24>
 800a230:	6824      	ldr	r4, [r4, #0]
 800a232:	2c00      	cmp	r4, #0
 800a234:	d1f7      	bne.n	800a226 <_fwalk_reent+0xe>
 800a236:	4638      	mov	r0, r7
 800a238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a23c:	89ab      	ldrh	r3, [r5, #12]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d907      	bls.n	800a252 <_fwalk_reent+0x3a>
 800a242:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a246:	3301      	adds	r3, #1
 800a248:	d003      	beq.n	800a252 <_fwalk_reent+0x3a>
 800a24a:	4629      	mov	r1, r5
 800a24c:	4630      	mov	r0, r6
 800a24e:	47c0      	blx	r8
 800a250:	4307      	orrs	r7, r0
 800a252:	3568      	adds	r5, #104	; 0x68
 800a254:	e7e9      	b.n	800a22a <_fwalk_reent+0x12>

0800a256 <__retarget_lock_init_recursive>:
 800a256:	4770      	bx	lr

0800a258 <__retarget_lock_acquire_recursive>:
 800a258:	4770      	bx	lr

0800a25a <__retarget_lock_release_recursive>:
 800a25a:	4770      	bx	lr

0800a25c <__swhatbuf_r>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	460e      	mov	r6, r1
 800a260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a264:	2900      	cmp	r1, #0
 800a266:	b096      	sub	sp, #88	; 0x58
 800a268:	4614      	mov	r4, r2
 800a26a:	461d      	mov	r5, r3
 800a26c:	da08      	bge.n	800a280 <__swhatbuf_r+0x24>
 800a26e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	602a      	str	r2, [r5, #0]
 800a276:	061a      	lsls	r2, r3, #24
 800a278:	d410      	bmi.n	800a29c <__swhatbuf_r+0x40>
 800a27a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a27e:	e00e      	b.n	800a29e <__swhatbuf_r+0x42>
 800a280:	466a      	mov	r2, sp
 800a282:	f000 f8fb 	bl	800a47c <_fstat_r>
 800a286:	2800      	cmp	r0, #0
 800a288:	dbf1      	blt.n	800a26e <__swhatbuf_r+0x12>
 800a28a:	9a01      	ldr	r2, [sp, #4]
 800a28c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a290:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a294:	425a      	negs	r2, r3
 800a296:	415a      	adcs	r2, r3
 800a298:	602a      	str	r2, [r5, #0]
 800a29a:	e7ee      	b.n	800a27a <__swhatbuf_r+0x1e>
 800a29c:	2340      	movs	r3, #64	; 0x40
 800a29e:	2000      	movs	r0, #0
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	b016      	add	sp, #88	; 0x58
 800a2a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2a8 <__smakebuf_r>:
 800a2a8:	898b      	ldrh	r3, [r1, #12]
 800a2aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2ac:	079d      	lsls	r5, r3, #30
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	d507      	bpl.n	800a2c4 <__smakebuf_r+0x1c>
 800a2b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	6123      	str	r3, [r4, #16]
 800a2bc:	2301      	movs	r3, #1
 800a2be:	6163      	str	r3, [r4, #20]
 800a2c0:	b002      	add	sp, #8
 800a2c2:	bd70      	pop	{r4, r5, r6, pc}
 800a2c4:	ab01      	add	r3, sp, #4
 800a2c6:	466a      	mov	r2, sp
 800a2c8:	f7ff ffc8 	bl	800a25c <__swhatbuf_r>
 800a2cc:	9900      	ldr	r1, [sp, #0]
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7fe faad 	bl	8008830 <_malloc_r>
 800a2d6:	b948      	cbnz	r0, 800a2ec <__smakebuf_r+0x44>
 800a2d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2dc:	059a      	lsls	r2, r3, #22
 800a2de:	d4ef      	bmi.n	800a2c0 <__smakebuf_r+0x18>
 800a2e0:	f023 0303 	bic.w	r3, r3, #3
 800a2e4:	f043 0302 	orr.w	r3, r3, #2
 800a2e8:	81a3      	strh	r3, [r4, #12]
 800a2ea:	e7e3      	b.n	800a2b4 <__smakebuf_r+0xc>
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <__smakebuf_r+0x7c>)
 800a2ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	6020      	str	r0, [r4, #0]
 800a2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2f8:	81a3      	strh	r3, [r4, #12]
 800a2fa:	9b00      	ldr	r3, [sp, #0]
 800a2fc:	6163      	str	r3, [r4, #20]
 800a2fe:	9b01      	ldr	r3, [sp, #4]
 800a300:	6120      	str	r0, [r4, #16]
 800a302:	b15b      	cbz	r3, 800a31c <__smakebuf_r+0x74>
 800a304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a308:	4630      	mov	r0, r6
 800a30a:	f000 f8c9 	bl	800a4a0 <_isatty_r>
 800a30e:	b128      	cbz	r0, 800a31c <__smakebuf_r+0x74>
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	f023 0303 	bic.w	r3, r3, #3
 800a316:	f043 0301 	orr.w	r3, r3, #1
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	89a0      	ldrh	r0, [r4, #12]
 800a31e:	4305      	orrs	r5, r0
 800a320:	81a5      	strh	r5, [r4, #12]
 800a322:	e7cd      	b.n	800a2c0 <__smakebuf_r+0x18>
 800a324:	0800a0b5 	.word	0x0800a0b5

0800a328 <_raise_r>:
 800a328:	291f      	cmp	r1, #31
 800a32a:	b538      	push	{r3, r4, r5, lr}
 800a32c:	4604      	mov	r4, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	d904      	bls.n	800a33c <_raise_r+0x14>
 800a332:	2316      	movs	r3, #22
 800a334:	6003      	str	r3, [r0, #0]
 800a336:	f04f 30ff 	mov.w	r0, #4294967295
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a33e:	b112      	cbz	r2, 800a346 <_raise_r+0x1e>
 800a340:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a344:	b94b      	cbnz	r3, 800a35a <_raise_r+0x32>
 800a346:	4620      	mov	r0, r4
 800a348:	f000 f830 	bl	800a3ac <_getpid_r>
 800a34c:	462a      	mov	r2, r5
 800a34e:	4601      	mov	r1, r0
 800a350:	4620      	mov	r0, r4
 800a352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a356:	f000 b817 	b.w	800a388 <_kill_r>
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d00a      	beq.n	800a374 <_raise_r+0x4c>
 800a35e:	1c59      	adds	r1, r3, #1
 800a360:	d103      	bne.n	800a36a <_raise_r+0x42>
 800a362:	2316      	movs	r3, #22
 800a364:	6003      	str	r3, [r0, #0]
 800a366:	2001      	movs	r0, #1
 800a368:	e7e7      	b.n	800a33a <_raise_r+0x12>
 800a36a:	2400      	movs	r4, #0
 800a36c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a370:	4628      	mov	r0, r5
 800a372:	4798      	blx	r3
 800a374:	2000      	movs	r0, #0
 800a376:	e7e0      	b.n	800a33a <_raise_r+0x12>

0800a378 <raise>:
 800a378:	4b02      	ldr	r3, [pc, #8]	; (800a384 <raise+0xc>)
 800a37a:	4601      	mov	r1, r0
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	f7ff bfd3 	b.w	800a328 <_raise_r>
 800a382:	bf00      	nop
 800a384:	20000100 	.word	0x20000100

0800a388 <_kill_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4d07      	ldr	r5, [pc, #28]	; (800a3a8 <_kill_r+0x20>)
 800a38c:	2300      	movs	r3, #0
 800a38e:	4604      	mov	r4, r0
 800a390:	4608      	mov	r0, r1
 800a392:	4611      	mov	r1, r2
 800a394:	602b      	str	r3, [r5, #0]
 800a396:	f7f6 fedb 	bl	8001150 <_kill>
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	d102      	bne.n	800a3a4 <_kill_r+0x1c>
 800a39e:	682b      	ldr	r3, [r5, #0]
 800a3a0:	b103      	cbz	r3, 800a3a4 <_kill_r+0x1c>
 800a3a2:	6023      	str	r3, [r4, #0]
 800a3a4:	bd38      	pop	{r3, r4, r5, pc}
 800a3a6:	bf00      	nop
 800a3a8:	200025b8 	.word	0x200025b8

0800a3ac <_getpid_r>:
 800a3ac:	f7f6 bec8 	b.w	8001140 <_getpid>

0800a3b0 <__sread>:
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b8:	f000 f894 	bl	800a4e4 <_read_r>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	bfab      	itete	ge
 800a3c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3c2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3c4:	181b      	addge	r3, r3, r0
 800a3c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3ca:	bfac      	ite	ge
 800a3cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ce:	81a3      	strhlt	r3, [r4, #12]
 800a3d0:	bd10      	pop	{r4, pc}

0800a3d2 <__swrite>:
 800a3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d6:	461f      	mov	r7, r3
 800a3d8:	898b      	ldrh	r3, [r1, #12]
 800a3da:	05db      	lsls	r3, r3, #23
 800a3dc:	4605      	mov	r5, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	4616      	mov	r6, r2
 800a3e2:	d505      	bpl.n	800a3f0 <__swrite+0x1e>
 800a3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f000 f868 	bl	800a4c0 <_lseek_r>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	463b      	mov	r3, r7
 800a400:	4628      	mov	r0, r5
 800a402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a406:	f000 b817 	b.w	800a438 <_write_r>

0800a40a <__sseek>:
 800a40a:	b510      	push	{r4, lr}
 800a40c:	460c      	mov	r4, r1
 800a40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a412:	f000 f855 	bl	800a4c0 <_lseek_r>
 800a416:	1c43      	adds	r3, r0, #1
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	bf15      	itete	ne
 800a41c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a41e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a426:	81a3      	strheq	r3, [r4, #12]
 800a428:	bf18      	it	ne
 800a42a:	81a3      	strhne	r3, [r4, #12]
 800a42c:	bd10      	pop	{r4, pc}

0800a42e <__sclose>:
 800a42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a432:	f000 b813 	b.w	800a45c <_close_r>
	...

0800a438 <_write_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d07      	ldr	r5, [pc, #28]	; (800a458 <_write_r+0x20>)
 800a43c:	4604      	mov	r4, r0
 800a43e:	4608      	mov	r0, r1
 800a440:	4611      	mov	r1, r2
 800a442:	2200      	movs	r2, #0
 800a444:	602a      	str	r2, [r5, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	f7f6 feb9 	bl	80011be <_write>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_write_r+0x1e>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_write_r+0x1e>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	200025b8 	.word	0x200025b8

0800a45c <_close_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	; (800a478 <_close_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f6 fec5 	bl	80011f6 <_close>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_close_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_close_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	200025b8 	.word	0x200025b8

0800a47c <_fstat_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d07      	ldr	r5, [pc, #28]	; (800a49c <_fstat_r+0x20>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	4611      	mov	r1, r2
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	f7f6 fec0 	bl	800120e <_fstat>
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	d102      	bne.n	800a498 <_fstat_r+0x1c>
 800a492:	682b      	ldr	r3, [r5, #0]
 800a494:	b103      	cbz	r3, 800a498 <_fstat_r+0x1c>
 800a496:	6023      	str	r3, [r4, #0]
 800a498:	bd38      	pop	{r3, r4, r5, pc}
 800a49a:	bf00      	nop
 800a49c:	200025b8 	.word	0x200025b8

0800a4a0 <_isatty_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d06      	ldr	r5, [pc, #24]	; (800a4bc <_isatty_r+0x1c>)
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	602b      	str	r3, [r5, #0]
 800a4ac:	f7f6 febf 	bl	800122e <_isatty>
 800a4b0:	1c43      	adds	r3, r0, #1
 800a4b2:	d102      	bne.n	800a4ba <_isatty_r+0x1a>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	b103      	cbz	r3, 800a4ba <_isatty_r+0x1a>
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	200025b8 	.word	0x200025b8

0800a4c0 <_lseek_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d07      	ldr	r5, [pc, #28]	; (800a4e0 <_lseek_r+0x20>)
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	4608      	mov	r0, r1
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	602a      	str	r2, [r5, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f7f6 feb8 	bl	8001244 <_lseek>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_lseek_r+0x1e>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_lseek_r+0x1e>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	200025b8 	.word	0x200025b8

0800a4e4 <_read_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	4d07      	ldr	r5, [pc, #28]	; (800a504 <_read_r+0x20>)
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	4608      	mov	r0, r1
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	602a      	str	r2, [r5, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f7f6 fe46 	bl	8001184 <_read>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_read_r+0x1e>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_read_r+0x1e>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	200025b8 	.word	0x200025b8

0800a508 <_init>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	bf00      	nop
 800a50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50e:	bc08      	pop	{r3}
 800a510:	469e      	mov	lr, r3
 800a512:	4770      	bx	lr

0800a514 <_fini>:
 800a514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a516:	bf00      	nop
 800a518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a51a:	bc08      	pop	{r3}
 800a51c:	469e      	mov	lr, r3
 800a51e:	4770      	bx	lr
